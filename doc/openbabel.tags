<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>API Documentation</title>
    <filename>index</filename>
    <docanchor file="index">base</docanchor>
  </compound>
  <compound kind="file">
    <name>alias.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>alias_8cpp</filename>
    <includes id="alias_8h" name="alias.h" local="no" imported="no">openbabel/alias.h</includes>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <includes id="op_8h" name="op.h" local="no" imported="no">openbabel/op.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">openbabel/builder.h</includes>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="mcdlutil_8h" name="mcdlutil.h" local="no" imported="no">openbabel/mcdlutil.h</includes>
    <includes id="atomclass_8h" name="atomclass.h" local="no" imported="no">openbabel/atomclass.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>alias.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>alias_8h</filename>
    <includes id="shared__ptr_8h" name="shared_ptr.h" local="no" imported="no">openbabel/shared_ptr.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="class">OpenBabel::AliasData</class>
    <class kind="struct">OpenBabel::AliasData::AliasItem</class>
    <namespace>OpenBabel</namespace>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>AliasDataType</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af962a429bf8fe8b8f222ff1a6018c35e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>align.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/math/</path>
    <filename>align_8cpp</filename>
    <includes id="align_8h" name="align.h" local="no" imported="no">openbabel/math/align.h</includes>
    <includes id="graphsym_8h" name="graphsym.h" local="no" imported="no">openbabel/graphsym.h</includes>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>align.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/math/</path>
    <filename>align_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="isomorphism_8h" name="isomorphism.h" local="no" imported="no">openbabel/isomorphism.h</includes>
    <class kind="class">OpenBabel::OBAlign</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>atom.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>atom_8cpp</filename>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="molchrg_8h" name="molchrg.h" local="no" imported="no">openbabel/molchrg.h</includes>
    <includes id="phmodel_8h" name="phmodel.h" local="no" imported="no">openbabel/phmodel.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">openbabel/builder.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ONE_OVER_SQRT3</name>
      <anchorfile>atom_8cpp.html</anchorfile>
      <anchor>ae62f480b02781519d3adc222e3610a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SQRT_TWO_THIRDS</name>
      <anchorfile>atom_8cpp.html</anchorfile>
      <anchor>a9afc3f5eb64b2964a208b2224e160f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strncasecmp</name>
      <anchorfile>atom_8cpp.html</anchorfile>
      <anchor>a674b7f779fec84cb1a3be8222b5c381a</anchor>
      <arglist>(const char *s1, const char *s2, size_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ApplyRotMatToBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a56bd19e6ce3d11cd0ccdc0420e91ada3</anchor>
      <arglist>(OBMol &amp;mol, matrix3x3 &amp;m, OBAtom *a1, OBAtom *a2)</arglist>
    </member>
    <member kind="variable">
      <type>OBPhModel</type>
      <name>phmodel</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4a64fa5669b273a31330641abe62978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>atom_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="residue_8h" name="residue.h" local="no" imported="no">openbabel/residue.h</includes>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <class kind="class">OpenBabel::OBAtom</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_4RING_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a7049a943ce03181c7004fe9ecd798f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_3RING_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a54cf51e4021ce031b9a9bd20e053cead</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_AROMATIC_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>ac08352e8abee93573a66f692f0827bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_RING_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a5f2ffc18f5cc3589dd1978252169f11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CSTEREO_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a4cfdf58a49dd4ebfab6d8dada02fef43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_ACSTEREO_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a7a0c4ca8c736e743fda131e25de50a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_DONOR_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>acb984613554c9199387e3039b6cf4e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_ACCEPTOR_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a86c329377a02eb7b0d5e015a6d0b1099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CHIRAL_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a57a10e2d6bfa530e787d7e13cc9da15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_POS_CHIRAL_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a2cac237d3ceb0758f76448ba35cf4fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_NEG_CHIRAL_ATOM</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>a28504d751913b6affc112690765c1ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_ATOM_HAS_NO_H</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>aad40730c29a0be944d55f5b3e3f98ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_ATOM_NOT_H_DEFICIENT</name>
      <anchorfile>atom_8h.html</anchorfile>
      <anchor>ac41fb93bbf43756058cf90930dae22f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBAtom</type>
      <name>OBNodeBase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac0863bf2485bd66ba3afa6e50ddc20f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBBond * &gt;::iterator</type>
      <name>OBBondIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a54495d3eb8f9749d0237e6bda59e0abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBAtom * &gt;::iterator</type>
      <name>OBAtomIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aed11ccd81d7abaccbdf10486a5ae0402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atomclass.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>atomclass_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <class kind="class">OpenBabel::OBAtomClassData</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>base.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>base_8cpp</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>OBReleaseVersion</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a456fbf388c19a1a63a95fe60d28dd869</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>base.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>base_8h</filename>
    <includes id="tokenst_8h" name="tokenst.h" local="no" imported="no">openbabel/tokenst.h</includes>
    <class kind="class">OpenBabel::OBGenericData</class>
    <class kind="class">OpenBabel::OBBase</class>
    <namespace>OpenBabel</namespace>
    <namespace>OpenBabel::OBGenericDataType</namespace>
    <member kind="typedef">
      <type>std::vector&lt; OBGenericData * &gt;::iterator</type>
      <name>OBDataIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5ca88aa35c43da1b791c7703ec8978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UndefinedData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baaed11c625f3ba337a0468e31990a832e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PairData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf37b8c94a903cbf5fc45475c815c541a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EnergyData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baed27589416d0d35119923437b476c33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CommentData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad015d8b14f8fa9e2c8107ec0b6d637a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConformerData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa8504383b864769bce6f9962ff55711c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExternalBondData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55babbdeac68debaebaea148a0f2271c8128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RotamerList</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba6792a664f1614a75f33128e139392ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VirtualBondData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba71d63bc919dfc9800e9e274301882557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RingData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba614fe63c6aaa519336589c0b3dcbcdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TorsionData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba9cf293f0b1ed83d3b1b804ca947ddcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngleData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba99b8d17f7ee6c09b008ab6bf5b5bf0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SerialNums</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4804a06df36aa971eb112ada03885b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitCell</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba26d8504c2596c9ef59dab47c01a4dd1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpinData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab44db07941815c91fbc8e01f66252208</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ChargeData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bae1fbcef5ed6d30c670148af84890d0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SymmetryData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba2ed92f76270c3218036e96ad1044301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ChiralData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baab3b5ad7023167aa297c4c555c10acdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OccupationData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baac4fd2f8c1bedfe2d09c303e9c1b8e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DensityData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba5b0d37c5cdfbcc15ee852b769c25d1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElectronicData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba88ee5a5e80dd4e9523761d17ba9b81f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VibrationData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab69829f7efb675ca0f6a4d8f245ceaf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RotationData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab7c011beb81d9ba86035c1c0b7609899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NuclearData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55badd3a99a5a7d554d150d7241368f2ba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SetData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GridData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba851ab4fe739bc6b4cc7b968ab9c4e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VectorData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba46bb764382af04b5c32d3370e6b677f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MatrixData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba8239a3bb53f99dfa7da4734d77733abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StereoData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3f9974bdbccde7c26064d7ec21d570ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOSData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baad6691689525c8623b3c0d08d49c424a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElectronicTransitionData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baeb82edb7e1b51246c53e0dd7248365a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData0</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad4a188d7201f00f99ec649edead73c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData1</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba7bd8533c833569ccbd4a701378ccffb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData2</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba7be53c3112d0111bbbee98cefbac4850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData3</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba012e8681e30646e38989b9a0f6ace98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData4</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba342cb4110346a130dc73e4e3491533de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData5</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf20627567e8d1835670ff531d5cb9d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData6</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4c2040d0daf33eff43588933be9150a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData7</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba40d766aa8e0726ef56b99986ec4d275d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData8</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab32f4336d6de7ee7fdf6557bcd9b01c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData9</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4a0f2b355a4e2d24d617f2824c165a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData10</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba240964387d336b8321d240044762c8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData11</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba806a44c47ce81d45527562fca2917d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData12</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3b6e862da975578f9b8f2a5cef18935c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData13</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bafe6b84e76821b52a2eb5f3a761dc8c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData14</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3cbbbad42fbfe9766b0892ccc88b47c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData15</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba8051d4056f7d8a89233dfa0ebc949bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DataOrigin</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>any</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fileformatInput</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userInput</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>perceived</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>external</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>local</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>OBReleaseVersion</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a456fbf388c19a1a63a95fe60d28dd869</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitvec.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>bitvec_8cpp</filename>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">openbabel/bitvec.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LowBit</name>
      <anchorfile>bitvec_8cpp.html</anchorfile>
      <anchor>a92ee8f2d30208e7e70f543f2955c0110</anchor>
      <arglist>(set, bit)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator|</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a48ed8b37310a8d7153a64309f09901a0</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator&amp;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a327b6158a69368530d30de5ce06cc7a5</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator^</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa2cf1233a6c6ce53b79f94b7a60d2d2a</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator-</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a682eec6ce003f48a6098d6700e3cedba</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac001b331f648fbbd8590576f59d4d2ab</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3ba5fcca1ecb1241049411be7017186d</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a54358a339fc06df028bb5fbe403b0032</anchor>
      <arglist>(std::istream &amp;is, OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a42db9af61dccd8f586f358058b78d1cc</anchor>
      <arglist>(std::ostream &amp;os, const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Tanimoto</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aeb3b137500bda8573ee1aa5757011a66</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>bitsoff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a384eab3fdca5eabacaf7c1167d8fbbe8</anchor>
      <arglist>[SETWORD]</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>nibble_bit_count</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37764b678471578b5f9441bd6f130fd8</anchor>
      <arglist>[0x10]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitvec.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>bitvec_8h</filename>
    <class kind="class">OpenBabel::OBBitVec</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SETWORD</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a9fe4f0c47a767fe2d6e2c365059a5a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WORDROLL</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a887ff76464a78f746a33cad3d7610766</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WORDMASK</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a076926595d98cea736e59225f32e2dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WORDSIZE_OF_BITSIZE</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>adb43d23e9968ccbacca3dad700e17b7d</anchor>
      <arglist>(bit_size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STARTWORDS</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ab0d0da65f8c1f9e86e1c16294dc572aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Tanimoto</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aeb3b137500bda8573ee1aa5757011a66</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bond.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>bond_8cpp</filename>
    <includes id="bond_8h" name="bond.h" local="no" imported="no">openbabel/bond.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>bond.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>bond_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <class kind="class">OpenBabel::OBBond</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_AROMATIC_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a90183171d38e32f07e97bffb7836f9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_WEDGE_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a71faadca5c5e100b081f5a563c22e9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_HASH_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a14b10c08a25058d1d4a98f8573195119</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_RING_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a2f74970f7126e2bc1e9a4e1d8ed1af26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_TORUP_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a4acf405087f46d03ebc4581cbce02f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_TORDOWN_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a7c5124279ed6a19b93840ab3038ef2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_KSINGLE_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a2cbf156fa54b94fb630c4915ab06cbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_KDOUBLE_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>af2291cb768c88e059cb8ee24d3f66f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_KTRIPLE_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>ae702c1e19159f86ccd298f273ac94cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CLOSURE_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a19b6306ab83f788b1fb60f8816b07e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_WEDGE_OR_HASH_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a40ac5b89beb0ea8297e93ee26e7eaf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CIS_OR_TRANS_BOND</name>
      <anchorfile>bond_8h.html</anchorfile>
      <anchor>a7d2254db1e5e6904e5490bfc80a281ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBBond</type>
      <name>OBEdgeBase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad30fc0fda0a0c8a6f7d22b8202af0dce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bondtyper.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>bondtyper_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="bondtyper_8h" name="bondtyper.h" local="no" imported="no">openbabel/bondtyper.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="variable">
      <type>OBBondTyper</type>
      <name>bondtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aba95148bad1cac8e3abb51a485c17cac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bondtyper.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>bondtyper_8h</filename>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <class kind="class">OpenBabel::OBBondTyper</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>builder.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>builder_8cpp</filename>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">openbabel/builder.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="bond_8h" name="bond.h" local="no" imported="no">openbabel/bond.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="rotamer_8h" name="rotamer.h" local="no" imported="no">openbabel/rotamer.h</includes>
    <includes id="rotor_8h" name="rotor.h" local="no" imported="no">openbabel/rotor.h</includes>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <includes id="locale_8h" name="locale.h" local="no" imported="no">openbabel/locale.h</includes>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <includes id="cistrans_8h" name="cistrans.h" local="no" imported="no">openbabel/stereo/cistrans.h</includes>
    <includes id="tetrahedral_8h" name="tetrahedral.h" local="no" imported="no">openbabel/stereo/tetrahedral.h</includes>
    <includes id="squareplanar_8h" name="squareplanar.h" local="no" imported="no">openbabel/stereo/squareplanar.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>vector3</type>
      <name>GetCorrectedBondVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a69c4665c3756720ac6f0d62b2488fdd6</anchor>
      <arglist>(OBAtom *atom1, OBAtom *atom2, int bondOrder=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>builder.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>builder_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <class kind="class">OpenBabel::OBBuilder</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>canon.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>canon_8cpp</filename>
    <includes id="canon_8h" name="canon.h" local="no" imported="no">openbabel/canon.h</includes>
    <includes id="graphsym_8h" name="graphsym.h" local="no" imported="no">openbabel/graphsym.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="cistrans_8h" name="cistrans.h" local="no" imported="no">openbabel/stereo/cistrans.h</includes>
    <includes id="tetrahedral_8h" name="tetrahedral.h" local="no" imported="no">openbabel/stereo/tetrahedral.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG</name>
      <anchorfile>canon_8cpp.html</anchorfile>
      <anchor>ad72dbcf6d0153db1b8d8a58001feed83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_IDENTITY_NODES</name>
      <anchorfile>canon_8cpp.html</anchorfile>
      <anchor>a1e8f55d51be95e76633d84600927bba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_vector</name>
      <anchorfile>canon_8cpp.html</anchorfile>
      <anchor>a6c29f70e05653a985d198b3fb67b02b1</anchor>
      <arglist>(const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompareBondPairSecond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac166197716f00da13cdac1c0cee85975</anchor>
      <arglist>(const std::pair&lt; OBBond *, unsigned int &gt; &amp;a, const std::pair&lt; OBBond *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNbrs</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a723b609c4e82a3b0ae91f4aa44196740</anchor>
      <arglist>(OBBitVec &amp;fragment, OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>getFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a04fb8cae80f1866e2921853c509b07b4</anchor>
      <arglist>(OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds=std::vector&lt; OBBond * &gt;())</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>getFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0e3ffef22e9d0e3a960e1ddc3c7a3af0</anchor>
      <arglist>(OBAtom *atom, OBAtom *skip, const OBBitVec &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFerroceneBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>add2cdb4d7ec3918bac8fa18eb32d4d4c</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMetalloceneBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0e9fff5044095331af29c5b0781557c4</anchor>
      <arglist>(std::vector&lt; OBBond * &gt; &amp;bonds, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CanonicalLabels</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62d602f9ffb93ae1f37c2d3bbf010d77</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, std::vector&lt; unsigned int &gt; &amp;canonical_labels, const OBBitVec &amp;mask=OBBitVec(), int maxSeconds=5, bool onlyOne=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>canon.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>canon_8h</filename>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">openbabel/bitvec.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>CanonicalLabels</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62d602f9ffb93ae1f37c2d3bbf010d77</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, std::vector&lt; unsigned int &gt; &amp;canonical_labels, const OBBitVec &amp;mask=OBBitVec(), int maxSeconds=5, bool onlyOne=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chains.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>chains_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="chains_8h" name="chains.h" local="no" imported="no">openbabel/chains.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RESIDMIN</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a789d75c333afe1a42c9382bdabbc05df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESIDMAX</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a01ef695c47f5b57decf5630530db03fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATOMMINAMINO</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a3b9ac6f14b4d12b1dd0b50fc869150f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATOMMINNUCLEIC</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a3b875ac429eaa647cd954132dfd1a3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXPEPTIDE</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af1b2c4af4f9a6909c7a63cc9cc0e86ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXNUCLEIC</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a25866c9e7f565e2d902304f087338475</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AMINOMAX</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a681d502467126bdc1b5673ecea585d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUCLEOMAX</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a62f84f11159f8899196affa2f08cc6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STACKSIZE</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a21d9543c516fffee84a7963224271f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_N</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a6c15f0b5dc2e3d8ff6053c4f87d67d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_CA</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ac16bf9811a453610911d0bd9102288ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_C</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a1f6a835d3afb10fe08472159fbf549f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a248b6567e205ae87cbe56589cfb94501</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_OXT</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a88c88b894c4052f2baa1aeb75eff7562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_P</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a935557cb85449018da4630782d7ce2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O1P</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a1a5071c945278c8d95fbaadffd67248d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O2P</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af7276ed7ef733ecaf083509f0bb8b988</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O5</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ae3dd5cd7ecd562c8d45a83858015709b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_C5</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af4edc20cb854fd431fabe0f0ff8afaca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_C4</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a9a2156ae30e75165576d6e1d440c9302</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O4</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a21ca9f3446dd6553492961b03632e6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_C3</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a927e13514a47132e4da92536637f8216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O3</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a28c7966e330c8dd249e92fe47898e635</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_C2</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af53f676a6a8b4459b224d93e00281b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_O2</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ab58a6225f09c0b8bd9c9cb0b7b29c329</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_C1</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a5898661f2fc9d160b92d6ab0d62d06ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitN</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>afdc865155f4d76d1b7263596bd0edf49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitNTer</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a0005554372236be880d823eb65dcf388</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitNPro</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ae0973e7b815ea6851e281b533262e109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitNPT</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a4a6f09063bdf156553e89f4aa35b6593</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitCA</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a0294f803b9fd89e1f395ccee6de77f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitCAGly</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>abd174439dd77ddea44d757c5127bd46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a7f4a4d2deff2b307ebde0a7837082f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitCTer</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ada902d5dbd3d2f0c284e64719ee43938</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitCOXT</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a6673ae4d678f11db61f91547ce72bb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af38c89df946b010aba2fae8260ce5dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitOXT</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a4fdd45200d8fe48ce63c76709f05aa33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitNAll</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a3b091ab732fbbf9c5a65856acb488884</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitCAAll</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a72e17df83e777146539d6d7abf1a3f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitCAll</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a3678ad099d6e9c2984a8eb4c12103a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitOAll</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a5dac074b4b4b1d75d2cc874d82bb03ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitP</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a662154b71dec0b4009df21ee0b2ce990</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitPTer</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a8c429f313d7e7f54f1e3f2a740140b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitOP</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a1becef7bde4bf37da770cc0c454ecabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO5</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a29ad4524d0e2eaba929eaa95bac928f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO5Ter</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a19796f8aedb28b8d325d6c89884aa1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC5</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a11fe878f2cde89b48fea0e8e77d36097</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC4</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a458998967c0afebc53d461b6647ac21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO4</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a57181098a4b5dd7903521d605b22966a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC3</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>affa02a4bcc2316b626edff44e8e32d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO3</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af459c89c8d5a282b242e50ca9846744a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO3Ter</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a573e6ad605099e205b4011c1625454e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC2RNA</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a603277c192eb58fbfdc5274282f24afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC2DNA</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ab3ab8bbf8f642479afe6cf19cb6454ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO2</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a5b90c160709476cea828d0e9a05a9f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC1</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ab813729d61772dd867fcec8e8de01323</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitPAll</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>af8d1524e247e09b511c228e7e9f96173</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Bit05All</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ad4e1f69f71363d96b6ee6ed1e8efac68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitO3All</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a9a8fca5ef5d69a2e41d2fea24d0edd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BitC2All</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a2b625d784af69fba1a6ddd3def0639c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BC_ASSIGN</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a8be3457f7d91ce21ff01a98400f63a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BC_COUNT</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a67e8bca3decba7617a7c1cdc7e0ad4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BC_ELEM</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a5ae2b2d35877f525fe6e084ab8e3d3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BC_EVAL</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ac70ecea2d39e983bec54e7779a3eed94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BC_IDENT</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ab86a45268274d484ccaae05c2010b95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BC_LOCAL</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a2456b0e2ccba47be89c3b0c1d98d8b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_SINGLE</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ac8983d9ddf7c13f6cd2bc91e03b16104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_DOUBLE</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a1bab1805c655d217cd7754a8bae755c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_TRIPLE</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a5c02ee7c7086824194a022557a48d687</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_AROMATIC</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a8da1a8745ee8c68b3c88dfed06ec1156</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATOMMAX</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>a0fc07ba5f4a8d786b24fb28c7c5c62b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union OpenBabel::_ByteCode</type>
      <name>ByteCode</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abcd91e4b018d533740f00f35ae44e4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ByteCode *</type>
      <name>AllocateByteCode</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a818fd93f0aa1e1f5b3c63bbbc8013cca</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DeleteByteCode</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acc9426f6c6d58198a97d8c726660559d</anchor>
      <arglist>(ByteCode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FatalMemoryError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a59c2e046bb935ac3eba0d3b003d10176</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateByteCodes</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1748035db13037545433f80148a7c928</anchor>
      <arglist>(ByteCode **node, int resid, int curr, int prev, int bond)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>ChainsResName</name>
      <anchorfile>chains_8cpp.html</anchorfile>
      <anchor>ac6287f27c98f3d0703fb9f477a5304ab</anchor>
      <arglist>[RESIDMAX][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Template</type>
      <name>Peptide</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a26e55b55a5d9997fa7e9326cd603fcdd</anchor>
      <arglist>[MAXPEPTIDE]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Template</type>
      <name>Nucleotide</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab4cf89b53bf070dafd1717b69e89d8a0</anchor>
      <arglist>[MAXNUCLEIC]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>ChainsAtomName</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7b064978f82414d1a9805ac383a5cac5</anchor>
      <arglist>[ATOMMAX][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ResidType</type>
      <name>AminoAcids</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0f1fa68f20787eefe51bc205d70bf141</anchor>
      <arglist>[AMINOMAX]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ResidType</type>
      <name>Nucleotides</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2326ccdc5fd0c0b5cfd5842cf4c7da03</anchor>
      <arglist>[NUCLEOMAX]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MonoAtomType</type>
      <name>MonoAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6d27c5a78720907303f7345d7f972f36</anchor>
      <arglist>[MaxMonoAtom]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MonoBondType</type>
      <name>MonoBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a424ffb435ce72308ed456dd1c8e5de60</anchor>
      <arglist>[MaxMonoBond]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MonoAtomCount</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4f891e27abe7998822f22e513182317a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MonoBondCount</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afe6df7aef6454d16dfbde0b74a516b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static StackType</type>
      <name>Stack</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9e0089655dc8a4d83d40dcbe519ca9bb</anchor>
      <arglist>[STACKSIZE]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>StackPtr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5e019437eb125244e080ac8bee696b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>AtomIndex</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a08aed91cf3c0528c11e2c383078b9e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>BondIndex</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab8cd0fea55be4772aece582108b664c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>StrictFlag</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4e7dde6c2732deca11bff4c63c46372</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chains.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>chains_8h</filename>
    <class kind="class">OpenBabel::OBChainsParser</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MaxMonoAtom</name>
      <anchorfile>chains_8h.html</anchorfile>
      <anchor>a0a30b6310d4dca99e49673f6e530bdc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MaxMonoBond</name>
      <anchorfile>chains_8h.html</anchorfile>
      <anchor>ad6c9530ebbe94406872e1a4eb18b3b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Template</type>
      <name>Template</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8eff09d0456c2308e2afb34e824d9c33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chargemodel.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>chargemodel_8cpp</filename>
    <includes id="chargemodel_8h" name="chargemodel.h" local="no" imported="no">openbabel/chargemodel.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>chargemodel.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>chargemodel_8h</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <class kind="class">OpenBabel::OBChargeModel</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>chiral.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>chiral_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="chiral_8h" name="chiral.h" local="no" imported="no">openbabel/chiral.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>GetChirality</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad7009a91e72c28783be5346611efde3e</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; int &gt; &amp;chirality)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetParity4Ref</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7483e613b770424c7f1ff797900b9987</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; pref)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CorrectChirality</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abefbf418290927a56b3d124d3cc646d7</anchor>
      <arglist>(OBMol &amp;mol, OBAtom *atm, atomreftype i=input, atomreftype o=output)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcSignedVolume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac8f591b34d70fd0063b836ddf6d8cdbc</anchor>
      <arglist>(OBMol &amp;mol, OBAtom *, bool ReZeroZ=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>signed_volume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a07c3e3dff340f78121cc2c15da53cdb2</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GraphPotentials</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4c135379236431c7436651de978ef32</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; double &gt; &amp;pot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct_g_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a49d9094d3843107b37a072e7e4597fc3</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct_c_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae050b0cbe133308c07688d2438155504</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chiral.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>chiral_8h</filename>
    <includes id="matrix_8h" name="matrix.h" local="no" imported="no">openbabel/matrix.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>GraphPotentials</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4c135379236431c7436651de978ef32</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; double &gt; &amp;pot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct_g_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a49d9094d3843107b37a072e7e4597fc3</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct_c_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae050b0cbe133308c07688d2438155504</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcSignedVolume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac8f591b34d70fd0063b836ddf6d8cdbc</anchor>
      <arglist>(OBMol &amp;mol, OBAtom *, bool ReZeroZ=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>signed_volume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a07c3e3dff340f78121cc2c15da53cdb2</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetChirality</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad7009a91e72c28783be5346611efde3e</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; int &gt; &amp;chirality)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetParity4Ref</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7483e613b770424c7f1ff797900b9987</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; pref)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CorrectChirality</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abefbf418290927a56b3d124d3cc646d7</anchor>
      <arglist>(OBMol &amp;mol, OBAtom *atm, atomreftype i=input, atomreftype o=output)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cistrans.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/stereo/</path>
    <filename>cistrans_8h</filename>
    <includes id="tetraplanar_8h" name="tetraplanar.h" local="no" imported="no">openbabel/stereo/tetraplanar.h</includes>
    <class kind="class">OpenBabel::OBCisTransStereo</class>
    <class kind="struct">OpenBabel::OBCisTransStereo::Config</class>
    <namespace>OpenBabel</namespace>
    <namespace>std</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gadf8c733643a40f5135c2e0d8a32764c4</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBCisTransStereo &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaa6a386afa954e168b8c1c5b15c2d6f27</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBCisTransStereo::Config &amp;cfg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conformersearch.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>conformersearch_8cpp</filename>
    <includes id="conformersearch_8h" name="conformersearch.h" local="no" imported="no">openbabel/conformersearch.h</includes>
    <includes id="align_8h" name="align.h" local="no" imported="no">openbabel/math/align.h</includes>
    <includes id="forcefield_8h" name="forcefield.h" local="no" imported="no">openbabel/forcefield.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>conformersearch.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>conformersearch_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="rotor_8h" name="rotor.h" local="no" imported="no">openbabel/rotor.h</includes>
    <includes id="rotamer_8h" name="rotamer.h" local="no" imported="no">openbabel/rotamer.h</includes>
    <class kind="class">OpenBabel::OBConformerFilter</class>
    <class kind="class">OpenBabel::OBConformerFilters</class>
    <class kind="class">OpenBabel::OBStericConformerFilter</class>
    <class kind="class">OpenBabel::OBConformerScore</class>
    <class kind="class">OpenBabel::OBRMSDConformerScore</class>
    <class kind="class">OpenBabel::OBEnergyConformerScore</class>
    <class kind="class">OpenBabel::OBConformerSearch</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>RotorKey</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a087fe4bdc2d57b56addb4b9fd7fc0415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RotorKey &gt;</type>
      <name>RotorKeys</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5ae0fb6c3d3406efb549fbc9f8c26f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>data.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>data_8cpp</filename>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="locale_8h" name="locale.h" local="no" imported="no">openbabel/locale.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>int</type>
      <name>strncasecmp</name>
      <anchorfile>data_8cpp.html</anchorfile>
      <anchor>a674b7f779fec84cb1a3be8222b5c381a</anchor>
      <arglist>(const char *s1, const char *s2, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Toupper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1ea11acf2b1952b517470849055dd9d9</anchor>
      <arglist>(string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Tolower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1853c7aae336e34aaf9e3bf5098f6998</anchor>
      <arglist>(string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>data.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>data_8h</filename>
    <class kind="class">OpenBabel::OBGlobalDataBase</class>
    <class kind="class">OpenBabel::OBElement</class>
    <class kind="class">OpenBabel::OBElementTable</class>
    <class kind="class">OpenBabel::OBIsotopeTable</class>
    <class kind="class">OpenBabel::OBTypeTable</class>
    <class kind="class">OpenBabel::OBResidueData</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>depict.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/depict/</path>
    <filename>depict_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="alias_8h" name="alias.h" local="no" imported="no">openbabel/alias.h</includes>
    <includes id="atomclass_8h" name="atomclass.h" local="no" imported="no">openbabel/atomclass.h</includes>
    <includes id="depict_8h" name="depict.h" local="no" imported="no">openbabel/depict/depict.h</includes>
    <includes id="painter_8h" name="painter.h" local="no" imported="no">openbabel/depict/painter.h</includes>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="enumvalue">
      <name>Left</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a9d4d8b0b72fc2659da772d761a3c5ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Right</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960ad48f7af8c070184f3774c8e85854eb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Up</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a57a7edcbc04d6175683383cad5c3e0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Down</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960abcf8c79e9a5f5f9d606fb35645a0fb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetLabelAlignment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a474093accb1df03b02d17bc4b7f00377</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAtomSymClass</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a394447ad37adaf40565f53d07f5eed17</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>depict.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/depict/</path>
    <filename>depict_8h</filename>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <class kind="class">OpenBabel::OBDepict</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>descriptor.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>descriptor_8cpp</filename>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">openbabel/generic.h</includes>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="descriptor_8h" name="descriptor.h" local="no" imported="no">openbabel/descriptor.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>descriptor.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>descriptor_8h</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <class kind="class">OpenBabel::OBDescriptor</class>
    <namespace>OpenBabel</namespace>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DoComparison</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4f1b41f797d4f6def5e87727ab6baf39</anchor>
      <arglist>(char ch1, char ch2, T &amp;val, T &amp;filterval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dlhandler.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>dlhandler_8h</filename>
    <class kind="class">DLHandler</class>
    <member kind="define">
      <type>#define</type>
      <name>OBDLL</name>
      <anchorfile>dlhandler_8h.html</anchorfile>
      <anchor>af9c7d63a9061b381020bc7c0a3cbefd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dlhandler_unix.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>dlhandler__unix_8cpp</filename>
    <includes id="dlhandler_8h" name="dlhandler.h" local="no" imported="no">openbabel/dlhandler.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BUFF_SIZE</name>
      <anchorfile>dlhandler__unix_8cpp.html</anchorfile>
      <anchor>a6c7cd32e1bac137f05e4a752b4ad10af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1607444ae7cfbd6dcae449f9cb77b0e3</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matchFiles</name>
      <anchorfile>dlhandler__unix_8cpp.html</anchorfile>
      <anchor>a49757ecb4390f764ddd3af245302969a</anchor>
      <arglist>(SCANDIR_CONST struct dirent *entry_p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dlhandler_win32.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>dlhandler__win32_8cpp</filename>
    <includes id="dlhandler_8h" name="dlhandler.h" local="no" imported="no">openbabel/dlhandler.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VC_EXTRALEAN</name>
      <anchorfile>dlhandler__win32_8cpp.html</anchorfile>
      <anchor>a0172fbace36625330d5f0f163a1ddc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUFF_SIZE</name>
      <anchorfile>dlhandler__win32_8cpp.html</anchorfile>
      <anchor>a6c7cd32e1bac137f05e4a752b4ad10af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1607444ae7cfbd6dcae449f9cb77b0e3</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doxygen_pages.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>doxygen__pages_8cpp</filename>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>erf.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/math/</path>
    <filename>erf_8h</filename>
  </compound>
  <compound kind="file">
    <name>fingerprint.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>fingerprint_8cpp</filename>
    <includes id="fingerprint_8h" name="fingerprint.h" local="no" imported="no">openbabel/fingerprint.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>fingerprint.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>fingerprint_8h</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <class kind="class">OpenBabel::OBFingerprint</class>
    <class kind="struct">OpenBabel::OBFingerprint::bit_or</class>
    <class kind="struct">OpenBabel::FptIndexHeader</class>
    <class kind="struct">OpenBabel::FptIndex</class>
    <class kind="class">OpenBabel::FastSearch</class>
    <class kind="class">OpenBabel::FastSearchIndexer</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>forcefield.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>forcefield_8cpp</filename>
    <includes id="forcefield_8h" name="forcefield.h" local="no" imported="no">openbabel/forcefield.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="bond_8h" name="bond.h" local="no" imported="no">openbabel/bond.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="rotamer_8h" name="rotamer.h" local="no" imported="no">openbabel/rotamer.h</includes>
    <includes id="rotor_8h" name="rotor.h" local="no" imported="no">openbabel/rotor.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>Reweight</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a399f52de3bc4ed70a70547a39416dff4</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;rotorWeights, std::vector&lt; int &gt; rotorKey, double bonus)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>forcefield.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>forcefield_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <includes id="grid_8h" name="grid.h" local="no" imported="no">openbabel/grid.h</includes>
    <includes id="griddata_8h" name="griddata.h" local="no" imported="no">openbabel/griddata.h</includes>
    <class kind="struct">OpenBabel::LineSearchType</class>
    <class kind="class">OpenBabel::OBFFParameter</class>
    <class kind="class">OpenBabel::OBFFCalculation2</class>
    <class kind="class">OpenBabel::OBFFCalculation3</class>
    <class kind="class">OpenBabel::OBFFCalculation4</class>
    <class kind="class">OpenBabel::OBFFConstraint</class>
    <class kind="class">OpenBabel::OBFFConstraints</class>
    <class kind="class">OpenBabel::OBForceField</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_LOGLVL_NONE</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>ae0c831fc1fdad7188e79f0d94ffb0c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_LOGLVL_LOW</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>aaf7ca13d2b94e79693c47c10ea3c1def</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_LOGLVL_MEDIUM</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>aefda3ec45e427a38ac62a99a50cf93af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_LOGLVL_HIGH</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a09f7b02a472bb953e5b2e0641ba45e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_ENERGY</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a586a185b0aed9265f6812ed4338cd8bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_EBOND</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a326285b39a02acf24b5b73d340129086</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_EANGLE</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>af9110b0ba91b61dfb6d4a01263b22b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_ESTRBND</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a005da6f6cb4c5568b1c203cc702f5ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_ETORSION</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a0f54562816bbf69d6bf037a0adc8bb39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_EOOP</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a4b88f20fe0968d703e3c08d0b66bf056</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_EVDW</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>ae95a975f8a0274950f0f89b3f7bf9a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_EELECTROSTATIC</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a3dd361374bf490af6c1f35d60a05949e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_IGNORE</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a03569dcf56c412db6be9df64438ee5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_ATOM</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a13a0a0dd0787deeea38b9868a8c2146a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_ATOM_X</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a4e16c27a931fcb46dba17dc074bf51cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_ATOM_Y</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>abd1cd31afc9ddb108d4cb07911d3926d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_ATOM_Z</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a1399f6dcc2aec4237ded22e3c87e2d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_DISTANCE</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>ac27b2fddf951a53d68fc05c49fb98f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_ANGLE</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>afc7b8c9d75d67d0bdff47947f8e75512</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_TORSION</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a3d65dc3fe55820d8270c1215394a57be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_CONST_CHIRAL</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a5d6180c08a450f3b9278fb782c3aedba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_NUMERICAL_GRADIENT</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a76a7ae4b96bf74f5d6f690b908e57bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBFF_ANALYTICAL_GRADIENT</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>aa79097c99a0f44c20585623da1f5098e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KCAL_TO_KJ</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a26434409c375f3b38709afdcccec596c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF_OBFF_LOGLVL_LOW</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a62a639c8c4176b63a2697aff40f4338a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF_OBFF_LOGLVL_MEDIUM</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>a6f31cf89cddb30bac3d187474f8defed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF_OBFF_LOGLVL_HIGH</name>
      <anchorfile>forcefield_8h.html</anchorfile>
      <anchor>af9a87deee4328f76736a05bf6e6709ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>format.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>format_8cpp</filename>
    <includes id="format_8h" name="format.h" local="no" imported="no">openbabel/format.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>format.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>format_8h</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <class kind="class">OpenBabel::OBFormat</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NOTREADABLE</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>a5d766d529e097f852406cf0c434e54e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>READONEONLY</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>aec13538a29f6a7d630b3a59ccce0e03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>READBINARY</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>a95479d1fb64936c936077e47356bf6e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZEROATOMSOK</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>a0e12fffdb9815dc9bb44cb0635667146</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOTWRITABLE</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>a201c57b6b8e95558ead652e391d2e157</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WRITEONEONLY</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>ab95246c97f4ade91aee102631b6b8666</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WRITEBINARY</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>a655ed7589181707a2c6d18d7777cb1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>READXML</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>ac3cad6ca6aadd6aa9eccfc793e01b30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULTFORMAT</name>
      <anchorfile>format_8h.html</anchorfile>
      <anchor>a114620de287b71102355c29edc4b0115</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generic.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>generic_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">openbabel/generic.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="atomclass_8h" name="atomclass.h" local="no" imported="no">openbabel/atomclass.h</includes>
    <includes id="alias_8h" name="alias.h" local="no" imported="no">openbabel/alias.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>vector3</type>
      <name>transformedFractionalCoordinate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab30451b430cbfd12c3cc861985766628</anchor>
      <arglist>(vector3 originalCoordinate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generic.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>generic_8h</filename>
    <includes id="spacegroup_8h" name="spacegroup.h" local="no" imported="no">openbabel/math/spacegroup.h</includes>
    <includes id="obutil_8h" name="obutil.h" local="no" imported="no">openbabel/obutil.h</includes>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <class kind="class">OpenBabel::OBCommentData</class>
    <class kind="class">OpenBabel::OBExternalBond</class>
    <class kind="class">OpenBabel::OBExternalBondData</class>
    <class kind="class">OpenBabel::OBPairData</class>
    <class kind="class">OpenBabel::OBPairTemplate</class>
    <class kind="class">OpenBabel::OBSetData</class>
    <class kind="class">OpenBabel::OBVirtualBond</class>
    <class kind="class">OpenBabel::OBRingData</class>
    <class kind="class">OpenBabel::OBUnitCell</class>
    <class kind="class">OpenBabel::OBConformerData</class>
    <class kind="class">OpenBabel::OBSymmetryData</class>
    <class kind="class">OpenBabel::OBTorsion</class>
    <class kind="class">OpenBabel::OBTorsionData</class>
    <class kind="class">OpenBabel::OBAngle</class>
    <class kind="class">OpenBabel::OBAngleData</class>
    <class kind="class">OpenBabel::OBChiralData</class>
    <class kind="class">OpenBabel::OBSerialNums</class>
    <class kind="class">OpenBabel::OBVibrationData</class>
    <class kind="class">OpenBabel::OBDOSData</class>
    <class kind="class">OpenBabel::OBOrbital</class>
    <class kind="class">OpenBabel::OBOrbitalData</class>
    <class kind="class">OpenBabel::OBElectronicTransitionData</class>
    <class kind="class">OpenBabel::OBRotationData</class>
    <class kind="class">OpenBabel::OBVectorData</class>
    <class kind="class">OpenBabel::OBMatrixData</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>OBPairTemplate&lt; int &gt;</type>
      <name>OBPairInteger</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0bdf8334aad62a6bb7ad50f58060c9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBPairTemplate&lt; double &gt;</type>
      <name>OBPairFloatingPoint</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5ba6d4475315df1100427dc98074c087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>atomreftype</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>output</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>input</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>calcvolume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graphsym.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>graphsym_8cpp</filename>
    <includes id="graphsym_8h" name="graphsym.h" local="no" imported="no">openbabel/graphsym.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="cistrans_8h" name="cistrans.h" local="no" imported="no">openbabel/stereo/cistrans.h</includes>
    <includes id="tetrahedral_8h" name="tetrahedral.h" local="no" imported="no">openbabel/stereo/tetrahedral.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>print_vector</name>
      <anchorfile>graphsym_8cpp.html</anchorfile>
      <anchor>a6c29f70e05653a985d198b3fb67b02b1</anchor>
      <arglist>(const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_sym_classes</name>
      <anchorfile>graphsym_8cpp.html</anchorfile>
      <anchor>a74f115409a34be67333b0bc9aa3075a0</anchor>
      <arglist>(const std::string &amp;label, const std::vector&lt; std::pair&lt; OpenBabel::OBAtom *, unsigned int &gt; &gt; &amp;atom_sym_classes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompareUnsigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0876587a9edcb8d17a70923e424e3169</anchor>
      <arglist>(const unsigned int &amp;a, const unsigned int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComparePairFirst</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a669ac61cfe4be78e8624b31b39179a9c</anchor>
      <arglist>(const std::pair&lt; OBAtom *, unsigned int &gt; &amp;a, const std::pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComparePairSecond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a76bfba8476b7512138a477265edc4476</anchor>
      <arglist>(const std::pair&lt; OBAtom *, unsigned int &gt; &amp;a, const std::pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graphsym.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>graphsym_8h</filename>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <class kind="class">OpenBabel::OBGraphSym</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>grid.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>grid_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="grid_8h" name="grid.h" local="no" imported="no">openbabel/grid.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adfcd0e581453354d7c779541ec58c491</anchor>
      <arglist>(ostream &amp;os, const OBFloatGrid &amp;fg)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adc71eb19ad3b4c729264738f6d69d1d3</anchor>
      <arglist>(istream &amp;is, OBFloatGrid &amp;fg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>grid.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>grid_8h</filename>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="class">OpenBabel::OBGrid</class>
    <class kind="class">OpenBabel::OBFloatGrid</class>
    <class kind="class">OpenBabel::OBProxGrid</class>
    <class kind="class">OpenBabel::OBScoreGrid</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OBPolarGrid</name>
      <anchorfile>grid_8h.html</anchorfile>
      <anchor>a42518804e5759469eaa8ff61664c91b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBLipoGrid</name>
      <anchorfile>grid_8h.html</anchorfile>
      <anchor>aff71b2a63281edf45027696def551dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>score_t</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Undefined</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLP</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ChemScore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>griddata.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>griddata_8cpp</filename>
    <includes id="griddata_8h" name="griddata.h" local="no" imported="no">openbabel/griddata.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="grid_8h" name="grid.h" local="no" imported="no">openbabel/grid.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>griddata.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>griddata_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <class kind="class">OpenBabel::OBGridData</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>groupcontrib.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>groupcontrib_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="descriptor_8h" name="descriptor.h" local="no" imported="no">openbabel/descriptor.h</includes>
    <class kind="class">OpenBabel::OBGroupContrib</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OBDESC</name>
      <anchorfile>groupcontrib_8h.html</anchorfile>
      <anchor>a040701d52ed53f60eaeb431aa77adb6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>internalcoord.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>internalcoord_8h</filename>
    <class kind="class">OpenBabel::OBInternalCoord</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>isomorphism.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>isomorphism_8cpp</filename>
    <includes id="isomorphism_8h" name="isomorphism.h" local="no" imported="no">openbabel/isomorphism.h</includes>
    <includes id="query_8h" name="query.h" local="no" imported="no">openbabel/query.h</includes>
    <includes id="graphsym_8h" name="graphsym.h" local="no" imported="no">openbabel/graphsym.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG</name>
      <anchorfile>isomorphism_8cpp.html</anchorfile>
      <anchor>ad72dbcf6d0153db1b8d8a58001feed83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_vector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afc7ca70b08925b0a3950b67785d9f354</anchor>
      <arglist>(const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFerroceneBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>add2cdb4d7ec3918bac8fa18eb32d4d4c</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileAutomorphismQuery</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abfb2d29563ee1a81f2e70a51d55c83cf</anchor>
      <arglist>(OBMol *mol, const OBBitVec &amp;mask, const std::vector&lt; unsigned int &gt; &amp;symClasses)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6239f809ba8a88712a94f2a6bb90a485</anchor>
      <arglist>(OBMol *mol, Automorphisms &amp;maps, const OBBitVec &amp;mask, std::size_t maxMemory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4e9dbdc3dacbdf4b8ac6e48baba7bc35</anchor>
      <arglist>(OBMol *mol, Automorphisms &amp;maps, const std::vector&lt; unsigned int &gt; &amp;symClasses, const OBBitVec &amp;mask, std::size_t maxMemory)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>getFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a04fb8cae80f1866e2921853c509b07b4</anchor>
      <arglist>(OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds=std::vector&lt; OBBond * &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6a2b6b84fc5e4432152e29001877c59b</anchor>
      <arglist>(OBIsomorphismMapper::Functor &amp;functor, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>red</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8759fc55507d155f4eb9fa303cfecc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>green</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac12598cc2108fbc1e3ba8d1c3c92bb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>yellow</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acee835767e8d4be32f5ad94a2e90a45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>blue</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a19b2b376a1bda5b375eca394cff7f129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>normal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae70ea9d1800f7ec86a2db16c71c42e21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>isomorphism.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>isomorphism_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="class">OpenBabel::OBIsomorphismMapper</class>
    <class kind="class">OpenBabel::OBIsomorphismMapper::Functor</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>OBIsomorphismMapper::Mapping</type>
      <name>Automorphism</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9373f6c3f788157de6f03c9403be34c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBIsomorphismMapper::Mappings</type>
      <name>Automorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6179e6c11d4f797e8d0ef6ac5c9f25a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MapsTo</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga4edd651fb377c60f3b7ac2f48b7f5e57</anchor>
      <arglist>(const OBIsomorphismMapper::Mapping &amp;map, unsigned int queryIndex, unsigned int &amp;queriedIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga16841a730cf92c8e51a804ad8d746307</anchor>
      <arglist>(OBMol *mol, std::vector&lt; OBIsomorphismMapper::Mapping &gt; &amp;aut, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga7753422526ba34488edf393803aabad7</anchor>
      <arglist>(OBMol *mol, std::vector&lt; OBIsomorphismMapper::Mapping &gt; &amp;aut, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6a2b6b84fc5e4432152e29001877c59b</anchor>
      <arglist>(OBIsomorphismMapper::Functor &amp;functor, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kekulize.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>kekulize_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="ring_8h" name="ring.h" local="no" imported="no">openbabel/ring.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <includes id="graphsym_8h" name="graphsym.h" local="no" imported="no">openbabel/graphsym.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>ad72dbcf6d0153db1b8d8a58001feed83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_TIME</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a5320d4457a472d8888ec1905bc0e0a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_DEPTH</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a5db49eeef5c9bb774f02996f684df238</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNASSIGNED</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a7f2a734b84f750bb35708fd8f3d0121e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SINGLE</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>aae597f206a8cf88b5a0593f39044b937</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOUBLE</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a8747af38b86aa2bbcda2f1b1aa0888c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOT_IN_RINGS</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a4e255ac95eebc3646108368c9b37546c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOUBLE_ASSIGNED</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a774312b4b8c69831cdf734226146616d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOUBLE_ALLOWED</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a56355ba5602b88bd129ca59e54bc28fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOUBLE_PROHIBITED</name>
      <anchorfile>kekulize_8cpp.html</anchorfile>
      <anchor>a5fb1e2d33a402297814dcd0905e27d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expand_cycle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a31ce8b089ca36508940585406a2f93f1</anchor>
      <arglist>(OBMol *mol, OBAtom *atom, OBBitVec &amp;avisit, OBBitVec &amp;cvisit, const OBBitVec &amp;potAromBonds, int rootIdx, Timeout &amp;timeout, int prevAtomIdx, int depth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expandKekulize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62de79552e98ffdb88a9b8509a705158</anchor>
      <arglist>(OBMol *mol, int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, Timeout &amp;timeout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expand_kekulize_lssr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9645071cedc98dac304402a63e32d700</anchor>
      <arglist>(OBMol *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, std::vector&lt; OBRing * &gt; &amp;lssr, std::vector&lt; bool &gt; &amp;lssrAssigned, std::vector&lt; OBBond * &gt; &amp;bondsThisRing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count_assigned_bonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8a423a9a023698abe77ee30550619f54</anchor>
      <arglist>(std::vector&lt; OBBond * &gt; &amp;bondsThisRing, std::vector&lt; int &gt; &amp;bondState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPotentialAromaticAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7b44d43b56950aff23fbca88664ad996</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialAromaticBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7e62ffcac6073c5fb792d2f5bc62c522</anchor>
      <arglist>(OBMol *mol, OBBitVec &amp;bonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_bonds_of_ring</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adbf96b6f2307d00a5f525ecc3a4c5bca</anchor>
      <arglist>(OBMol *mol, OBRing *ring, std::vector&lt; OBBond * &gt; &amp;ring_bonds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_leftover_electrons</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a67f559671aa9d68ce3888baab8f7fc1a</anchor>
      <arglist>(OBMol *mol, std::vector&lt; int &gt; &amp;atomState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_leftover_electrons</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a07faa5acbed4a3cbbfd0d711321c0439</anchor>
      <arglist>(OBMol *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kinetics.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>kinetics_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">openbabel/generic.h</includes>
    <class kind="class">OpenBabel::OBRateData</class>
    <class kind="class">OpenBabel::OBNasaThermoData</class>
    <namespace>OpenBabel</namespace>
    <member kind="variable">
      <type>const unsigned</type>
      <name>RateData</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a94007d911a76e1404494fd9b1785f22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>ThermoData</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4c2b0b854dea9451bf30f7b37353c877</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lineend.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>lineend_8h</filename>
    <class kind="class">OpenBabel::FilteringInputStreambuf</class>
    <class kind="class">OpenBabel::LineEndingExtractor</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>locale.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>locale_8cpp</filename>
    <includes id="locale_8h" name="locale.h" local="no" imported="no">openbabel/locale.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>locale.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>locale_8h</filename>
    <class kind="class">OpenBabel::OBLocale</class>
    <namespace>OpenBabel</namespace>
    <member kind="variable">
      <type>OBLocale</type>
      <name>obLocale</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9a30f985504c4a70fd08aa72c0cd16a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>matrix_8cpp</filename>
    <includes id="matrix_8h" name="matrix.h" local="no" imported="no">openbabel/matrix.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>print_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab5741f7ec581130f899f17f4d9477aea</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab323a3745c477d9eb4c796786db39075</anchor>
      <arglist>(double *m, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac09eff5e59b6a7dd424dc71f4a37e464</anchor>
      <arglist>(double **m, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3b2b9be34ace132aa9506d9ee043824f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a067494738d0f55b9df745866cdc3fe56</anchor>
      <arglist>(double *c, double *a, double *b, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37830c949ab96aad9b5041a82895ba8e</anchor>
      <arglist>(double **c, double **a, double **b, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e5ee2fd1515457cb4a6e9394a5a14ff</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m, double &amp;det)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afb96cdaafd5073c2e806d36ec4e7eef4</anchor>
      <arglist>(double *m, double &amp;det, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afa4aad5bde182eebe57cedcf1727b2fc</anchor>
      <arglist>(double **m, double &amp;det, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8580b3fa2a0435b2d073c22097d1d35e</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab06c9b9e02affa91406755a0b9fb28e1</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b2a8069e01dd4287fb85f90a991972c</anchor>
      <arglist>(double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a050184ff6264447d6923e1be4df061b3</anchor>
      <arglist>(double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acbf2348ce7eae39aca355a630f06484c</anchor>
      <arglist>(double *src, double **dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8a3508df81e444f875d5f493a1bcbe28</anchor>
      <arglist>(double **src, double *dst, int rows, int cols)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>matrix_8h</filename>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>print_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab5741f7ec581130f899f17f4d9477aea</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab323a3745c477d9eb4c796786db39075</anchor>
      <arglist>(double *m, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac09eff5e59b6a7dd424dc71f4a37e464</anchor>
      <arglist>(double **m, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3b2b9be34ace132aa9506d9ee043824f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a067494738d0f55b9df745866cdc3fe56</anchor>
      <arglist>(double *c, double *a, double *b, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37830c949ab96aad9b5041a82895ba8e</anchor>
      <arglist>(double **c, double **a, double **b, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e5ee2fd1515457cb4a6e9394a5a14ff</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m, double &amp;det)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afb96cdaafd5073c2e806d36ec4e7eef4</anchor>
      <arglist>(double *m, double &amp;det, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afa4aad5bde182eebe57cedcf1727b2fc</anchor>
      <arglist>(double **m, double &amp;det, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8580b3fa2a0435b2d073c22097d1d35e</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab06c9b9e02affa91406755a0b9fb28e1</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b2a8069e01dd4287fb85f90a991972c</anchor>
      <arglist>(double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a050184ff6264447d6923e1be4df061b3</anchor>
      <arglist>(double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8a3508df81e444f875d5f493a1bcbe28</anchor>
      <arglist>(double **src, double *dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acbf2348ce7eae39aca355a630f06484c</anchor>
      <arglist>(double *src, double **dst, int rows, int cols)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix3x3.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/math/</path>
    <filename>matrix3x3_8cpp</filename>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="obutil_8h" name="obutil.h" local="no" imported="no">openbabel/obutil.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2ed22257c15dc44557c1c275c99d127d</anchor>
      <arglist>(const matrix3x3 &amp;m, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a41d8538809cb689100fa8a0807510128</anchor>
      <arglist>(const matrix3x3 &amp;A, const matrix3x3 &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>SQUARE</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a30703c4e70c6142f64ceb67f1888b6e2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a590374f29c633247d07b75e43ae89f9d</anchor>
      <arglist>(ostream &amp;co, const matrix3x3 &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix3x3.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/math/</path>
    <filename>matrix3x3_8h</filename>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <class kind="class">OpenBabel::matrix3x3</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RAD_TO_DEG</name>
      <anchorfile>matrix3x3_8h.html</anchorfile>
      <anchor>a89e47af0449640d4f15191aba5ca24c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEG_TO_RAD</name>
      <anchorfile>matrix3x3_8h.html</anchorfile>
      <anchor>a212460e743fecb084d717bb2180c5a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>center_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af1a9769dcdfc9bb77a3747a3c89c3d03</anchor>
      <arglist>(double *, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mcdlutil.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>mcdlutil_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="mcdlutil_8h" name="mcdlutil.h" local="no" imported="no">openbabel/mcdlutil.h</includes>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <includes id="cistrans_8h" name="cistrans.h" local="no" imported="no">openbabel/stereo/cistrans.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CONNMAX</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a4bfa89565b1dbd7abbdc5bb80f2177f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NATOMSMAX</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a2eb2802292e057fb58bf2b9ae0500b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NBONDSMAX</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a119065d097ec15b8fcfb939f2b69f10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PI</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a598a3330b3c21701223ee0ca14316eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>blDenominator</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>ae0208b3534f6cbbfb946a4dd1151250f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>nRotBondsMax</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a8f1cd8ea16d288d7622a75073aa53e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEXACTATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a7ffe7fc7e736af081960c465f69ef483</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NALKALYATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a48e4435fb9f690b15622b29bc8dedd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NALKALYEARTHATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a872205065d27bc64f10fb497c818c8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTRIVALENTATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a58a7e37667a2f3a678d1e59b2a2111f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTITANATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a5508a6cb46c0b6cc2ea64303849fd4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NVANADIUMATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a82fbde161179ca7f0617c5fefd2a071c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NCHROMIUMATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>aa67c30859a368ea1defae5565b50f3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NMANGANESEATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a501e6d1bd9f7873d1bb72f2a71cc15ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NLIKEFEATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a36acc5511debbea03e32f1ae03a17b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NPLATINUMATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>ac786f1cc241f058986478cfb37f50b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NCOPPERATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a451ca54d622a1cc0d32fdc103ff77338</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NZINKATOMS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>ac8284cff038b3455ed115bcf74bb0122</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NMETALS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>ad07d3b873121463218a991d53512e49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NHALOGENS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a02988c313a14255f7b3de2da2829297d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NHETERO</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>aa2ef2f0ee4eac39c772a2a7c1206a48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NAROMMAX</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>af66f1fab611680bd48537fb317d9c225</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NLIGHT_METALS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a557a6e4a20d0daa8b65d48d2ef425c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NHEAVY_METALS</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a655e49a57b3dae59dbe998a069ff04a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEUTERIUM_ATOM</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a8b3d4db7c130a342045f2529b4f5d5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>METALL_ATOM</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a9545e8af5de2650eb197450c43f6fceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HALOGEN_ATOM</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>aa27e296081ce3729a60e9730ecc0cc0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANY_ATOM</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a30c46dd936dc612116b4e53443b81e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HETERO_ATOM</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>aee2b0b6b8f5adcce54aacc558c652e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANY_BOND</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>ad8b24003149e30d3018a77e30cfcb52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RUNDEF</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>a34c3054ec30f4d569fdd613cb737b858</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULTBONDLENGTH</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>aa236fb6ac2ea594837ec15b824121ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NDATABASE_MOLECULES</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>aa063d5a8bb171f7d93a12d6b76170b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NBONDTYPES</name>
      <anchorfile>mcdlutil_8cpp.html</anchorfile>
      <anchor>ac4b0fa8174febff48a34ee9992350051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct OpenBabel::adjustedlist</type>
      <name>adjustedlist</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a84aaa93d3e94f64164e85131f205e919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adjustedlist</type>
      <name>neigbourlist</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5f08cae8b4d627c8932dbfa639ce9205</anchor>
      <arglist>[NATOMSMAX]</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreDoubleBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa57c0c18ebfc17ba6f962725101ab5b3</anchor>
      <arglist>(TEditedMolecule &amp;sm, bool putEither)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>intToStr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae4c78efdf4d582451d8d0c323d98f205</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xDistPoint</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5eeac49565ab1fdcb863f31f41ec2f5f</anchor>
      <arglist>(double x1, double y1, double x2, double y2, double x0, double y0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlapped</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acb3b0f424f25beb57a312c1a679f3b0c</anchor>
      <arglist>(double x1A, double y1A, double x2A, double y2A, double x1B, double y1B, double x2B, double y2B, double delta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAtoms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac6d5144b33c27a6dce66dff86c4ebdde</anchor>
      <arglist>(int a1, int a2, const std::vector&lt; std::vector&lt; int &gt; * &gt; aeqList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>incrementValues</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1c632244490414023578336c8528c613</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;currentValues, const std::vector&lt; int &gt; maxValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteIntElement</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95f6327fcb8303f8d4fbb309a20e3f2b</anchor>
      <arglist>(std::vector&lt; int &gt; *source, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hydrogenValency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47053116206f7c8cf7b278aec7e35cb1</anchor>
      <arglist>(int na)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxValency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa51b217d32346d4f341a227be63de160</anchor>
      <arglist>(int na)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>findAlternateSinglets</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a24ad6fc920fa2699d472547ec4d1721a</anchor>
      <arglist>(const std::vector&lt; int &gt;iA1, const std::vector&lt; int &gt;iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeAssignment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a78600823bb7358bc592f05fa5039936d</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; bondAssignment, const std::vector&lt; int &gt; specialFlag, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds, int &amp;nAss)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>analyzeOK</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aaf79bb3ded26c6df1bcb8008c76afac6</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; maxValency, const std::vector&lt; int &gt; bondOrder, const std::vector&lt; int &gt; atomCheckFlag, int nAtoms, int nBonds, int &amp;nGtMax, int &amp;nNEH, int &amp;nOddEven, bool testExceedHydrogen, bool oddEvenCheck)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>incrementAssignment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b40d2265cd8cf97dc199e8059d13ff0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;bondAssignment, int nAss)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>determineBondsOrder</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aef260e06b0c46b10fe3be453e1362ee5</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; maxValency, std::vector&lt; int &gt; &amp;bondOrder, std::vector&lt; int &gt; &amp;hydrogenValency, int nAtoms, int nBonds, bool oddEvenViolate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a207029ffc607d34863546dddbe014d6b</anchor>
      <arglist>(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; nHydr, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; int &gt; &amp;bondOrders, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a656a12d74df6452be30fd76d3860bca6</anchor>
      <arglist>(OBMol *pmol, const std::vector&lt; int &gt; nH, std::vector&lt; int &gt; &amp;bondOrders)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ptInRect</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab8184977f057db3afea953ff0d97355d</anchor>
      <arglist>(const Rect r, const Point p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a742566d425db558fa968c725f8a708cc</anchor>
      <arglist>(OBMol *pmol, std::ostream &amp;ofs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec2830d51995ac9802efa4aad43121ca</anchor>
      <arglist>(OBMol *pmol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a827934a434ef208e2644aecb679ec930</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSearch</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a60aab5dcc934001076e5079960cb9be4</anchor>
      <arglist>(OBMol *query, OBMol *structure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSearch</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa0561905f67fffeb3fae74b786fab642</anchor>
      <arglist>(const std::vector&lt; int &gt; aPositionQuery, const std::vector&lt; int &gt; iA1Query, const std::vector&lt; int &gt; iA2Query, const std::vector&lt; int &gt; bondTypesQuery, const std::vector&lt; int &gt; aPositionStructure, const std::vector&lt; int &gt; iA1Structure, const std::vector&lt; int &gt; iA2Structure, const std::vector&lt; int &gt; bondTypesStructure, int nAtomsQuery, int nBondsQuery, int nAtomsStructure, int nBondsStructure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>equivalenceList</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e78d25ada5c11fba4e216e1d782e5b7</anchor>
      <arglist>(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; bondTypes, std::vector&lt; int &gt; &amp;eqList, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>equivalenceList</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a16e9982dc3b96f14397fe55ede7b8f1f</anchor>
      <arglist>(OBMol *pmol, std::vector&lt; int &gt; &amp;eqList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adaa889d3747ea9e2ba1a83207556dce3</anchor>
      <arglist>(OBMol *molecule, OBMol *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStereoLists</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abce282c45ee77ea965aaacd47b4e8d72</anchor>
      <arglist>(OBMol *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareStringsNumbers</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af3acf0818f209ed2426163c90b6d1440</anchor>
      <arglist>(string s1, string s2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomSymbol</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0c4710d7911172f59b1f9caf9192d2d6</anchor>
      <arglist>(TSimpleMolecule &amp;sm, int atAtom, int atEx, int priority, string ndData)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomSymbol</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a49950c5bac5703c9a3c7efea3d4a41f4</anchor>
      <arglist>(TSimpleMolecule &amp;sm, int atAtom)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa5a5e94e5040b9aa439f4f658f0741d4</anchor>
      <arglist>(const string instring, const string substring, int fromPos=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeZeroeth</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac2c0520f21b12e9bfae93e4e425e26c9</anchor>
      <arglist>(std::string instring)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>analizeParity</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a79d8fe626950346aaaeabec7cfdce123</anchor>
      <arglist>(string data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>analizeParityBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac6b2a0b35248f073b86a96fbef99f461</anchor>
      <arglist>(string data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>changeParity</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a53b6e688d17496385f69834ed1014dc8</anchor>
      <arglist>(std::string data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>changeParityBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af2ed9f300b95cff9ffc0fbc34cacc578</anchor>
      <arglist>(std::string data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e765f8943f7aa7b50aca9380196e96</anchor>
      <arglist>(OBMol *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sproduct</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1da27ac0556550ed29812976e41e97b9</anchor>
      <arglist>(TSimpleMolecule &amp;sm, int br, int i1, int i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bondEquivalent</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aee1209411864c8c11729145e25e4bd2c</anchor>
      <arglist>(int bn1, int bn2, const std::vector&lt; int &gt; eqList, TSimpleMolecule &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBondMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acd680ed8783717254f074205cd6b24a4</anchor>
      <arglist>(OBMol *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[MAXBONDS][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>addZeroeth</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae55766527e16c454a28332c2b9f51bab</anchor>
      <arglist>(std::string instring, std::string stringAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpDownBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8499ac47df50a86298d88a5079a544f6</anchor>
      <arglist>(int atomNo, int parity, TSimpleMolecule &amp;sm, std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementAtomStereo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3c50491b940d1a3d368bf7eba3bebfa1</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementBondStereo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a417a2925a2ec60c86ff3edc04ce4142c</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groupRedraw</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a23997cd29f45df86f90e4f7de02baccd</anchor>
      <arglist>(OBMol *pmol, int bondN, int atomN, bool atomNInGroup)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFormula</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6a41a690c691e47bc63facef0e2e449d</anchor>
      <arglist>(const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>canonizeMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a82011594cefb0a924a4cc938800de614</anchor>
      <arglist>(const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareTest</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aaa14c59df78025ce6e8dfd3f27feb106</anchor>
      <arglist>(OBMol *pmol, std::ostream &amp;ofs)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>hVal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a007ca25767fb63a9b52010d40c8888df</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>maxVal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6eb8f9135e86a8fd55d2293c4fe7b811</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>chargeVal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0d7409371f9cf6d7f50a3fda440d871a</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>aSymb</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a010272f11ab71479f636c0327b5843a8</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>exactAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1b7de377338f7ac7700315efbba80ae2</anchor>
      <arglist>[NEXACTATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>alkaly</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e4dd9241c1923f5a16e445d29e040e2</anchor>
      <arglist>[NALKALYATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>alkalyEarth</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a67d14372d5486c87fba4d1347e98677c</anchor>
      <arglist>[NALKALYEARTHATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>trivalent</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37351982a79ec5e7505f20f8d706dd0f</anchor>
      <arglist>[NTRIVALENTATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>titan</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c1f49db7daefd6995a8bd194e3ac0ef</anchor>
      <arglist>[NTITANATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>vanadium</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac5ecc60b7d1b91afa310c0c6379b909c</anchor>
      <arglist>[NVANADIUMATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>cromium</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a18359deca081005601d5e234fee87a5f</anchor>
      <arglist>[NCHROMIUMATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>manganeze</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b27e665d816bd4edca018692a03ee1e</anchor>
      <arglist>[NMANGANESEATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>likeFe</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e38b8674bb78cdd93818c4f569d3317</anchor>
      <arglist>[NLIKEFEATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>platinum</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab280567064a5940906303e0f95b673d3</anchor>
      <arglist>[NPLATINUMATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>copper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af395a23311a093c6c9ba174c91bb00fe</anchor>
      <arglist>[NCOPPERATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>zink</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a790d50110edd641cf164ef702acd67c2</anchor>
      <arglist>[NZINKATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>possibleAromatic</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32e0599f9cf6f751a89279c86f703e47</anchor>
      <arglist>[NAROMMAX]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>metals</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a174dbce034c042d7961ad4b02dd4f344</anchor>
      <arglist>[NMETALS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>lightMetals</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa6724f0a1ae8f22fa59505cb00498565</anchor>
      <arglist>[NLIGHT_METALS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>heavyMetals</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1dddb327de910ca9d524dc76a68090a3</anchor>
      <arglist>[NHEAVY_METALS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>halogens</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acb826f58b78c49d8732fb29a0b325f9e</anchor>
      <arglist>[NHALOGENS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>hetero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec7f886140fb13e79a6823f3bf78b5cf</anchor>
      <arglist>[NHETERO]</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>strData</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac1e24d8c0684f30e0835a9ca5cf6d1b9</anchor>
      <arglist>[NDATABASE_MOLECULES]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bondValence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4e78cb542837e6c77dcd5da5765833f</anchor>
      <arglist>[NBONDTYPES]</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>fsastart</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8fc4e404ce6dc298048b5bdf5deb3124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>fsbstart</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5d29a62c474c707d84973a8ecb1f62a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mcdlutil.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>mcdlutil_8h</filename>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NELEMMCDL</name>
      <anchorfile>mcdlutil_8h.html</anchorfile>
      <anchor>a02160f654223d43c521ab445b7eb7b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hydrogenValency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47053116206f7c8cf7b278aec7e35cb1</anchor>
      <arglist>(int na)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxValency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa51b217d32346d4f341a227be63de160</anchor>
      <arglist>(int na)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a54363eb76ba264ec754bece9848198c8</anchor>
      <arglist>(OBMol *pmol, const int nH[], int bondOrders[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a207029ffc607d34863546dddbe014d6b</anchor>
      <arglist>(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; nHydr, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; int &gt; &amp;bondOrders, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec2830d51995ac9802efa4aad43121ca</anchor>
      <arglist>(OBMol *pmol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a827934a434ef208e2644aecb679ec930</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a742566d425db558fa968c725f8a708cc</anchor>
      <arglist>(OBMol *pmol, std::ostream &amp;ofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSearch</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a60aab5dcc934001076e5079960cb9be4</anchor>
      <arglist>(OBMol *query, OBMol *structure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSearch</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa0561905f67fffeb3fae74b786fab642</anchor>
      <arglist>(const std::vector&lt; int &gt; aPositionQuery, const std::vector&lt; int &gt; iA1Query, const std::vector&lt; int &gt; iA2Query, const std::vector&lt; int &gt; bondTypesQuery, const std::vector&lt; int &gt; aPositionStructure, const std::vector&lt; int &gt; iA1Structure, const std::vector&lt; int &gt; iA2Structure, const std::vector&lt; int &gt; bondTypesStructure, int nAtomsQuery, int nBondsQuery, int nAtomsStructure, int nBondsStructure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>equivalenceList</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a16e9982dc3b96f14397fe55ede7b8f1f</anchor>
      <arglist>(OBMol *pmol, std::vector&lt; int &gt; &amp;eqList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>equivalenceList</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e78d25ada5c11fba4e216e1d782e5b7</anchor>
      <arglist>(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; bondTypes, std::vector&lt; int &gt; &amp;eqList, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adaa889d3747ea9e2ba1a83207556dce3</anchor>
      <arglist>(OBMol *molecule, OBMol *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStereoLists</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abce282c45ee77ea965aaacd47b4e8d72</anchor>
      <arglist>(OBMol *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e765f8943f7aa7b50aca9380196e96</anchor>
      <arglist>(OBMol *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBondMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acd680ed8783717254f074205cd6b24a4</anchor>
      <arglist>(OBMol *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[MAXBONDS][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementAtomStereo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3c50491b940d1a3d368bf7eba3bebfa1</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementBondStereo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a417a2925a2ec60c86ff3edc04ce4142c</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groupRedraw</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a23997cd29f45df86f90e4f7de02baccd</anchor>
      <arglist>(OBMol *pmol, int bondN, int atomN, bool atomNInGroup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>canonizeMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a82011594cefb0a924a4cc938800de614</anchor>
      <arglist>(const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFormula</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6a41a690c691e47bc63facef0e2e449d</anchor>
      <arglist>(const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareTest</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aaa14c59df78025ce6e8dfd3f27feb106</anchor>
      <arglist>(OBMol *pmol, std::ostream &amp;ofs)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXBONDS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a82ccfbdf4943a4e74a708edafcced9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXFRAGS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a22febe826ea2f93f69725fbef532c921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXCHARS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab91841d785674a38b34fcf2fd9685142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAX_DEPTH</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad087045047b2155479ef662be1be3abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NELEMMAX</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad1eec14ce20cfaf366e19721f1f27090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>modules.h</name>
    <path>/Users/ghutchis/Devel/openbabel/doc/</path>
    <filename>modules_8h</filename>
  </compound>
  <compound kind="file">
    <name>mol.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>mol_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="rotamer_8h" name="rotamer.h" local="no" imported="no">openbabel/rotamer.h</includes>
    <includes id="phmodel_8h" name="phmodel.h" local="no" imported="no">openbabel/phmodel.h</includes>
    <includes id="bondtyper_8h" name="bondtyper.h" local="no" imported="no">openbabel/bondtyper.h</includes>
    <includes id="builder_8h" name="builder.h" local="no" imported="no">openbabel/builder.h</includes>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="tetrahedral_8h" name="tetrahedral.h" local="no" imported="no">openbabel/stereo/tetrahedral.h</includes>
    <includes id="cistrans_8h" name="cistrans.h" local="no" imported="no">openbabel/stereo/cistrans.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OBAtomIncrement</name>
      <anchorfile>mol_8cpp.html</anchorfile>
      <anchor>ad353d37ce07e791b484c5019e1e2af98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBBondIncrement</name>
      <anchorfile>mol_8cpp.html</anchorfile>
      <anchor>a1b42f3ef1e524ab033a6ab0798fe308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBAtomIncrement</name>
      <anchorfile>mol_8cpp.html</anchorfile>
      <anchor>ad353d37ce07e791b484c5019e1e2af98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBBondIncrement</name>
      <anchorfile>mol_8cpp.html</anchorfile>
      <anchor>a1b42f3ef1e524ab033a6ab0798fe308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SortVVInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a74797fbdbf190ac9522db1f2d582581b</anchor>
      <arglist>(const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SortAtomZ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac44ee11ab4413a4b1cb20b5bd24f183f</anchor>
      <arglist>(const pair&lt; OBAtom *, double &gt; &amp;a, const pair&lt; OBAtom *, double &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>OBComparePairSecond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4da122a7830becd4fa38b8792671cdd</anchor>
      <arglist>(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>OBComparePairFirst</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a83d991b1e233b11b794e4ab3f87b52cc</anchor>
      <arglist>(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ClassCount</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abe5da6d31a3fcc23a2efd77085c8c2d4</anchor>
      <arglist>(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CreateNewClassVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8f302cc167630d63e3ca5a4c4d86e41b</anchor>
      <arglist>(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ValenceSum</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8e455dc2d94f2394a21dd76db3af8325</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>KekulePropagate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8d72e30a8da1c39c9906a27ef62dd5f6</anchor>
      <arglist>(OBAtom *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCurrentValence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad87b019400c810f14603c6532435030b</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandKekule</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5d65e3449d4d6a0a7a35ea4e13039f16</anchor>
      <arglist>(OBMol &amp;mol, vector&lt; OBAtom * &gt; &amp;va, vector&lt; OBAtom * &gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CorrectBadResonanceForm</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a13eb26f56a8a475622fba5fc01d4d50e</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTitles</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7654363e339f0fe07323c9f7e542d4db</anchor>
      <arglist>(ostream &amp;ofs, OBMol &amp;mol)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SwabInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0afcf921bfdabceef6c6cf00836ae203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mol.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>mol_8h</filename>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="bond_8h" name="bond.h" local="no" imported="no">openbabel/bond.h</includes>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <includes id="chains_8h" name="chains.h" local="no" imported="no">openbabel/chains.h</includes>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">openbabel/bitvec.h</includes>
    <includes id="residue_8h" name="residue.h" local="no" imported="no">openbabel/residue.h</includes>
    <includes id="ring_8h" name="ring.h" local="no" imported="no">openbabel/ring.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">openbabel/generic.h</includes>
    <includes id="typer_8h" name="typer.h" local="no" imported="no">openbabel/typer.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <includes id="internalcoord_8h" name="internalcoord.h" local="no" imported="no">openbabel/internalcoord.h</includes>
    <class kind="class">OpenBabel::OBMol</class>
    <class kind="struct">OpenBabel::detail::max_value</class>
    <class kind="struct">OpenBabel::detail::max_value&lt; T, 0 &gt;</class>
    <namespace>OpenBabel</namespace>
    <namespace>OpenBabel::detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_SSSR_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a1ab7f39b595f0f69b77c5907c804afc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_RINGFLAGS_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ae9ad3600741ed030f463badacb48cbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_AROMATIC_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a00796165b0d091f4b0987ee2a0ba5609</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_ATOMTYPES_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>abf2d91f3d8e6d4db13029a0130a262a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CHIRALITY_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>abdf1bef91d791e4ec64071377a06e491</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_PCHARGE_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>aade7aaf66074d41ccc89a88fde187ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_HYBRID_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a2609984a86f8eaca60bd0995ab1ff082</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_IMPVAL_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a220b0e4aac833823ef37f6d10ac7a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_KEKULE_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>adb1c838e0460bae3347db0d94b4e63c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CLOSURE_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>aa9b307d4356f47b80ba6516405bea32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_H_ADDED_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a488eaf115c8c8e3f8ac24384f80f6f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_PH_CORRECTED_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>af3ca96a4c05940f8ed8fdc159b93656a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_AROM_CORRECTED_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ad34e5e48a2b7f4c149070647189d9d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CHAINS_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a5aaff7bcb11a37508fe32d17ad57dea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_TCHARGE_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a3168124e0bc8b31e2d4392f1da02fbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_TSPIN_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a8ae8b8d431ee5649e4dad8bbdfd5092d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_RINGTYPES_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>aaba06b0d4348eedb3f32f764d4c9b9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_PATTERN_STRUCTURE</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ad224f71d6aecaa29f7cb32ec475b8d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_LSSR_MOL</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ae62d8140a1f27fe185152e8ca29f2255</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_CURRENT_CONFORMER</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ae7cd3ed4ac08cc188ed556c26ff26abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUFF_SIZE</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>a6c7cd32e1bac137f05e4a752b4ad10af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EQ</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ac07acfbb082b04f5bea72998c8976b3c</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EQn</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>aff7047a291906910f63dcfc17c88ed12</anchor>
      <arglist>(a, b, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SQUARE</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>aa1cf70a99e21bc2032e8867c6cafbb43</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IsUnsatType</name>
      <anchorfile>mol_8h.html</anchorfile>
      <anchor>ae7364e14af885f05220a63486ca6d516</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32ba50e0b43cb1dfdf1978d1e72099c5</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac9aac27fe3b12d7201f8eb7cb95a3c57</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CartesianToInternal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7145217d4de73e243d2d3888dac404ba</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InternalToCartesian</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae82e7b7b74e5212eada681c15afb77f4</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NewExtension</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac1c62bdae6cf7a9195c470e7d0e29883</anchor>
      <arglist>(string &amp;src, char *ext)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_rmat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8aa7959b427e1c630f14732c2ad642c8</anchor>
      <arglist>(double *, double *, double *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ob_make_rmat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7e02cd2874a2a4826c8587da507f62ef</anchor>
      <arglist>(double mat[3][3], double rmat[9])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qtrfit</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a594933a93529376dbae80405cf23afa8</anchor>
      <arglist>(double *r, double *f, int size, double u[3][3])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>superimpose</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c5374c2c0b42dee2fd36cd475a3cb1c</anchor>
      <arglist>(double *, double *, int)</arglist>
    </member>
    <member kind="variable">
      <type>OBElementTable</type>
      <name>etab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e53ca6bf87ac2f6447c9ef2332c9418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBTypeTable</type>
      <name>ttab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab8d4d5690031703bcccb95ddbe7ebf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBIsotopeTable</type>
      <name>isotab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a35082995377e56142ee5a9fd351c7a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAromaticTyper</type>
      <name>aromtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a36c0ee580e088fa888f7d96c16e969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtomTyper</type>
      <name>atomtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a717e026b570e71d0e648d851d34b6482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBChainsParser</type>
      <name>chainsparser</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab81925dbd111f3bf1733a4cbba547131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBMessageHandler</type>
      <name>obErrorLog</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a394eef44b3dd6a9174067715712c2d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBResidueData</type>
      <name>resdat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a30154f62f3bd1a1b8613a080444e69d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned long</type>
      <name>NoId</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a99dab86ea7c23d635f350a07644c16a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>molchrg.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>molchrg_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="molchrg_8h" name="molchrg.h" local="no" imported="no">openbabel/molchrg.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>molchrg.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>molchrg_8h</filename>
    <class kind="class">OpenBabel::GasteigerState</class>
    <class kind="class">OpenBabel::OBGastChrg</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_GASTEIGER_DENOM</name>
      <anchorfile>molchrg_8h.html</anchorfile>
      <anchor>ad4301eec58fa6ea8ce40afef7f75d142</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_GASTEIGER_DAMP</name>
      <anchorfile>molchrg_8h.html</anchorfile>
      <anchor>ac4d6e8c6938e13683c2ec5426bc413c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_GASTEIGER_ITERS</name>
      <anchorfile>molchrg_8h.html</anchorfile>
      <anchor>a6c8bae97c124cfd03703fd867e957402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>obconversion.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>obconversion_8cpp</filename>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <includes id="locale_8h" name="locale.h" local="no" imported="no">openbabel/locale.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BUFF_SIZE</name>
      <anchorfile>obconversion_8cpp.html</anchorfile>
      <anchor>a6c7cd32e1bac137f05e4a752b4ad10af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALL_READS_BINARY</name>
      <anchorfile>obconversion_8cpp.html</anchorfile>
      <anchor>af32bd6637dbd2a625b6642c84df7518a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strncasecmp</name>
      <anchorfile>obconversion_8cpp.html</anchorfile>
      <anchor>a674b7f779fec84cb1a3be8222b5c381a</anchor>
      <arglist>(const char *s1, const char *s2, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>obconversion.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>obconversion_8h</filename>
    <includes id="dlhandler_8h" name="dlhandler.h" local="no" imported="no">openbabel/dlhandler.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <includes id="format_8h" name="format.h" local="no" imported="no">openbabel/format.h</includes>
    <includes id="lineend_8h" name="lineend.h" local="no" imported="no">openbabel/lineend.h</includes>
    <class kind="class">OpenBabel::OBConversion</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>OBPlugin::PluginIterator</type>
      <name>Formatpos</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8f32238b69be1e83980d0ff3a90b206f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oberror.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>oberror_8cpp</filename>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>oberror.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>oberror_8h</filename>
    <class kind="class">OpenBabel::OBError</class>
    <class kind="class">OpenBabel::OBMessageHandler</class>
    <class kind="class">OpenBabel::obLogBuf</class>
    <namespace>OpenBabel</namespace>
    <member kind="enumeration">
      <name>obMessageLevel</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obWarning</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obInfo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obAuditMsg</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obDebug</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>errorQualifier</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91e6912277f7537a670952698f7b2d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>always</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>onceOnly</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>obiter.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>obiter_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>obiter.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>obiter_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">openbabel/bitvec.h</includes>
    <class kind="class">OpenBabel::OBMolAtomIter</class>
    <class kind="class">OpenBabel::OBMolAtomDFSIter</class>
    <class kind="class">OpenBabel::OBMolAtomBFSIter</class>
    <class kind="class">OpenBabel::OBMolBondBFSIter</class>
    <class kind="class">OpenBabel::OBMolBondIter</class>
    <class kind="class">OpenBabel::OBAtomAtomIter</class>
    <class kind="class">OpenBabel::OBAtomBondIter</class>
    <class kind="class">OpenBabel::OBResidueIter</class>
    <class kind="class">OpenBabel::OBResidueAtomIter</class>
    <class kind="class">OpenBabel::OBMolAngleIter</class>
    <class kind="class">OpenBabel::OBMolTorsionIter</class>
    <class kind="class">OpenBabel::OBMolPairIter</class>
    <class kind="class">OpenBabel::OBMolRingIter</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FOR_ATOMS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>afb051cb17b46d381998c24fc41db2a79</anchor>
      <arglist>(a, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_BONDS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a16c0f68c4f2d476fae98338b31e77e46</anchor>
      <arglist>(b, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_NBORS_OF_ATOM</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a18326b3c74bff171f5807ce9725e0c47</anchor>
      <arglist>(a, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_BONDS_OF_ATOM</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>aa102b7f8200028ba654f022dc63fdf35</anchor>
      <arglist>(b, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_RESIDUES_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a483bbcfb9673a775c47ab6adf8e53451</anchor>
      <arglist>(r, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_ATOMS_OF_RESIDUE</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>aa4f83897733e3f3a1fb1ff9a1a85db1f</anchor>
      <arglist>(a, r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_DFS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a15820464f7b1f60c2d343932d5eda8cd</anchor>
      <arglist>(a, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_BFS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a7c427f32f67339fb215933423bace3e4</anchor>
      <arglist>(a, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_BONDBFS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a4cccdc28607ea86191978c1473f09a40</anchor>
      <arglist>(b, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_RINGS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a9205e106e30c7af1cafcca57d52c7692</anchor>
      <arglist>(r, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_ANGLES_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a1fc0ae63791285f6155fa53658c2e4ae</anchor>
      <arglist>(a, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_TORSIONS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>aee758b2fef3dcacb197e41b5819d7465</anchor>
      <arglist>(t, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR_PAIRS_OF_MOL</name>
      <anchorfile>obiter_8h.html</anchorfile>
      <anchor>a640062d330b1455694059113b560a4aa</anchor>
      <arglist>(p, m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>obmolecformat.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>obmolecformat_8cpp</filename>
    <includes id="obmolecformat_8h" name="obmolecformat.h" local="no" imported="no">openbabel/obmolecformat.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>obmolecformat.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>obmolecformat_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <includes id="descriptor_8h" name="descriptor.h" local="no" imported="no">openbabel/descriptor.h</includes>
    <class kind="class">OpenBabel::OBMoleculeFormat</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>obutil.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>obutil_8cpp</filename>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="obutil_8h" name="obutil.h" local="no" imported="no">openbabel/obutil.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ApproxZero</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>ac828a3398afe2f40480d859adb43f770</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IsZero</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>af240ff757229758aec4293869448a8b2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PI</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>a598a3330b3c21701223ee0ca14316eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OneThird</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>a7b13e08f2fdd290b9cf14c5afea46ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FourThirdsPI</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>a6f8a854eec470496f7b7d5d2b7ca12e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TwoThirdsPI</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>a153fdba5922d561b3fdc4dab8f463c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SWEEPS</name>
      <anchorfile>obutil_8cpp.html</anchorfile>
      <anchor>a1febf1e760150a533a6ef4cac156331a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32ba50e0b43cb1dfdf1978d1e72099c5</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac9aac27fe3b12d7201f8eb7cb95a3c57</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OBCompareInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4216f2e0672bf6a9ee72d3029838a213</anchor>
      <arglist>(const int &amp;a, const int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OBCompareUnsigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abb48ec7a1b3301248a1147cf2dbbe600</anchor>
      <arglist>(const unsigned int &amp;a, const unsigned int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNear</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a362770307f86a3b9acd494d9ccbbcf51</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNearZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e51098e105d63b04b5517299d1b772</anchor>
      <arglist>(const double &amp;a, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNan</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a227ab5b29e8122dd6d8ac76d2b58778a</anchor>
      <arglist>(const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanBeSquared</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95b1c21368d148cb45ac6f604984c357</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NewExtension</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac1c62bdae6cf7a9195c470e7d0e29883</anchor>
      <arglist>(string &amp;src, char *ext)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>center_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aabfd0c1c9630002b16c782ad7d39790f</anchor>
      <arglist>(double *c, unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a037d5f246395ec725489c655344a958a</anchor>
      <arglist>(double *c, double m[3][3], unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calc_rms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a25d610b9255993505f2dbdd9690d068f</anchor>
      <arglist>(double *r, double *f, unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotorToAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95b4ba35439691534ac9c74c47a4b688</anchor>
      <arglist>(double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e68658ca81568e214ebedb8f6c4bd10</anchor>
      <arglist>(std::ifstream &amp;fs, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0d523299532d6b282919923e731771ee</anchor>
      <arglist>(std::ofstream &amp;fs, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a034c6dd9973dc10ecb7cab1e58a683fa</anchor>
      <arglist>(std::ifstream &amp;fs, const string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab9bfc815426ab3c657b97c198aee9f3e</anchor>
      <arglist>(std::ofstream &amp;fs, const string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2e30f35d0b3984ff969fed0eadc3a848</anchor>
      <arglist>(std::string &amp;s, unsigned int start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InternalToCartesian</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae82e7b7b74e5212eada681c15afb77f4</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CartesianToInternal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7145217d4de73e243d2d3888dac404ba</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qtrfit</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a594933a93529376dbae80405cf23afa8</anchor>
      <arglist>(double *r, double *f, int size, double u[3][3])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveLinear</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a867d77834ebf14f88224f0dd7e7e0e61</anchor>
      <arglist>(double A, double B)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveQuadratic</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad37b2e597a6a0115fa09fc4903665c9d</anchor>
      <arglist>(double A, double B, double C)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CubeRoot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a637e2cd6fd74982c574e513d729b29bc</anchor>
      <arglist>(double X)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveCubic</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af0ca115b10493da91f7a1c65f5b44ef6</anchor>
      <arglist>(double A, double B, double C, double D)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ob_make_rmat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7e02cd2874a2a4826c8587da507f62ef</anchor>
      <arglist>(double mat[3][3], double rmat[9])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_roots_3_3</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa7ec675d10f9071757b87d4952938b65</anchor>
      <arglist>(double mat[3][3], double roots[3])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>superimpose</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c5374c2c0b42dee2fd36cd475a3cb1c</anchor>
      <arglist>(double *, double *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_rmat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8aa7959b427e1c630f14732c2ad642c8</anchor>
      <arglist>(double *, double *, double *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToUpper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aae157b7c5a3145dff9e938888d41d46f</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToUpper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47cc993bd022dfca052b2b18f5cd89ea</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToLower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8e8df618618aa53bf4cf202b0230c7ac</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToLower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47e5132fa26acd9f575c6c34e6337348</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a02a81294407df471b68048bb2bcfd503</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CleanAtomType</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae7fd604c6cfd7cbb0067721106af8ca9</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>Roots</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a19c1a2a80cf2af5131ca597d0ce38192</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>obutil.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>obutil_8h</filename>
    <includes id="rand_8h" name="rand.h" local="no" imported="no">openbabel/rand.h</includes>
    <class kind="class">OpenBabel::OBStopwatch</class>
    <class kind="class">OpenBabel::OBSqrtTbl</class>
    <class kind="class">OpenBabel::triple</class>
    <class kind="class">OpenBabel::quad</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>M_PI</name>
      <anchorfile>obutil_8h.html</anchorfile>
      <anchor>ae71449b1cc6e6250b91f539153a7a0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a60625165cc16932d1c2f34976dbc54dd</anchor>
      <arglist>(double *, double m[3][3], unsigned)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calc_rms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a25d610b9255993505f2dbdd9690d068f</anchor>
      <arglist>(double *r, double *f, unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OBCompareInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4216f2e0672bf6a9ee72d3029838a213</anchor>
      <arglist>(const int &amp;a, const int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OBCompareUnsigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abb48ec7a1b3301248a1147cf2dbbe600</anchor>
      <arglist>(const unsigned int &amp;a, const unsigned int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNear</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a362770307f86a3b9acd494d9ccbbcf51</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNearZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e51098e105d63b04b5517299d1b772</anchor>
      <arglist>(const double &amp;a, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNan</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a227ab5b29e8122dd6d8ac76d2b58778a</anchor>
      <arglist>(const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNegligible</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae3802301a4e7c389095313a77861a959</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double precision=1e-11)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af464b3279bc3db8c58ca552ddb0e8e79</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double precision=1e-11)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox_pos</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a470b9e69978e49f27b85b48077bd7c72</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double precision=1e-11)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanBeSquared</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95b1c21368d148cb45ac6f604984c357</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e68658ca81568e214ebedb8f6c4bd10</anchor>
      <arglist>(std::ifstream &amp;fs, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0d523299532d6b282919923e731771ee</anchor>
      <arglist>(std::ofstream &amp;fs, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToUpper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aae157b7c5a3145dff9e938888d41d46f</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToUpper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47cc993bd022dfca052b2b18f5cd89ea</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToLower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8e8df618618aa53bf4cf202b0230c7ac</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToLower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47e5132fa26acd9f575c6c34e6337348</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae254bae8e13592739edfdf24b917a943</anchor>
      <arglist>(std::string &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a02a81294407df471b68048bb2bcfd503</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CleanAtomType</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae7fd604c6cfd7cbb0067721106af8ca9</anchor>
      <arglist>(char *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>op.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>op_8cpp</filename>
    <includes id="op_8h" name="op.h" local="no" imported="no">openbabel/op.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>op.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>op_8h</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <class kind="class">OpenBabel::OBOp</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>optransform.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>optransform_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="phmodel_8h" name="phmodel.h" local="no" imported="no">openbabel/phmodel.h</includes>
    <includes id="op_8h" name="op.h" local="no" imported="no">openbabel/op.h</includes>
    <class kind="class">OpenBabel::OpTransform</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>painter.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/depict/</path>
    <filename>painter_8h</filename>
    <class kind="class">OpenBabel::OBColor</class>
    <class kind="class">OpenBabel::OBFontMetrics</class>
    <class kind="class">OpenBabel::OBPainter</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>parsmart.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>parsmart_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <includes id="tetrahedral_8h" name="tetrahedral.h" local="no" imported="no">openbabel/stereo/tetrahedral.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ELEMMAX</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>acc00e1c836a2e05fb0d26ea95893b28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATOMEXPRPOOL</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>afaf970ec3469dd85c5e72f56d6c8cd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BONDEXPRPOOL</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a0e53f7b51636e38ababdc60356b967a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ATOMPOOL</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a8bb0896d9b2cfa4099cfc0ed4d8c059c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BONDPOOL</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a2133f987d425f686b0be7a2fd2fecc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_NONRINGUNSPEC</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>acf24e5480cde9a5a56b5005ccd07ae73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_NONRINGDOWN</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>add18a812f24456bde91bc0cde4ef6096</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_NONRINGUP</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a295450b49bbf0334e11a3170729123ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_NONRINGDOUBLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a81072fa5de58c2349cf6af1a8034befc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_NONRINGTRIPLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a483264ef39b9ad3e4275b0174a45b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_RINGUNSPEC</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a255292b8a26643df8c8ceb5c8d2033da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_RINGDOWN</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a5f660916576cfdd1a80e5bc3d6bec9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_RINGUP</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>aee39ef1f4a0ee5c7082a6dd8741d6a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_RINGAROM</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a6242fe0d42609a079bf0d9270920d885</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_RINGDOUBLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a68aaf771a20314a0dbfd03fb19b7e86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BF_RINGTRIPLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a99d392578b38f68d005dbfa56d1997a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_ALL</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>aecd5a2d313d128d7bddf72a941c38661</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_SINGLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a926acba2a0011df40b7b3d18bb8e25dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_DOUBLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a25e0b0fb7400c28b64cef72dca3d5b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_TRIPLE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a284a45a8662d999d5304daeeea2a235a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_AROM</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a9f0faf6ed68c1278b537db54e1e5a7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_UP</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>aafb2457ef0332ac86bd7d69c7278c7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_DOWN</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a407ce6b09bc7c249f029dc733c8d515c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_UPUNSPEC</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>afdaf6a02cc24882ebb9ef6ee04f1083b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_DOWNUNSPEC</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a816ed6318904ccdd7e477d9362fa8a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_RING</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>ad196c5a4a83b706187f63f4f8d738cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BS_DEFAULT</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a217c1292f08e156efcde7a42ed531a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AE_LEAF</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a559d17fbaa08ebdc46065c073cb4b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AE_RECUR</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>add49d4e73cd5d1fa8c7f472a0ef2412a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AE_NOT</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>aa66ff67a7755a5f23755eecd0c96c9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AE_ANDHI</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a2d3e61de62043ecc42b56f21d7a86386</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AE_OR</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a5dcff95c49e0c58ece1e55bd3c2530da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AE_ANDLO</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>ad53da988693a5d7cb1dc98d331248c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_CONST</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>ae318656a0232e8b6161b177619cdc98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_MASS</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>abcb8ea3ea1e1176f7234f0b791ae7933</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_AROM</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a9d9fd93c74333087a5e75aa3da5df1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_ELEM</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>ab743e2c72af5f52d800edc823cc32f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_HCOUNT</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>ae1f991e6908cbfec8a7902f49a0a4a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_NEGATIVE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a353f9fabc8c0ae1cc46c020072601d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_POSITIVE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a6b7aa7f7cb3e6aaefbff3046532f0d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_CONNECT</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a8aa8a664bdb9c8499fe7f408c5530161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_DEGREE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>ac156d97731ebb39a20057d5b91abd60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_IMPLICIT</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a720c553118b67c62400b0535347cd66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_RINGS</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a8ac7ca9f5fa32b729344a039900b60e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_SIZE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>af9be27d6b7dd42d45b733c9f3327b1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_VALENCE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a609bed90d49995c5fdd679725510efc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_CHIRAL</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a39425e6855fc27b9d3157087bd7cfd85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_HYB</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a81dfab5d3ac10f1c0c9e6e6bfe027dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_RINGCONNECT</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a13b71e40d70479185f41ab5f22d631a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_CLOCKWISE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>af0962f3f840317ec900ab353d45e3b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_ANTICLOCKWISE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a9dfa56420dcf1e395f11d82f83239e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AL_UNSPECIFIED</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>aca1cf2d2b472e0175c931112e491095f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_EVAL_STACKSIZE</name>
      <anchorfile>parsmart_8cpp.html</anchorfile>
      <anchor>a026d3a595081ea26440aef3e527382b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetVectorBinding</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7b5986b1238c63b45e7fb0fdfdfc4ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>CreateAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5ef07c8230811964a209e423abea11d2</anchor>
      <arglist>(Pattern *, AtomExpr *, int, int vb=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FatalAllocationError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afb8652b972f454e6ab6a58c7ffa46380</anchor>
      <arglist>(const char *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FreePattern</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adda2fb3f1a00bdee06b36a3a56ecab0a</anchor>
      <arglist>(Pattern *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pattern *</type>
      <name>CopyPattern</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1fea358f643e1a4c2969fe9fc367372b</anchor>
      <arglist>(Pattern *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AllocAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa06090c65ac9acea8044a078064142d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>CopyAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac86a92f114ff5ab6ee7357352682922c</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FreeAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae445247649429e110f031d235bc4d465</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9cf9b8eaac01d8b3edecdc32e0d73512</anchor>
      <arglist>(int prop, int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomNot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a03cacdaa8b1851aa9f927a8108b9e3ea</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomBin</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a61fd91da70225bf05011639396d23b10</anchor>
      <arglist>(int op, AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomRecurs</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c7a4877081dd4f7ab5966e1cb506895</anchor>
      <arglist>(Pattern *pat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>GenerateElement</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7d8b74f86bd19e5c64c5cfafbc0f5fc8</anchor>
      <arglist>(int elem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>GenerateAromElem</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adf5c0e4e485dfa0a5b9854063d0e75be</anchor>
      <arglist>(int elem, int flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsInvalidAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8d298e86b8ff500e158a8410aa5aa732</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>AllocBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac80b9ed98f3d3d577e051b6dd2870cef</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>CopyBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a308583e0ca7df091c7a7e3b9fb321805</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>EquivalentBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62e1c3bdf62c95fbff1b64cb4996eccb</anchor>
      <arglist>(BondExpr *expr1, BondExpr *expr2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FreeBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec5ad77869a83b4b1f65bcfcb065d98f</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>BuildBondLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab0f9c1d3ab7ba35f0083c342db724359</anchor>
      <arglist>(int prop, int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>BuildBondNot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a558423c98a7710dccb8d9234a8c0d2cc</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>BuildBondBin</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6fc2b0b41adf46651940ca2c9410ed0d</anchor>
      <arglist>(int op, BondExpr *lft, BondExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>GenerateDefaultBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad1d85b6d3bd9953ffd9a3ffc5545bcfc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pattern *</type>
      <name>AllocPattern</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a17874fdfb56af286f64cbf9471772daa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>CreateBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0dc584d0582e8f76b7c9873dc1ccf569</anchor>
      <arglist>(Pattern *pat, BondExpr *expr, int src, int dst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MarkGrowBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac16aac0b5b4c8698863437383b747a5c</anchor>
      <arglist>(Pattern *pat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetChiralFlag</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a308bf98f43b9e6d709f17b2e83617d6f</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>NotAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a67a769d9ce95278983a65764b363188c</anchor>
      <arglist>(AtomExpr *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AndAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa31643b98610c21a70246529ae43a3c0</anchor>
      <arglist>(AtomExpr *, AtomExpr *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>OrAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aecadd7da4b4879ed4274e628fc440f4f</anchor>
      <arglist>(AtomExpr *, AtomExpr *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsBooleanAtomLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac613f2b30f871cd23e63b8573372b2a4</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsNegatingAtomLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a93043bdcf295c9daa7efb45bc31182ce</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>EqualAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a19b1b9103d86b579bb44d777db593c73</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>OrderAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a40de5efd81cb1bca8ff737a1507deeb0</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomLeafConflict</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a58b602c6be0aa88f69fbaecd71a82b7a</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomExprConflict</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6419b054750512355f620886990ae725</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomLeafImplies</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afe1606ae8fc8753791a06f48e1beaf4f</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomExprImplied</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a53bb1c96f3be289fbe52bdb65afe3b13</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AtomExprImplies</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5efeaba0de04686b85e1cd11296bb76f</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AndAtomExprLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec3b3cd6bc1ab563427c7a03d52d7c0c</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>ConstrainRecursion</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aafea7a59ad4cbb9bda87187210befbc5</anchor>
      <arglist>(AtomExpr *recur, AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>OrAtomExprLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a44c137e83dc2832887a5db79ceb19dbf</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetExprOrder</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acc7a90098a2f71e1480986f513426244</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SmartsLexReplace</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1be5369686428b6311fc8f79baf855c5</anchor>
      <arglist>(std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>N_parsed_bonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9bb7a6b653e299a7918cf66e3a7be057</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parsmart.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>parsmart_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="union">OpenBabel::_AtomExpr</class>
    <class kind="union">OpenBabel::_BondExpr</class>
    <class kind="struct">OpenBabel::BondSpec</class>
    <class kind="struct">OpenBabel::AtomSpec</class>
    <class kind="struct">OpenBabel::Pattern</class>
    <class kind="struct">OpenBabel::ParseState</class>
    <class kind="class">OpenBabel::OBSmartsPattern</class>
    <class kind="class">OpenBabel::OBSmartsMatcher</class>
    <class kind="class">OpenBabel::OBSSMatch</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BE_LEAF</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a74d47383c9cfa0ef28949fb1986816a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BE_ANDHI</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a34c569404f51ae189843754917ff9566</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BE_ANDLO</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>ad9cf53fd85f0ff1adbeefa1ebf31e53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BE_NOT</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>afebc5b82d4a4ed2e6f9a34760afd6c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BE_OR</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a23a693dfa98162af1b47b7ec57cb29aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BL_CONST</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a924b5d1cddecc6da237d9938b34e4444</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BL_TYPE</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>acbec3a551709136d446fc96d3d75c854</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_SINGLE</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a16da642308fcb7853a3c54bb15c8a810</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_DOUBLE</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>ae1a8803bbea5087269936304977a3692</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_TRIPLE</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>ad51b9bc6e1cbf9b1bfa6d31b79ba88eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_AROM</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a7f375920d8ccfb55e22b1f31215f39f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_UP</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a0cbea531ed2900ee3c01d49b98458ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_DOWN</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a8ab1dd7cd9fe847c7d4b99e32eef36ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_UPUNSPEC</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a3b969f6f2c329f48453407609915794e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_DOWNUNSPEC</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a45cc69db42ded19b63bfa88279e57263</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_RING</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>ada98bf03140e666c10ef0b43ffe16c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BT_QUAD</name>
      <anchorfile>parsmart_8h.html</anchorfile>
      <anchor>a9b56409d42320567572c78afc3b352c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union OpenBabel::_AtomExpr</type>
      <name>AtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8df92ddf377e8839e49c4c1d4a617f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union OpenBabel::_BondExpr</type>
      <name>BondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac7bd9a9f7066eb36f2cfa568d180cb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SmartsLexReplace</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b397e6876fbb7f13d0e4a3cac7edfdc</anchor>
      <arglist>(std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>patty.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>patty_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="patty_8h" name="patty.h" local="no" imported="no">openbabel/patty.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>patty.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>patty_8h</filename>
    <class kind="class">OpenBabel::patty</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PT_CATION</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>a2a2286006e4671f9e83d0dafedc66084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_ANION</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>ae5a129598c2245d32f734eb3d5706f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_ACCEPTOR</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>a924c4b6cc41fb6b4a6b644d2f6d7629b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_POLAR</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>a3ff047ed46dc33b4198f54b03e12a943</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_DONOR</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>ad1e98d373b6f8d8011a96c0f8292d6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_HYDROPHOBIC</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>a13c623cd8f81001954f19e7b578e1915</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_OTHER</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>a2d27e913cc25b872557aae97750d9667</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PT_METAL</name>
      <anchorfile>patty_8h.html</anchorfile>
      <anchor>ab9387da40d787d377d059e9ef7de77be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phmodel.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>phmodel_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="phmodel_8h" name="phmodel.h" local="no" imported="no">openbabel/phmodel.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>phmodel.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>phmodel_8h</filename>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <class kind="class">OpenBabel::OBChemTsfm</class>
    <class kind="class">OpenBabel::OBPhModel</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>plugin.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>plugin_8cpp</filename>
    <includes id="plugin_8h" name="plugin.h" local="no" imported="no">openbabel/plugin.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>EnableStaticPlugins</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga7a0297c3c2a3fa58bbd5e321b900ddec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plugin.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>plugin_8h</filename>
    <class kind="struct">OpenBabel::CharPtrLess</class>
    <class kind="class">OpenBabel::OBPlugin</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_PLUGIN</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadd740e2a386b7db3e1f0e271cbe8a3f1</anchor>
      <arglist>(BaseClass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_STATIC_PLUGIN</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaac917d0f317751ba3ac45628fb467e58</anchor>
      <arglist>(className, instanceName)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>EnableStaticPlugins</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga7a0297c3c2a3fa58bbd5e321b900ddec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointgroup.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>pointgroup_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="pointgroup_8h" name="pointgroup.h" local="no" imported="no">openbabel/pointgroup.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DIMENSION</name>
      <anchorfile>pointgroup_8cpp.html</anchorfile>
      <anchor>aa1c0281395a97150474c058710b42bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXPARAM</name>
      <anchorfile>pointgroup_8cpp.html</anchorfile>
      <anchor>a1672a7083cc5915b0beb351893da0d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PointGroupsCount</name>
      <anchorfile>pointgroup_8cpp.html</anchorfile>
      <anchor>a8e1151b4250eccc0617361c906cbefb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>POINT_GROUP</type>
      <name>PointGroups</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a856b116adc145026ec1c182e9145c818</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointgroup.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>pointgroup_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="class">OpenBabel::OBPointGroup</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>query.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>query_8cpp</filename>
    <includes id="query_8h" name="query.h" local="no" imported="no">openbabel/query.h</includes>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileMoleculeQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9307ec0c55a4d2b7ee933b53a3a84ce5</anchor>
      <arglist>(OBMol *mol, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileSmilesQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga87fabf6ed3625406fe5d117b134b5f16</anchor>
      <arglist>(const std::string &amp;smiles, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>query.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>query_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="tokenst_8h" name="tokenst.h" local="no" imported="no">openbabel/tokenst.h</includes>
    <class kind="class">OpenBabel::OBQueryAtom</class>
    <class kind="class">OpenBabel::OBQueryBond</class>
    <class kind="class">OpenBabel::OBQuery</class>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileMoleculeQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9307ec0c55a4d2b7ee933b53a3a84ce5</anchor>
      <arglist>(OBMol *mol, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileSmilesQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga87fabf6ed3625406fe5d117b134b5f16</anchor>
      <arglist>(const std::string &amp;smiles, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rand.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>rand_8cpp</filename>
    <includes id="rand_8h" name="rand.h" local="no" imported="no">openbabel/rand.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>True</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>add3ca9eefe3b5b754426f51d3043e579</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>False</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>a306ebd41c0cd1303b1372c6153f0caf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IsEven</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>ae23bb165c057da5e7525a05494258fe2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IsOdd</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>a2f4bc73362b32695ff1974c8a5acccc3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BothEven</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>a70b372ebde7d5afa079264b7214a3cdb</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IsPrime</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>aecdd7502a7fb4cd20ee3b4ebc3abe0fb</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HiPart</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>a628885e9ee63c188b3eedfe3dc44046f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LoPart</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>ad5c4ff4ac32f6111823a033544a0d262</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXFACT</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>a6ea4ed94ad756413654626b718508ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXPRIMES</name>
      <anchorfile>rand_8cpp.html</anchorfile>
      <anchor>ae6ffcd9369ff18ef49289892395d0558</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>isqrt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf0cdead441d34bce09b5dffbd031e94</anchor>
      <arglist>(unsigned int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsOddPrime</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4d8217756622db102e25941df848d37</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>RelativelyPrime</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a83b9098df014b7fce40c3d29eb240240</anchor>
      <arglist>(unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DoubleAdd</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7fe18b3a86010f2fbbeeda7a6ed635a4</anchor>
      <arglist>(DoubleType *, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DoubleMultiply</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a28466e08c61853737ac9bdeaeee495cc</anchor>
      <arglist>(unsigned int, unsigned int, DoubleType *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>LeadingZeros</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9c9b5a925bb477e9cf899d8705defc60</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>DoubleModulus</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa995f2456608bb27a86fef9460f9e8e0</anchor>
      <arglist>(DoubleType *, unsigned int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DeterminePotency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab39d4f554084f831800c2f18b5b0f017</anchor>
      <arglist>(unsigned int m, unsigned int a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DetermineFactors</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5e5d2c394de2985154659ef73adddea6</anchor>
      <arglist>(unsigned int x, unsigned int *factors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>DetermineIncrement</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a368951c5db9d79bad24d0632dbaf23d4</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DetermineSequence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad3a7dadaa9b14b3d1a4a521f632a2477</anchor>
      <arglist>(unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateSequence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adfc4a863d0839be0e62e9db9d585fd7e</anchor>
      <arglist>(unsigned int p, unsigned int m, unsigned int a, unsigned int c)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>primes</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adddfd42867b5aaa0caaa3a793a8f69e2</anchor>
      <arglist>[MAXPRIMES]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rand.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>rand_8h</filename>
    <class kind="struct">OpenBabel::DoubleType</class>
    <class kind="class">OpenBabel::OBRandom</class>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>void</type>
      <name>DoubleMultiply</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a28466e08c61853737ac9bdeaeee495cc</anchor>
      <arglist>(unsigned int, unsigned int, DoubleType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DoubleAdd</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7fe18b3a86010f2fbbeeda7a6ed635a4</anchor>
      <arglist>(DoubleType *, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>DoubleModulus</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa995f2456608bb27a86fef9460f9e8e0</anchor>
      <arglist>(DoubleType *, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RDKitConv.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/</path>
    <filename>RDKitConv_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="obiter_8h" name="obiter.h" local="no" imported="no">openbabel/obiter.h</includes>
    <member kind="function">
      <type>RDKit::RWMol</type>
      <name>OBMolToRWMol</name>
      <anchorfile>RDKitConv_8h.html</anchorfile>
      <anchor>a409276f16b65f754ca8125caf9c4b5de</anchor>
      <arglist>(OpenBabel::OBMol *pOBMol)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reaction.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>reaction_8h</filename>
    <includes id="shared__ptr_8h" name="shared_ptr.h" local="no" imported="no">openbabel/shared_ptr.h</includes>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="class">OpenBabel::OBReaction</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>residue.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>residue_8cpp</filename>
    <includes id="residue_8h" name="residue.h" local="no" imported="no">openbabel/residue.h</includes>
    <includes id="atom_8h" name="atom.h" local="no" imported="no">openbabel/atom.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">openbabel/bitvec.h</includes>
    <includes id="bond_8h" name="bond.h" local="no" imported="no">openbabel/bond.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>GetAtomIDNumber</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a896fe2a9e9925cda30253ea47ab123c6</anchor>
      <arglist>(const char *atomid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>GetResidueNumber</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a822c0b4a40ee24e37bc3064b4e403458</anchor>
      <arglist>(const char *res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetResidueKeys</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91a8965770cf999c120602edb0c09bcd</anchor>
      <arglist>(const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>residue.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>residue_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <class kind="class">OpenBabel::OBResidue</class>
    <namespace>OpenBabel</namespace>
    <namespace>OpenBabel::OBAminoAcidProperty</namespace>
    <namespace>OpenBabel::OBResidueAtomProperty</namespace>
    <namespace>OpenBabel::OBResidueIndex</namespace>
    <namespace>OpenBabel::OBResidueProperty</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAXSETNO</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>af72e45130420babf67aa701a0f2361ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXELEM</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>aa6e701e58282da3200ddee70740f8514</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MINELEM</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>abd6045b55ead8f29d9593e79e6b20575</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXRES</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a45404c3c762f1e48cf9294137747f1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MINRES</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>ad165362f7dc704f2cce3cd6042b1bf8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_ALA</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>acbd780fc4669b841a7276586d67ddf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_GLY</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a3a65bcd18f44e26589016ff41428f0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_LEU</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a2d96e78e1a4c654b33e9471beeba679b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_SER</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a59f4f029a5efe4a064af0d5227f3575e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_VAL</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a64db4c00cf7b9f65d0740a17aa92f3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_THR</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a73be07941593cf4dee06381eb9e8d4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_LYS</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>aa2cace6a35d85c6c07d3b29458364d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_ASP</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a7cb13635ee79481033fa95e5ee7473c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_ILE</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a81bd31461dfef9ea47b6a6c0e499c67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_ASN</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a9b8b12ea3de893e6aec5cfad94cdf9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_GLU</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a044ba5442e570f91ca5cabfb9d59ca45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_PRO</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a791cad4be9329845f0d23f3ac7551cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_ARG</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a9f6b30f3263fc6e3d2de4f47b851c351</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_PHE</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>ae0bd04534ad63d21ee9de7a3f288613f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_GLN</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a05eef182a93ec035da937e64e8c79d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_TYR</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a6b20546672e17982d23a25ff7625ce95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_HIS</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a1bc509536035301392332c0de9ab8aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_CYS</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a70a48ac94735e7fb582b395cce129708</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_MET</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a6a43afd99246a857fe34871d37f26759</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AA_TRP</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>ad6480f8f77e8333fc965b401ade7cb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_ACIDIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>ad0102ffb4251a575e30bcc9c82640568</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_ACYCLIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>ae1e0a74844fba69f265ed18994c366fa</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_ALIPHATIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a5407c4c4fed8b2e03e07ace4379376a2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_AROMATIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a0833e2541862321b0a128611cd507aed</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_BASIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a911b7c8587c0a77ae27297188baba909</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_BURIED</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a4b794a166f593c12a4666c5d0926ecce</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_CHARGED</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a6de20f8021d3fe291d7df9b0280f5708</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_CYCLIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a208d8016e94d434647a6fda192114051</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_HYDROPHOBIC</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a229161883298b5c9973d510941b74770</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_LARGE</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a8b3042a9a691681f6a7d3ca0bc90e85f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_MEDIUM</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>ab21e6aa772e2e6acd6ce83522831e1fe</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_NEGATIVE</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a3555aacea9ec76fb75462d9c34c1d75f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_NEUTRAL</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a6f2bb96fb9fedd983223254e18b0d7ba</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_POLAR</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a870aea211c05e420ef3f293a7afd0f42</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_POSITIVE</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a3c594c53b3c8bc2eb0431274f2b1daf6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_SMALL</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>aca9631ebb84f110f91613324f7a4a5c2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_SURFACE</name>
      <anchorfile>residue_8h.html</anchorfile>
      <anchor>a09182c0d3d81338d341d791ed3b2ba09</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBResidue * &gt;::iterator</type>
      <name>OBResidueIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa52bc907b6b29c913a85671c48ff8ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACIDIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a045438be0be67b01c340bd1f994bbfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACYCLIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a3533460e8020bee4abc333477d0e7f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALIPHATIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57ad1df9ce0f3d960bb2e16fe134985fab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AROMATIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a15dd7ce1ada8f3f0998d9b945f340d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a13c45196813cb44e6e81e9c48a5ec1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BURIED</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a435f418ed46a1d0999290dcdcb3e25d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARGED</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57abe2f55540ce4c31da37839f49cbfac00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYCLIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a41ec9818e6db8b3150502ce92f911478</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HYDROPHOBIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a6f7f04043d462824a62e3c1e78757554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LARGE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a716db5c72140446e5badac4683610310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEDIUM</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a5340ec7ecef6cc3886684a3bd3450d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEGATIVE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a62d66a51fa7574c652597716f7709865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEUTRAL</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57af46d14eb9d5d71afc9f6e747689fcb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POLAR</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57aa54fd87899b2d83f2a08232393e732fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIVE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a03d440bbbfb042afc85347f994b44fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALL</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57aea5e596a553757a677cb4da4c8a1f935</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SURFACE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57aec3093f5673be2548cc7091279b429e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHA_CARBON</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388af1519f8b65e8ac7cabeff04fab6feb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AMINO_BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a92449404d5407a5fcba9b08eba9b6286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a3edc1b372333c6e852a7755d55428efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYSTEINE_SULPHUR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a506edfc16921cd59e8ad817b4181a9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIGAND</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a7169e1889cc3ff355aeac7d83121531b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUCLEIC_BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a2505e9d847c6234e636e78bee5021e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHAPELY_BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388ad415a6edd238b178db4423b0e5173fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHAPELY_SPECIAL</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388adb37da8dc34f7af4130ea41feacbfbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIDECHAIN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a2c8fa426da706f246136cb9a6bf85327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUGAR_PHOSPHATE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a8fe602c74d1a6111677d39fe163cb90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da95cd078b64d9f9d6f3c20404d8f66c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLY</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da94d7ff13bcdd51eea2c1da5c264ca4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daad47ce001ed8754f397999b58d3b50cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SER</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dac5a5cfdbc76418f74f2a427c51d1c774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAL</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da990a2861a2fe6b95a4008a9ec07ab519</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad481a610bd2db6b97d40ddcd9abbd04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LYS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daeb525f323eeaf7903e901db58a9aae1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da3a997c98204251b1b9c571abd95a2de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabac1d11107315b23b4548e52617d22e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da24f096b0a2f1d9ca16f1c4415fab1ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da44b0f0665a037c7e6dda002f070714d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da7d60bffdf68936b5011970a02c818b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa08ab92d27d76b8b77a5f4d551ced4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da370d7d793d7cadf5c4ea4e7489585782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa64a718f3dd04ec08cd9eececba8e6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da3b209f766341ee7459956538bc5da1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da0ca996226a243b3b9721eee1690da354</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da11ae67f062b9f1661a0af31240f3d231</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MET</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dae06932408cafd29884daf8533ba507fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da43621631ca67d05d566cc33fa005845f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASX</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da06964cf1ec93e904888af9e55f733df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLX</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da2ffaba14518e15947f81c385b742df6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PCA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad22aa98eb439fd84fbce7e3f7a892ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HYP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da300bdd72e3fad3a13bab36e28bbcac8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da42a4ade1acd55a49164099104990e09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da739ce3f516592d245d16fd8a3893472c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>G</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da2fe993340f6abb2234e543cd427df70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dac461e84f27bbb236874e1011cd66031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daf8182d551cf57debc5fead16a93ec46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad091b8e376f7cf432dc367e1eda65e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_1MA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da87cce1545888017ea8ccdb90cbefef3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_5MC</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dafdb7077f9cff515c183bbec809bb9cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OMC</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da1010792fba00c85ec7ec5d1d753abb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_1MG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da19f6a068dd917f11ccc878a973505ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_2MG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da98b694ee150582643498f5ee6cd0f9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M2G</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da42bf50879c502811d9759db270ae9991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_7MG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da45243b7ef01549aeb1d2659913017cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OMG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dadc587d0e935dcd0411626b7da376cec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da3ad448987ac281048d4558c4a6d4459a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H2U</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da9aec1ef1e85d8476079d841b5c3d12e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_5MU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabe2be73b8c2c65fc720b8e54e484c7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PSU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da7e518bbcbf5874dd82df44794b0b50e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNK</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da822987746a55a3436f5a30502f32d7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da7c6322d06ffff6c8d3bf3c0b3ea3210e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa809654855caa62449850d9122fd77a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOH</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da34e3c6a2fb8e37a28f02728c48e38801</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOD</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabe1fb75d33b890e4d2b985e7601afabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SO4</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa6a22622ddba92ae4172f8e5dd056370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PO4</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da8be984115f521339b04bf60340651664</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAD</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da713023b44f020a4922d6ed25c196eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad722f47ae7e525e2d9680a55800995a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dac8aeed951dea0c630a06a9c1cba5fe87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NDP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da909002bfb278911ff711c2ab422309c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AMINO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a92735ceb34f797e8b31e95818697542a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AMINO_NUCLEO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8ae8cb4d69045ca2704dfff6c28eb579a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COENZYME</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a365f90d646c6babcf18884439364d0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ION</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8ae875d295370fe613c6b422d0ed5a3a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUCLEO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a9ed11fa43eaab3cb44b9a9f0146c5042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROTEIN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a8b89fd9e5a9e8c681b15b27479408bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURINE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8aad86ad6c6ee78f9148631741ee62988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PYRIMIDINE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a56d4eb6af97d0baa17e24d4d56cd02c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVENT</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a9d6b5b185a7e651e4835d64e0cc35d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WATER</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a9ac7d5e5851d7a2bc186a1c3341589f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>Residue</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1c64f54dc7b18535a4e9cc581199e26a</anchor>
      <arglist>[MAXRES][4]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>ElemDesc</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ada1d79ef0dec356ea0ae9c1d4e654ca2</anchor>
      <arglist>[MAXELEM][4]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ResNo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4a6dc069703276b9476ce6b7c5f018e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ElemNo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a508adcc5794ff87b21a2e5fc0d752b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ring.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>ring_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="ring_8h" name="ring.h" local="no" imported="no">openbabel/ring.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_RTREE_CUTOFF</name>
      <anchorfile>ring_8cpp.html</anchorfile>
      <anchor>ad1004eaae66596e39d22ec64319e0c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DetermineFRJ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a387eb9209ded6f58de6c672c06121ec8</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BuildOBRTreeVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a902077219ff1df4935790b354a00909b</anchor>
      <arglist>(OBAtom *, OBRTree *, vector&lt; OBRTree * &gt; &amp;, OBBitVec &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>atomRingToBondRing</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acd603c36f7650b398cddf72b1b863b1f</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; int &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitRing</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac932ad377c246fc19473d052ab3243a8</anchor>
      <arglist>(OBMol *mol, OBRing *ring, std::vector&lt; OBRing * &gt; &amp;rlist, std::vector&lt; OBRing * &gt; &amp;rignored)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompareRingSize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8ae850aac19b7a1ff3c02b6f3c17d36f</anchor>
      <arglist>(const OBRing *, const OBRing *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FindRings</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0bc08c11af150479f14d23684fab908f</anchor>
      <arglist>(OBMol &amp;mol, vector&lt; int &gt; &amp;path, OBBitVec &amp;avisit, OBBitVec &amp;bvisit, int natom, int depth)</arglist>
    </member>
    <member kind="variable">
      <type>OBRingTyper</type>
      <name>ringtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae5fd3b39a867e164de9f433a78d9d09f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ring.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>ring_8h</filename>
    <includes id="bitvec_8h" name="bitvec.h" local="no" imported="no">openbabel/bitvec.h</includes>
    <includes id="typer_8h" name="typer.h" local="no" imported="no">openbabel/typer.h</includes>
    <class kind="class">OpenBabel::OBRing</class>
    <class kind="class">OpenBabel::OBRingSearch</class>
    <class kind="class">OpenBabel::OBRTree</class>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>bool</type>
      <name>CompareRingSize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8ae850aac19b7a1ff3c02b6f3c17d36f</anchor>
      <arglist>(const OBRing *, const OBRing *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rotamer.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>rotamer_8cpp</filename>
    <includes id="rotamer_8h" name="rotamer.h" local="no" imported="no">openbabel/rotamer.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_TITLE_SIZE</name>
      <anchorfile>rotamer_8cpp.html</anchorfile>
      <anchor>a2b7b465349a129829a8626910b4ec401</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_BINARY_SETWORD</name>
      <anchorfile>rotamer_8cpp.html</anchorfile>
      <anchor>a936a5879f18723817586964a296c88aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rint</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9f0ec6e80141edbb924cfc4839117c94</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotorToAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3d3039fda855c4c8c37c8345f0b51a64</anchor>
      <arglist>(double *c, OBAtom **ref, double ang, vector&lt; int &gt; atoms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Swab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8b1ba3c73d4038fd69729fbeb588008a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackCoordinate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a69a83bcbc3a172e306c4556518aa0999</anchor>
      <arglist>(double c[3], double max[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnpackCoordinate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3180afc2c45b337a776dcc164e99e89a</anchor>
      <arglist>(double c[3], double max[3], int tmp)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>SINT</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae3c640db1cce9cd703ef7c5429de5453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned char *</type>
      <name>STPTR</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0cc646b14fcc04a16103f6bd73382d17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rotamer.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>rotamer_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="rotor_8h" name="rotor.h" local="no" imported="no">openbabel/rotor.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">openbabel/generic.h</includes>
    <class kind="class">OpenBabel::OBRotamerList</class>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>int</type>
      <name>Swab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8b1ba3c73d4038fd69729fbeb588008a</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rotor.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>rotor_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="rotor_8h" name="rotor.h" local="no" imported="no">openbabel/rotor.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OB_DEFAULT_DELTA</name>
      <anchorfile>rotor_8cpp.html</anchorfile>
      <anchor>afb0ab18e82b8900b886c736aa0118f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetDFFVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a534fe2a629963b79ffbd499f461ca5df</anchor>
      <arglist>(OBMol &amp;, vector&lt; int &gt; &amp;, OBBitVec &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CompareRotor</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adfad2bce1feae52028bcf69d6b5de37a</anchor>
      <arglist>(const pair&lt; OBBond *, int &gt; &amp;, const pair&lt; OBBond *, int &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>MinimumPairRMS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e21802967a71af8d4f4828d979676b</anchor>
      <arglist>(OBMol &amp;, double *, double *, bool &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rotor.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>rotor_8h</filename>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="typer_8h" name="typer.h" local="no" imported="no">openbabel/typer.h</includes>
    <class kind="class">OpenBabel::OBRotorRule</class>
    <class kind="class">OpenBabel::OBRotorRules</class>
    <class kind="class">OpenBabel::OBRotor</class>
    <class kind="class">OpenBabel::OBRotorList</class>
    <class kind="class">OpenBabel::OBRotorKeys</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>std::vector&lt; OBRotor * &gt;::iterator</type>
      <name>OBRotorIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a434f394d0613a8ef6c119670ff49710f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shared_ptr.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>shared__ptr_8h</filename>
  </compound>
  <compound kind="file">
    <name>spacegroup.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/math/</path>
    <filename>spacegroup_8cpp</filename>
    <includes id="spacegroup_8h" name="spacegroup.h" local="no" imported="no">openbabel/math/spacegroup.h</includes>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <includes id="obutil_8h" name="obutil.h" local="no" imported="no">openbabel/obutil.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="enumvalue">
      <name>SPACE_GROUP_ID</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaa9ec83f377b3c4e2b987789c1f273a8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_HALL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaa732f4d3d79b99f8b9364cfc16e8003e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_HM</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaac6dbb396b7703e533fee3676da46fec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_TRANSFORM</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaa6150efae0567911e2f8c49bacdce6ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>RemoveWhiteSpaceUnderscore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a12c13a3449bb5bffa3436d7dda6f217c</anchor>
      <arglist>(const string &amp;in)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static SpaceGroups</type>
      <name>_SpaceGroups</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3463c4c11680aefbcce3a25305211efa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spacegroup.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/math/</path>
    <filename>spacegroup_8h</filename>
    <includes id="transform3d_8h" name="transform3d.h" local="no" imported="no">openbabel/math/transform3d.h</includes>
    <class kind="class">OpenBabel::SpaceGroup</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>spectrophore.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>spectrophore_8cpp</filename>
    <includes id="spectrophore_8h" name="spectrophore.h" local="no" imported="no">openbabel/spectrophore.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>spectrophore.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>spectrophore_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <class kind="class">OpenBabel::OBSpectrophore</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>spectrophore_8h.html</anchorfile>
      <anchor>a74e75242132eaabbc1c512488a135926</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX</name>
      <anchorfile>spectrophore_8h.html</anchorfile>
      <anchor>aacc3ee1a7f283f8ef65cea31f4436a95</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>N_PROPERTIES</name>
      <anchorfile>spectrophore_8h.html</anchorfile>
      <anchor>a1b419b638b9dae2e926f5b8607376147</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>squareplanar.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/stereo/</path>
    <filename>squareplanar_8h</filename>
    <includes id="tetraplanar_8h" name="tetraplanar.h" local="no" imported="no">openbabel/stereo/tetraplanar.h</includes>
    <class kind="class">OpenBabel::OBSquarePlanarStereo</class>
    <class kind="struct">OpenBabel::OBSquarePlanarStereo::Config</class>
    <namespace>OpenBabel</namespace>
    <namespace>std</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga9a6442f8a6cda1d0eb673a0199c9226d</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBSquarePlanarStereo &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaca674872623ccf5104d49756ed4f8c22</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBSquarePlanarStereo::Config &amp;cfg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stereo.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/stereo/</path>
    <filename>stereo_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <includes id="isomorphism_8h" name="isomorphism.h" local="no" imported="no">openbabel/isomorphism.h</includes>
    <class kind="class">OpenBabel::OBStereo</class>
    <class kind="struct">OpenBabel::OBStereoUnit</class>
    <class kind="class">OpenBabel::OBStereoBase</class>
    <class kind="class">OpenBabel::OBStereoFacade</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>std::vector&lt; OBStereoUnit &gt;</type>
      <name>OBStereoUnitSet</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga042299211c7a52f5aee1975d32820af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBStereoUnitSet &gt;</type>
      <name>OBStereoUnitSetOfSets</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga75c7c66edf2555b974417a77968ebb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PerceiveStereo</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gae7aedffc6994cf26d16524389c56bdac</anchor>
      <arglist>(OBMol *mol, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga305c9600a3a336da16683baa395e20f4</anchor>
      <arglist>(OBMol *mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaebcf38fd76c5d76fffbae808b8571f9b</anchor>
      <arglist>(OBMol *mol, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga419e494a34740f1f8003acabfa30a95b</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga35e07645a245db366b115f0dc20542fd</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gab85c5ef4c9416ee7af02b21658fe9de2</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gac3049b86debe9059b851825b29b1557c</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga7e1ba3a4ac33b0c6404b0d960cc53d00</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga98528c3002ed718695ccfaf031ca3f04</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, const std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TetStereoToWedgeHash</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga182a53150e1793ac1ec14958afb05f17</anchor>
      <arglist>(OBMol &amp;mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; &amp;updown, std::map&lt; OBBond *, OBStereo::Ref &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; OBBond * &gt;</type>
      <name>GetUnspecifiedCisTrans</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga63e739a42d88ac64ed77c07d73866a45</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoRefToImplicit</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga9b44683d071146220a97390283944f70</anchor>
      <arglist>(OBMol &amp;mol, OBStereo::Ref atomId)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gac74fff254a639ede4d92a59fa44318a6</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>OBStereoUnitSet</type>
      <name>FindStereogenicUnits</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaebf264394d502844b99b1dbe031ea185</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses)</arglist>
    </member>
    <member kind="function">
      <type>OBStereoUnitSet</type>
      <name>FindStereogenicUnits</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga0f62e73467d2059ad28d544633634862</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses, const Automorphisms &amp;automorphisms)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tetrahedral.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/stereo/</path>
    <filename>tetrahedral_8h</filename>
    <includes id="tetranonplanar_8h" name="tetranonplanar.h" local="no" imported="no">openbabel/stereo/tetranonplanar.h</includes>
    <class kind="class">OpenBabel::OBTetrahedralStereo</class>
    <class kind="struct">OpenBabel::OBTetrahedralStereo::Config</class>
    <namespace>OpenBabel</namespace>
    <namespace>std</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga30c6cc4c63f918bad5ed504e0e53edc6</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBTetrahedralStereo &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaa6dbf885c726a181852e742bb0b9a65d</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBTetrahedralStereo::Config &amp;cfg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tetranonplanar.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/stereo/</path>
    <filename>tetranonplanar_8h</filename>
    <includes id="stereo_8h" name="stereo.h" local="no" imported="no">openbabel/stereo/stereo.h</includes>
    <includes id="oberror_8h" name="oberror.h" local="no" imported="no">openbabel/oberror.h</includes>
    <class kind="class">OpenBabel::OBTetraNonPlanarStereo</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>tetraplanar.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/stereo/</path>
    <filename>tetraplanar_8h</filename>
    <includes id="stereo_8h" name="stereo.h" local="yes" imported="no">stereo.h</includes>
    <class kind="class">OpenBabel::OBTetraPlanarStereo</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>text.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>text_8h</filename>
    <includes id="base_8h" name="base.h" local="no" imported="no">openbabel/base.h</includes>
    <class kind="class">OpenBabel::OBText</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>tokenst.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>tokenst_8cpp</filename>
    <includes id="tokenst_8h" name="tokenst.h" local="no" imported="no">openbabel/tokenst.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1607444ae7cfbd6dcae449f9cb77b0e3</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>trim_spaces</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab1efa641b2fa046a6c00f729818933d6</anchor>
      <arglist>(char *string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a932114672402053a4208861b2b600506</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n\r&quot;, int limit=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>Trim</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae8d9d7dd615b5fa7b533c075fe744d8f</anchor>
      <arglist>(std::string &amp;txt)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>ignore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9858bede3a0f272573c0173a947bea18</anchor>
      <arglist>(std::istream &amp;ifs, const std::string &amp;txt)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>OpenDatafile</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>add34ce6b9be332e5d87fd5087d4dc38d</anchor>
      <arglist>(std::ifstream &amp;fs, const std::string &amp;filename, const std::string &amp;envvar=&quot;BABEL_DATADIR&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tokenst.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>tokenst_8h</filename>
    <class kind="struct">OpenBabel::DeleteObject</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FILE_SEP_CHAR</name>
      <anchorfile>tokenst_8h.html</anchorfile>
      <anchor>a7fc937c3aac7b76870d56fdc867f065a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1607444ae7cfbd6dcae449f9cb77b0e3</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a932114672402053a4208861b2b600506</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n\r&quot;, int limit=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>Trim</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae8d9d7dd615b5fa7b533c075fe744d8f</anchor>
      <arglist>(std::string &amp;txt)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a13c0a29de921d7995ba8a4ddd0196c99</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>ignore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9858bede3a0f272573c0173a947bea18</anchor>
      <arglist>(std::istream &amp;ifs, const std::string &amp;txt)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>OpenDatafile</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>add34ce6b9be332e5d87fd5087d4dc38d</anchor>
      <arglist>(std::ifstream &amp;fs, const std::string &amp;filename, const std::string &amp;envvar=&quot;BABEL_DATADIR&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transform.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>transform_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="descriptor_8h" name="descriptor.h" local="no" imported="no">openbabel/descriptor.h</includes>
    <includes id="op_8h" name="op.h" local="no" imported="no">openbabel/op.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>transform3d.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/math/</path>
    <filename>transform3d_8cpp</filename>
    <includes id="transform3d_8h" name="transform3d.h" local="no" imported="no">openbabel/math/transform3d.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>transform3d.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/math/</path>
    <filename>transform3d_8h</filename>
    <includes id="matrix3x3_8h" name="matrix3x3.h" local="no" imported="no">openbabel/math/matrix3x3.h</includes>
    <class kind="class">OpenBabel::transform3d</class>
    <namespace>OpenBabel</namespace>
    <member kind="typedef">
      <type>std::list&lt; transform3d * &gt;::const_iterator</type>
      <name>transform3dIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7ae0ba0c317c360c22eaa4b481e2dc87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typer.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/</path>
    <filename>typer_8cpp</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="typer_8h" name="typer.h" local="no" imported="no">openbabel/typer.h</includes>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>typer.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>typer_8h</filename>
    <includes id="parsmart_8h" name="parsmart.h" local="no" imported="no">openbabel/parsmart.h</includes>
    <includes id="data_8h" name="data.h" local="no" imported="no">openbabel/data.h</includes>
    <class kind="class">OpenBabel::OBAtomTyper</class>
    <class kind="class">OpenBabel::OBAromaticTyper</class>
    <class kind="class">OpenBabel::OBRingTyper</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="file">
    <name>vector3.cpp</name>
    <path>/Users/ghutchis/Devel/openbabel/src/math/</path>
    <filename>vector3_8cpp</filename>
    <includes id="vector3_8h" name="vector3.h" local="no" imported="no">openbabel/math/vector3.h</includes>
    <includes id="obutil_8h" name="obutil.h" local="no" imported="no">openbabel/obutil.h</includes>
    <namespace>OpenBabel</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a70c653ee69fdbd27f77d430e4aed3cad</anchor>
      <arglist>(std::ostream &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>cross</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a68dc2c35a1e58febaa9e13cd82e3a50f</anchor>
      <arglist>(const vector3 &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>vectorAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a00e2879019f2fb0fc689a7e5cb5d2008</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcTorsionAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62d62b3487ca8969bdfbd7c434da564e</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad8081070ab0409c71d9abfe43902881f</anchor>
      <arglist>(0.0, 0.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VX</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a71fd9d70c392449514d7a263d94e0ed1</anchor>
      <arglist>(1.0, 0.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VY</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac43607459a7e61f202515f641ff57508</anchor>
      <arglist>(0.0, 1.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VZ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abe3ca6a519f7aa7bcade3fb6d2b927f6</anchor>
      <arglist>(0.0, 0.0, 1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2PlaneSigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1fa4ebe11664cfe4759ea7ccaa3abbb9</anchor>
      <arglist>(vector3 a, vector3 b, vector3 c, vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2Plane</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad0e0c09ef7c92973447c46d3ad3f3f8d</anchor>
      <arglist>(vector3 a, vector3 b, vector3 c, vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2PlaneAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29227290e6e6931c009942836a21e5df</anchor>
      <arglist>(const vector3 a, const vector3 b, const vector3 c, const vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2Line</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32827b2955824019ff9a7e0a4ebfcd64</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector3.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/math/</path>
    <filename>vector3_8h</filename>
    <includes id="rand_8h" name="rand.h" local="no" imported="no">openbabel/rand.h</includes>
    <class kind="class">OpenBabel::vector3</class>
    <namespace>OpenBabel</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RAD_TO_DEG</name>
      <anchorfile>vector3_8h.html</anchorfile>
      <anchor>a89e47af0449640d4f15191aba5ca24c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEG_TO_RAD</name>
      <anchorfile>vector3_8h.html</anchorfile>
      <anchor>a212460e743fecb084d717bb2180c5a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a70c653ee69fdbd27f77d430e4aed3cad</anchor>
      <arglist>(std::ostream &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator+</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adc7b25b0ba45ce8f90a2519c03322e4a</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator-</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa2e0e5d4e59766809b5b61ab9b513a2e</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator-</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8bcf1e708be0fbc503f83952c3a99cd4</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a56b20579149ab8b5807475d4302c33a2</anchor>
      <arglist>(const double &amp;c, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac5dcc9191fa15d332a546a975cb72952</anchor>
      <arglist>(const vector3 &amp;v, const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator/</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af855844c28abaaafbf21c5835a8e81d4</anchor>
      <arglist>(const vector3 &amp;v, const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2ed22257c15dc44557c1c275c99d127d</anchor>
      <arglist>(const matrix3x3 &amp;m, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32a70eb5e04f4e10a386089723f05b2a</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>cross</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a68dc2c35a1e58febaa9e13cd82e3a50f</anchor>
      <arglist>(const vector3 &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>vectorAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a00e2879019f2fb0fc689a7e5cb5d2008</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcTorsionAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62d62b3487ca8969bdfbd7c434da564e</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2PlaneSigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1fa4ebe11664cfe4759ea7ccaa3abbb9</anchor>
      <arglist>(vector3 a, vector3 b, vector3 c, vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2Plane</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad0e0c09ef7c92973447c46d3ad3f3f8d</anchor>
      <arglist>(vector3 a, vector3 b, vector3 c, vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2PlaneAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29227290e6e6931c009942836a21e5df</anchor>
      <arglist>(const vector3 a, const vector3 b, const vector3 c, const vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2Line</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32827b2955824019ff9a7e0a4ebfcd64</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ace51dfd98be07acf3a9c75c21e8d8af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VX</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6ca3b632d31093a7110635452bccc7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VY</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2d3d483edcdb477b3d15f19a001845ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VZ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a08ec791bf0217b5df66e5879a9f9c95a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>xml.h</name>
    <path>/Users/ghutchis/Devel/openbabel/include/openbabel/</path>
    <filename>xml_8h</filename>
    <includes id="mol_8h" name="mol.h" local="no" imported="no">openbabel/mol.h</includes>
    <includes id="obconversion_8h" name="obconversion.h" local="no" imported="no">openbabel/obconversion.h</includes>
    <includes id="obmolecformat_8h" name="obmolecformat.h" local="no" imported="no">openbabel/obmolecformat.h</includes>
    <class kind="class">OpenBabel::XMLConversion</class>
    <class kind="class">OpenBabel::XMLBaseFormat</class>
    <class kind="class">OpenBabel::XMLMoleculeFormat</class>
    <namespace>OpenBabel</namespace>
  </compound>
  <compound kind="page">
    <name>mainclasses</name>
    <title>Classes Overview</title>
    <filename>mainclasses</filename>
  </compound>
  <compound kind="page">
    <name>changes23</name>
    <title>What&apos;s New in Version 2.3</title>
    <filename>changes23</filename>
  </compound>
  <compound kind="page">
    <name>changes22</name>
    <title>What&apos;s New in Version 2.2</title>
    <filename>changes22</filename>
  </compound>
  <compound kind="page">
    <name>changes21</name>
    <title>What&apos;s New in Version 2.1</title>
    <filename>changes21</filename>
  </compound>
  <compound kind="page">
    <name>canonical_code_algorithm</name>
    <title>Canonical Coding Algorithm</title>
    <filename>canonical_code_algorithm</filename>
    <docanchor file="canonical_code_algorithm">canonical_from</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_bondtype</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_stereo</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_closure</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_atomtype</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_opt1</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_introduction</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_opt2</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_code</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_opt3</docanchor>
    <docanchor file="canonical_code_algorithm">Topological</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_opt4</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_opt5</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_labeling</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_fragments</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_optimization</docanchor>
    <docanchor file="canonical_code_algorithm">canonical_canonical</docanchor>
  </compound>
  <compound kind="page">
    <name>cmake_project</name>
    <title>Creating your own projects using CMake</title>
    <filename>cmake_project</filename>
  </compound>
  <compound kind="page">
    <name>generic_data</name>
    <title>Working with Generic Data</title>
    <filename>generic_data</filename>
    <docanchor file="generic_data">generic_data_str_num</docanchor>
    <docanchor file="generic_data">generic_data_design</docanchor>
    <docanchor file="generic_data">generic_data_specific_by_format</docanchor>
    <docanchor file="generic_data">generic_data_specific</docanchor>
    <docanchor file="generic_data">generic_data_intro</docanchor>
    <docanchor file="generic_data">generic_data_specific_by_data</docanchor>
    <docanchor file="generic_data">generic_data_formats</docanchor>
    <docanchor file="generic_data">generic_data_template</docanchor>
  </compound>
  <compound kind="group">
    <name>main</name>
    <title>Getting Started</title>
    <filename>group__main.html</filename>
    <page>group__main</page>
    <page>group__main</page>
    <page>group__main</page>
  </compound>
  <compound kind="group">
    <name>stereo</name>
    <title>Stereochemistry</title>
    <filename>group__stereo.html</filename>
    <class kind="class">OpenBabel::OBCisTransStereo</class>
    <class kind="class">OpenBabel::OBSquarePlanarStereo</class>
    <class kind="class">OpenBabel::OBStereo</class>
    <class kind="struct">OpenBabel::OBStereoUnit</class>
    <class kind="class">OpenBabel::OBStereoBase</class>
    <class kind="class">OpenBabel::OBStereoFacade</class>
    <class kind="class">OpenBabel::OBTetrahedralStereo</class>
    <class kind="class">OpenBabel::OBTetraNonPlanarStereo</class>
    <member kind="typedef">
      <type>std::vector&lt; OBStereoUnit &gt;</type>
      <name>OBStereoUnitSet</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga042299211c7a52f5aee1975d32820af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBStereoUnitSet &gt;</type>
      <name>OBStereoUnitSetOfSets</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga75c7c66edf2555b974417a77968ebb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gadf8c733643a40f5135c2e0d8a32764c4</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBCisTransStereo &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaa6a386afa954e168b8c1c5b15c2d6f27</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBCisTransStereo::Config &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga9a6442f8a6cda1d0eb673a0199c9226d</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBSquarePlanarStereo &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaca674872623ccf5104d49756ed4f8c22</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBSquarePlanarStereo::Config &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga30c6cc4c63f918bad5ed504e0e53edc6</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBTetrahedralStereo &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaa6dbf885c726a181852e742bb0b9a65d</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBTetrahedralStereo::Config &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PerceiveStereo</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gae7aedffc6994cf26d16524389c56bdac</anchor>
      <arglist>(OBMol *mol, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga305c9600a3a336da16683baa395e20f4</anchor>
      <arglist>(OBMol *mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaebcf38fd76c5d76fffbae808b8571f9b</anchor>
      <arglist>(OBMol *mol, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga419e494a34740f1f8003acabfa30a95b</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga35e07645a245db366b115f0dc20542fd</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gab85c5ef4c9416ee7af02b21658fe9de2</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gac3049b86debe9059b851825b29b1557c</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga7e1ba3a4ac33b0c6404b0d960cc53d00</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga98528c3002ed718695ccfaf031ca3f04</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, const std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TetStereoToWedgeHash</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga182a53150e1793ac1ec14958afb05f17</anchor>
      <arglist>(OBMol &amp;mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; &amp;updown, std::map&lt; OBBond *, OBStereo::Ref &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; OBBond * &gt;</type>
      <name>GetUnspecifiedCisTrans</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga63e739a42d88ac64ed77c07d73866a45</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoRefToImplicit</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga9b44683d071146220a97390283944f70</anchor>
      <arglist>(OBMol &amp;mol, OBStereo::Ref atomId)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gac74fff254a639ede4d92a59fa44318a6</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>OBStereoUnitSet</type>
      <name>FindStereogenicUnits</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaebf264394d502844b99b1dbe031ea185</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses)</arglist>
    </member>
    <member kind="function">
      <type>OBStereoUnitSet</type>
      <name>FindStereogenicUnits</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga0f62e73467d2059ad28d544633634862</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses, const Automorphisms &amp;automorphisms)</arglist>
    </member>
    <page>group__stereo</page>
  </compound>
  <compound kind="group">
    <name>conformer</name>
    <title>Conformer Searching</title>
    <filename>group__conformer.html</filename>
    <class kind="class">OpenBabel::OBConformerFilter</class>
    <class kind="class">OpenBabel::OBConformerFilters</class>
    <class kind="class">OpenBabel::OBStericConformerFilter</class>
    <class kind="class">OpenBabel::OBConformerScore</class>
    <class kind="class">OpenBabel::OBRMSDConformerScore</class>
    <class kind="class">OpenBabel::OBEnergyConformerScore</class>
    <class kind="class">OpenBabel::OBConformerSearch</class>
    <page>group__conformer</page>
  </compound>
  <compound kind="group">
    <name>substructure</name>
    <title>Substructure Searching</title>
    <filename>group__substructure.html</filename>
    <class kind="class">OpenBabel::OBIsomorphismMapper</class>
    <class kind="class">OpenBabel::OBSmartsPattern</class>
    <class kind="class">OpenBabel::OBQueryAtom</class>
    <class kind="class">OpenBabel::OBQueryBond</class>
    <class kind="class">OpenBabel::OBQuery</class>
    <member kind="typedef">
      <type>OBIsomorphismMapper::Mapping</type>
      <name>Automorphism</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9373f6c3f788157de6f03c9403be34c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBIsomorphismMapper::Mappings</type>
      <name>Automorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6179e6c11d4f797e8d0ef6ac5c9f25a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MapsTo</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga4edd651fb377c60f3b7ac2f48b7f5e57</anchor>
      <arglist>(const OBIsomorphismMapper::Mapping &amp;map, unsigned int queryIndex, unsigned int &amp;queriedIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga16841a730cf92c8e51a804ad8d746307</anchor>
      <arglist>(OBMol *mol, std::vector&lt; OBIsomorphismMapper::Mapping &gt; &amp;aut, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga7753422526ba34488edf393803aabad7</anchor>
      <arglist>(OBMol *mol, std::vector&lt; OBIsomorphismMapper::Mapping &gt; &amp;aut, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6a2b6b84fc5e4432152e29001877c59b</anchor>
      <arglist>(OBIsomorphismMapper::Functor &amp;functor, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileMoleculeQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9307ec0c55a4d2b7ee933b53a3a84ce5</anchor>
      <arglist>(OBMol *mol, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileSmilesQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga87fabf6ed3625406fe5d117b134b5f16</anchor>
      <arglist>(const std::string &amp;smiles, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <page>group__substructure</page>
  </compound>
  <compound kind="group">
    <name>plugins</name>
    <title>Plugins</title>
    <filename>group__plugins.html</filename>
    <class kind="struct">OpenBabel::CharPtrLess</class>
    <class kind="class">OpenBabel::OBPlugin</class>
    <file>plugin.h</file>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_PLUGIN</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadd740e2a386b7db3e1f0e271cbe8a3f1</anchor>
      <arglist>(BaseClass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OB_STATIC_PLUGIN</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaac917d0f317751ba3ac45628fb467e58</anchor>
      <arglist>(className, instanceName)</arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga2f6f0f4ddec879439f78de686c459fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TypeID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga45dfda1fb13d3c26ab7f8f7631e3351c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>EnableStaticPlugins</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga7a0297c3c2a3fa58bbd5e321b900ddec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
    <page>group__plugins</page>
  </compound>
  <compound kind="class">
    <name>DLHandler</name>
    <filename>classDLHandler.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getConvDirectory</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>a796e3b4c52affa6141048aa12d326ac5</anchor>
      <arglist>(std::string &amp;convPath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>findFiles</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>afbc430181268f2ea18cf3f5a9a6198ab</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;pattern, const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>findFiles</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>a87db0476cc4091a16b9e7a67309253dc</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>openLib</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>aace44b593957d50c6396a1e23d67189d</anchor>
      <arglist>(const std::string &amp;lib_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getFormatFilePattern</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>a853b3b684971405e16e9f2b464b950bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getSeparator</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>ae7b0bd97cdb5896fd2731f2d856f525a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Sleep</name>
      <anchorfile>classDLHandler.html</anchorfile>
      <anchor>ac640b35541b94f0d35525de80c2b003d</anchor>
      <arglist>(int n)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel</name>
    <filename>namespaceOpenBabel.html</filename>
    <namespace>OpenBabel::OBGenericDataType</namespace>
    <namespace>OpenBabel::detail</namespace>
    <namespace>OpenBabel::OBAminoAcidProperty</namespace>
    <namespace>OpenBabel::OBResidueAtomProperty</namespace>
    <namespace>OpenBabel::OBResidueIndex</namespace>
    <namespace>OpenBabel::OBResidueProperty</namespace>
    <class kind="class">OpenBabel::AliasData</class>
    <class kind="class">OpenBabel::OBAtom</class>
    <class kind="class">OpenBabel::OBAtomClassData</class>
    <class kind="class">OpenBabel::OBGenericData</class>
    <class kind="class">OpenBabel::OBBase</class>
    <class kind="class">OpenBabel::OBBitVec</class>
    <class kind="class">OpenBabel::OBBond</class>
    <class kind="class">OpenBabel::OBBondTyper</class>
    <class kind="class">OpenBabel::OBBuilder</class>
    <class kind="class">OpenBabel::OBChainsParser</class>
    <class kind="class">OpenBabel::OBChargeModel</class>
    <class kind="class">OpenBabel::OBConformerFilter</class>
    <class kind="class">OpenBabel::OBConformerFilters</class>
    <class kind="class">OpenBabel::OBStericConformerFilter</class>
    <class kind="class">OpenBabel::OBConformerScore</class>
    <class kind="class">OpenBabel::OBRMSDConformerScore</class>
    <class kind="class">OpenBabel::OBEnergyConformerScore</class>
    <class kind="class">OpenBabel::OBConformerSearch</class>
    <class kind="class">OpenBabel::OBGlobalDataBase</class>
    <class kind="class">OpenBabel::OBElement</class>
    <class kind="class">OpenBabel::OBElementTable</class>
    <class kind="class">OpenBabel::OBIsotopeTable</class>
    <class kind="class">OpenBabel::OBTypeTable</class>
    <class kind="class">OpenBabel::OBResidueData</class>
    <class kind="class">OpenBabel::OBDescriptor</class>
    <class kind="class">OpenBabel::OBFingerprint</class>
    <class kind="struct">OpenBabel::FptIndexHeader</class>
    <class kind="struct">OpenBabel::FptIndex</class>
    <class kind="class">OpenBabel::FastSearch</class>
    <class kind="class">OpenBabel::FastSearchIndexer</class>
    <class kind="struct">OpenBabel::LineSearchType</class>
    <class kind="class">OpenBabel::OBFFParameter</class>
    <class kind="class">OpenBabel::OBFFCalculation2</class>
    <class kind="class">OpenBabel::OBFFCalculation3</class>
    <class kind="class">OpenBabel::OBFFCalculation4</class>
    <class kind="class">OpenBabel::OBFFConstraint</class>
    <class kind="class">OpenBabel::OBFFConstraints</class>
    <class kind="class">OpenBabel::OBForceField</class>
    <class kind="class">OpenBabel::OBFormat</class>
    <class kind="class">OpenBabel::OBCommentData</class>
    <class kind="class">OpenBabel::OBExternalBond</class>
    <class kind="class">OpenBabel::OBExternalBondData</class>
    <class kind="class">OpenBabel::OBPairData</class>
    <class kind="class">OpenBabel::OBPairTemplate</class>
    <class kind="class">OpenBabel::OBSetData</class>
    <class kind="class">OpenBabel::OBVirtualBond</class>
    <class kind="class">OpenBabel::OBRingData</class>
    <class kind="class">OpenBabel::OBUnitCell</class>
    <class kind="class">OpenBabel::OBConformerData</class>
    <class kind="class">OpenBabel::OBSymmetryData</class>
    <class kind="class">OpenBabel::OBTorsion</class>
    <class kind="class">OpenBabel::OBTorsionData</class>
    <class kind="class">OpenBabel::OBAngle</class>
    <class kind="class">OpenBabel::OBAngleData</class>
    <class kind="class">OpenBabel::OBChiralData</class>
    <class kind="class">OpenBabel::OBSerialNums</class>
    <class kind="class">OpenBabel::OBVibrationData</class>
    <class kind="class">OpenBabel::OBDOSData</class>
    <class kind="class">OpenBabel::OBOrbital</class>
    <class kind="class">OpenBabel::OBOrbitalData</class>
    <class kind="class">OpenBabel::OBElectronicTransitionData</class>
    <class kind="class">OpenBabel::OBRotationData</class>
    <class kind="class">OpenBabel::OBVectorData</class>
    <class kind="class">OpenBabel::OBMatrixData</class>
    <class kind="class">OpenBabel::OBGraphSym</class>
    <class kind="class">OpenBabel::OBGrid</class>
    <class kind="class">OpenBabel::OBFloatGrid</class>
    <class kind="class">OpenBabel::OBProxGrid</class>
    <class kind="class">OpenBabel::OBScoreGrid</class>
    <class kind="class">OpenBabel::OBGridData</class>
    <class kind="class">OpenBabel::OBGroupContrib</class>
    <class kind="class">OpenBabel::OBInternalCoord</class>
    <class kind="class">OpenBabel::OBIsomorphismMapper</class>
    <class kind="class">OpenBabel::OBRateData</class>
    <class kind="class">OpenBabel::OBNasaThermoData</class>
    <class kind="class">OpenBabel::FilteringInputStreambuf</class>
    <class kind="class">OpenBabel::LineEndingExtractor</class>
    <class kind="class">OpenBabel::OBLocale</class>
    <class kind="class">OpenBabel::OBMol</class>
    <class kind="class">OpenBabel::GasteigerState</class>
    <class kind="class">OpenBabel::OBGastChrg</class>
    <class kind="class">OpenBabel::OBConversion</class>
    <class kind="class">OpenBabel::OBError</class>
    <class kind="class">OpenBabel::OBMessageHandler</class>
    <class kind="class">OpenBabel::obLogBuf</class>
    <class kind="class">OpenBabel::OBMolAtomIter</class>
    <class kind="class">OpenBabel::OBMolAtomDFSIter</class>
    <class kind="class">OpenBabel::OBMolAtomBFSIter</class>
    <class kind="class">OpenBabel::OBMolBondBFSIter</class>
    <class kind="class">OpenBabel::OBMolBondIter</class>
    <class kind="class">OpenBabel::OBAtomAtomIter</class>
    <class kind="class">OpenBabel::OBAtomBondIter</class>
    <class kind="class">OpenBabel::OBResidueIter</class>
    <class kind="class">OpenBabel::OBResidueAtomIter</class>
    <class kind="class">OpenBabel::OBMolAngleIter</class>
    <class kind="class">OpenBabel::OBMolTorsionIter</class>
    <class kind="class">OpenBabel::OBMolPairIter</class>
    <class kind="class">OpenBabel::OBMolRingIter</class>
    <class kind="class">OpenBabel::OBMoleculeFormat</class>
    <class kind="class">OpenBabel::OBStopwatch</class>
    <class kind="class">OpenBabel::OBSqrtTbl</class>
    <class kind="class">OpenBabel::triple</class>
    <class kind="class">OpenBabel::quad</class>
    <class kind="class">OpenBabel::OBOp</class>
    <class kind="class">OpenBabel::OpTransform</class>
    <class kind="union">OpenBabel::_AtomExpr</class>
    <class kind="union">OpenBabel::_BondExpr</class>
    <class kind="struct">OpenBabel::BondSpec</class>
    <class kind="struct">OpenBabel::AtomSpec</class>
    <class kind="struct">OpenBabel::Pattern</class>
    <class kind="struct">OpenBabel::ParseState</class>
    <class kind="class">OpenBabel::OBSmartsPattern</class>
    <class kind="class">OpenBabel::OBSmartsMatcher</class>
    <class kind="class">OpenBabel::OBSSMatch</class>
    <class kind="class">OpenBabel::patty</class>
    <class kind="class">OpenBabel::OBChemTsfm</class>
    <class kind="class">OpenBabel::OBPhModel</class>
    <class kind="struct">OpenBabel::CharPtrLess</class>
    <class kind="class">OpenBabel::OBPlugin</class>
    <class kind="class">OpenBabel::OBPointGroup</class>
    <class kind="class">OpenBabel::OBQueryAtom</class>
    <class kind="class">OpenBabel::OBQueryBond</class>
    <class kind="class">OpenBabel::OBQuery</class>
    <class kind="struct">OpenBabel::DoubleType</class>
    <class kind="class">OpenBabel::OBRandom</class>
    <class kind="class">OpenBabel::OBReaction</class>
    <class kind="class">OpenBabel::OBResidue</class>
    <class kind="class">OpenBabel::OBRing</class>
    <class kind="class">OpenBabel::OBRingSearch</class>
    <class kind="class">OpenBabel::OBRTree</class>
    <class kind="class">OpenBabel::OBRotamerList</class>
    <class kind="class">OpenBabel::OBRotorRule</class>
    <class kind="class">OpenBabel::OBRotorRules</class>
    <class kind="class">OpenBabel::OBRotor</class>
    <class kind="class">OpenBabel::OBRotorList</class>
    <class kind="class">OpenBabel::OBRotorKeys</class>
    <class kind="class">OpenBabel::OBSpectrophore</class>
    <class kind="class">OpenBabel::OBText</class>
    <class kind="struct">OpenBabel::DeleteObject</class>
    <class kind="class">OpenBabel::OBAtomTyper</class>
    <class kind="class">OpenBabel::OBAromaticTyper</class>
    <class kind="class">OpenBabel::OBRingTyper</class>
    <class kind="class">OpenBabel::XMLConversion</class>
    <class kind="class">OpenBabel::XMLBaseFormat</class>
    <class kind="class">OpenBabel::XMLMoleculeFormat</class>
    <class kind="class">OpenBabel::OBAlign</class>
    <class kind="class">OpenBabel::matrix3x3</class>
    <class kind="class">OpenBabel::SpaceGroup</class>
    <class kind="class">OpenBabel::transform3d</class>
    <class kind="class">OpenBabel::vector3</class>
    <class kind="class">OpenBabel::OBCisTransStereo</class>
    <class kind="class">OpenBabel::OBSquarePlanarStereo</class>
    <class kind="class">OpenBabel::OBStereo</class>
    <class kind="struct">OpenBabel::OBStereoUnit</class>
    <class kind="class">OpenBabel::OBStereoBase</class>
    <class kind="class">OpenBabel::OBStereoFacade</class>
    <class kind="class">OpenBabel::OBTetrahedralStereo</class>
    <class kind="class">OpenBabel::OBTetraNonPlanarStereo</class>
    <class kind="class">OpenBabel::OBTetraPlanarStereo</class>
    <class kind="class">OpenBabel::OBDepict</class>
    <class kind="class">OpenBabel::OBColor</class>
    <class kind="class">OpenBabel::OBFontMetrics</class>
    <class kind="class">OpenBabel::OBPainter</class>
    <member kind="typedef">
      <type>OBAtom</type>
      <name>OBNodeBase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac0863bf2485bd66ba3afa6e50ddc20f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBBond * &gt;::iterator</type>
      <name>OBBondIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a54495d3eb8f9749d0237e6bda59e0abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBAtom * &gt;::iterator</type>
      <name>OBAtomIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aed11ccd81d7abaccbdf10486a5ae0402</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBGenericData * &gt;::iterator</type>
      <name>OBDataIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5ca88aa35c43da1b791c7703ec8978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBBond</type>
      <name>OBEdgeBase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad30fc0fda0a0c8a6f7d22b8202af0dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Template</type>
      <name>Template</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8eff09d0456c2308e2afb34e824d9c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>RotorKey</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a087fe4bdc2d57b56addb4b9fd7fc0415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RotorKey &gt;</type>
      <name>RotorKeys</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5ae0fb6c3d3406efb549fbc9f8c26f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBPairTemplate&lt; int &gt;</type>
      <name>OBPairInteger</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0bdf8334aad62a6bb7ad50f58060c9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBPairTemplate&lt; double &gt;</type>
      <name>OBPairFloatingPoint</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5ba6d4475315df1100427dc98074c087</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBIsomorphismMapper::Mapping</type>
      <name>Automorphism</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9373f6c3f788157de6f03c9403be34c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBIsomorphismMapper::Mappings</type>
      <name>Automorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6179e6c11d4f797e8d0ef6ac5c9f25a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OBPlugin::PluginIterator</type>
      <name>Formatpos</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8f32238b69be1e83980d0ff3a90b206f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union OpenBabel::_AtomExpr</type>
      <name>AtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8df92ddf377e8839e49c4c1d4a617f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union OpenBabel::_BondExpr</type>
      <name>BondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac7bd9a9f7066eb36f2cfa568d180cb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBResidue * &gt;::iterator</type>
      <name>OBResidueIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa52bc907b6b29c913a85671c48ff8ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBRotor * &gt;::iterator</type>
      <name>OBRotorIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a434f394d0613a8ef6c119670ff49710f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; transform3d * &gt;::const_iterator</type>
      <name>transform3dIterator</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7ae0ba0c317c360c22eaa4b481e2dc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBStereoUnit &gt;</type>
      <name>OBStereoUnitSet</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga042299211c7a52f5aee1975d32820af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; OBStereoUnitSet &gt;</type>
      <name>OBStereoUnitSetOfSets</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga75c7c66edf2555b974417a77968ebb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union OpenBabel::_ByteCode</type>
      <name>ByteCode</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abcd91e4b018d533740f00f35ae44e4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct OpenBabel::adjustedlist</type>
      <name>adjustedlist</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a84aaa93d3e94f64164e85131f205e919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adjustedlist</type>
      <name>neigbourlist</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5f08cae8b4d627c8932dbfa639ce9205</anchor>
      <arglist>[NATOMSMAX]</arglist>
    </member>
    <member kind="enumeration">
      <name>DataOrigin</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>any</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fileformatInput</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>userInput</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>perceived</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>external</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>local</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>atomreftype</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>output</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>input</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>calcvolume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>score_t</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Undefined</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLP</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ChemScore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>obMessageLevel</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obWarning</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obInfo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obAuditMsg</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>obDebug</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>errorQualifier</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91e6912277f7537a670952698f7b2d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>always</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>onceOnly</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_ID</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaa9ec83f377b3c4e2b987789c1f273a8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_HALL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaa732f4d3d79b99f8b9364cfc16e8003e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_HM</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaac6dbb396b7703e533fee3676da46fec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE_GROUP_TRANSFORM</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b7b47dd702d9e331586d485013fd1eaa6150efae0567911e2f8c49bacdce6ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Left</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a9d4d8b0b72fc2659da772d761a3c5ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Right</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960ad48f7af8c070184f3774c8e85854eb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Up</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960a57a7edcbc04d6175683383cad5c3e0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Down</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9bdc3014f3d54c426b6d2df10de4960abcf8c79e9a5f5f9d606fb35645a0fb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>OBReleaseVersion</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a456fbf388c19a1a63a95fe60d28dd869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Tanimoto</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aeb3b137500bda8573ee1aa5757011a66</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CanonicalLabels</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62d602f9ffb93ae1f37c2d3bbf010d77</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, std::vector&lt; unsigned int &gt; &amp;canonical_labels, const OBBitVec &amp;mask=OBBitVec(), int maxSeconds=5, bool onlyOne=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GraphPotentials</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4c135379236431c7436651de978ef32</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; double &gt; &amp;pot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct_g_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a49d9094d3843107b37a072e7e4597fc3</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct_c_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae050b0cbe133308c07688d2438155504</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcSignedVolume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac8f591b34d70fd0063b836ddf6d8cdbc</anchor>
      <arglist>(OBMol &amp;mol, OBAtom *, bool ReZeroZ=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>signed_volume</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a07c3e3dff340f78121cc2c15da53cdb2</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetChirality</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad7009a91e72c28783be5346611efde3e</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; int &gt; &amp;chirality)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetParity4Ref</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7483e613b770424c7f1ff797900b9987</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; pref)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CorrectChirality</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abefbf418290927a56b3d124d3cc646d7</anchor>
      <arglist>(OBMol &amp;mol, OBAtom *atm, atomreftype i=input, atomreftype o=output)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DoComparison</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4f1b41f797d4f6def5e87727ab6baf39</anchor>
      <arglist>(char ch1, char ch2, T &amp;val, T &amp;filterval)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MapsTo</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga4edd651fb377c60f3b7ac2f48b7f5e57</anchor>
      <arglist>(const OBIsomorphismMapper::Mapping &amp;map, unsigned int queryIndex, unsigned int &amp;queriedIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga16841a730cf92c8e51a804ad8d746307</anchor>
      <arglist>(OBMol *mol, std::vector&lt; OBIsomorphismMapper::Mapping &gt; &amp;aut, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga7753422526ba34488edf393803aabad7</anchor>
      <arglist>(OBMol *mol, std::vector&lt; OBIsomorphismMapper::Mapping &gt; &amp;aut, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindAutomorphisms</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga6a2b6b84fc5e4432152e29001877c59b</anchor>
      <arglist>(OBIsomorphismMapper::Functor &amp;functor, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab5741f7ec581130f899f17f4d9477aea</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab323a3745c477d9eb4c796786db39075</anchor>
      <arglist>(double *m, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac09eff5e59b6a7dd424dc71f4a37e464</anchor>
      <arglist>(double **m, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3b2b9be34ace132aa9506d9ee043824f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a067494738d0f55b9df745866cdc3fe56</anchor>
      <arglist>(double *c, double *a, double *b, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mult_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37830c949ab96aad9b5041a82895ba8e</anchor>
      <arglist>(double **c, double **a, double **b, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e5ee2fd1515457cb4a6e9394a5a14ff</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m, double &amp;det)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afb96cdaafd5073c2e806d36ec4e7eef4</anchor>
      <arglist>(double *m, double &amp;det, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afa4aad5bde182eebe57cedcf1727b2fc</anchor>
      <arglist>(double **m, double &amp;det, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8580b3fa2a0435b2d073c22097d1d35e</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab06c9b9e02affa91406755a0b9fb28e1</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b2a8069e01dd4287fb85f90a991972c</anchor>
      <arglist>(double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a050184ff6264447d6923e1be4df061b3</anchor>
      <arglist>(double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_ff_f</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8a3508df81e444f875d5f493a1bcbe28</anchor>
      <arglist>(double **src, double *dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert_matrix_f_ff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acbf2348ce7eae39aca355a630f06484c</anchor>
      <arglist>(double *src, double **dst, int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hydrogenValency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47053116206f7c8cf7b278aec7e35cb1</anchor>
      <arglist>(int na)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxValency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa51b217d32346d4f341a227be63de160</anchor>
      <arglist>(int na)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a54363eb76ba264ec754bece9848198c8</anchor>
      <arglist>(OBMol *pmol, const int nH[], int bondOrders[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a207029ffc607d34863546dddbe014d6b</anchor>
      <arglist>(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; nHydr, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; int &gt; &amp;bondOrders, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec2830d51995ac9802efa4aad43121ca</anchor>
      <arglist>(OBMol *pmol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a827934a434ef208e2644aecb679ec930</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateDiagram</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a742566d425db558fa968c725f8a708cc</anchor>
      <arglist>(OBMol *pmol, std::ostream &amp;ofs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSearch</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a60aab5dcc934001076e5079960cb9be4</anchor>
      <arglist>(OBMol *query, OBMol *structure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fragmentSearch</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa0561905f67fffeb3fae74b786fab642</anchor>
      <arglist>(const std::vector&lt; int &gt; aPositionQuery, const std::vector&lt; int &gt; iA1Query, const std::vector&lt; int &gt; iA2Query, const std::vector&lt; int &gt; bondTypesQuery, const std::vector&lt; int &gt; aPositionStructure, const std::vector&lt; int &gt; iA1Structure, const std::vector&lt; int &gt; iA2Structure, const std::vector&lt; int &gt; bondTypesStructure, int nAtomsQuery, int nBondsQuery, int nAtomsStructure, int nBondsStructure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>equivalenceList</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a16e9982dc3b96f14397fe55ede7b8f1f</anchor>
      <arglist>(OBMol *pmol, std::vector&lt; int &gt; &amp;eqList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>equivalenceList</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e78d25ada5c11fba4e216e1d782e5b7</anchor>
      <arglist>(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; bondTypes, std::vector&lt; int &gt; &amp;eqList, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adaa889d3747ea9e2ba1a83207556dce3</anchor>
      <arglist>(OBMol *molecule, OBMol *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStereoLists</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abce282c45ee77ea965aaacd47b4e8d72</anchor>
      <arglist>(OBMol *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e765f8943f7aa7b50aca9380196e96</anchor>
      <arglist>(OBMol *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBondMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acd680ed8783717254f074205cd6b24a4</anchor>
      <arglist>(OBMol *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[MAXBONDS][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementAtomStereo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3c50491b940d1a3d368bf7eba3bebfa1</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementBondStereo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a417a2925a2ec60c86ff3edc04ce4142c</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groupRedraw</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a23997cd29f45df86f90e4f7de02baccd</anchor>
      <arglist>(OBMol *pmol, int bondN, int atomN, bool atomNInGroup)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>canonizeMCDL</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a82011594cefb0a924a4cc938800de614</anchor>
      <arglist>(const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFormula</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6a41a690c691e47bc63facef0e2e449d</anchor>
      <arglist>(const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareTest</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aaa14c59df78025ce6e8dfd3f27feb106</anchor>
      <arglist>(OBMol *pmol, std::ostream &amp;ofs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32ba50e0b43cb1dfdf1978d1e72099c5</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac9aac27fe3b12d7201f8eb7cb95a3c57</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CartesianToInternal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7145217d4de73e243d2d3888dac404ba</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InternalToCartesian</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae82e7b7b74e5212eada681c15afb77f4</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NewExtension</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac1c62bdae6cf7a9195c470e7d0e29883</anchor>
      <arglist>(string &amp;src, char *ext)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_rmat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8aa7959b427e1c630f14732c2ad642c8</anchor>
      <arglist>(double *, double *, double *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ob_make_rmat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7e02cd2874a2a4826c8587da507f62ef</anchor>
      <arglist>(double mat[3][3], double rmat[9])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>qtrfit</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a594933a93529376dbae80405cf23afa8</anchor>
      <arglist>(double *r, double *f, int size, double u[3][3])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>superimpose</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c5374c2c0b42dee2fd36cd475a3cb1c</anchor>
      <arglist>(double *, double *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a60625165cc16932d1c2f34976dbc54dd</anchor>
      <arglist>(double *, double m[3][3], unsigned)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calc_rms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a25d610b9255993505f2dbdd9690d068f</anchor>
      <arglist>(double *r, double *f, unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OBCompareInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4216f2e0672bf6a9ee72d3029838a213</anchor>
      <arglist>(const int &amp;a, const int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OBCompareUnsigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abb48ec7a1b3301248a1147cf2dbbe600</anchor>
      <arglist>(const unsigned int &amp;a, const unsigned int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNear</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a362770307f86a3b9acd494d9ccbbcf51</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNearZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e51098e105d63b04b5517299d1b772</anchor>
      <arglist>(const double &amp;a, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNan</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a227ab5b29e8122dd6d8ac76d2b58778a</anchor>
      <arglist>(const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNegligible</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae3802301a4e7c389095313a77861a959</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double precision=1e-11)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af464b3279bc3db8c58ca552ddb0e8e79</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double precision=1e-11)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox_pos</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a470b9e69978e49f27b85b48077bd7c72</anchor>
      <arglist>(const double &amp;a, const double &amp;b, const double precision=1e-11)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanBeSquared</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95b1c21368d148cb45ac6f604984c357</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e68658ca81568e214ebedb8f6c4bd10</anchor>
      <arglist>(std::ifstream &amp;fs, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0d523299532d6b282919923e731771ee</anchor>
      <arglist>(std::ofstream &amp;fs, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SmartsLexReplace</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b397e6876fbb7f13d0e4a3cac7edfdc</anchor>
      <arglist>(std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>EnableStaticPlugins</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga7a0297c3c2a3fa58bbd5e321b900ddec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileMoleculeQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga9307ec0c55a4d2b7ee933b53a3a84ce5</anchor>
      <arglist>(OBMol *mol, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileSmilesQuery</name>
      <anchorfile>group__substructure.html</anchorfile>
      <anchor>ga87fabf6ed3625406fe5d117b134b5f16</anchor>
      <arglist>(const std::string &amp;smiles, const OBBitVec &amp;mask=OBBitVec())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DoubleMultiply</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a28466e08c61853737ac9bdeaeee495cc</anchor>
      <arglist>(unsigned int, unsigned int, DoubleType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DoubleAdd</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7fe18b3a86010f2fbbeeda7a6ed635a4</anchor>
      <arglist>(DoubleType *, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>DoubleModulus</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa995f2456608bb27a86fef9460f9e8e0</anchor>
      <arglist>(DoubleType *, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompareRingSize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8ae850aac19b7a1ff3c02b6f3c17d36f</anchor>
      <arglist>(const OBRing *, const OBRing *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Swab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8b1ba3c73d4038fd69729fbeb588008a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1607444ae7cfbd6dcae449f9cb77b0e3</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tokenize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a932114672402053a4208861b2b600506</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n\r&quot;, int limit=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>Trim</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae8d9d7dd615b5fa7b533c075fe744d8f</anchor>
      <arglist>(std::string &amp;txt)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a13c0a29de921d7995ba8a4ddd0196c99</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>ignore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9858bede3a0f272573c0173a947bea18</anchor>
      <arglist>(std::istream &amp;ifs, const std::string &amp;txt)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>OpenDatafile</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>add34ce6b9be332e5d87fd5087d4dc38d</anchor>
      <arglist>(std::ifstream &amp;fs, const std::string &amp;filename, const std::string &amp;envvar=&quot;BABEL_DATADIR&quot;)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>center_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af1a9769dcdfc9bb77a3747a3c89c3d03</anchor>
      <arglist>(double *, int)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a70c653ee69fdbd27f77d430e4aed3cad</anchor>
      <arglist>(std::ostream &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator+</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adc7b25b0ba45ce8f90a2519c03322e4a</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator-</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa2e0e5d4e59766809b5b61ab9b513a2e</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator-</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8bcf1e708be0fbc503f83952c3a99cd4</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a56b20579149ab8b5807475d4302c33a2</anchor>
      <arglist>(const double &amp;c, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac5dcc9191fa15d332a546a975cb72952</anchor>
      <arglist>(const vector3 &amp;v, const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator/</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af855844c28abaaafbf21c5835a8e81d4</anchor>
      <arglist>(const vector3 &amp;v, const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2ed22257c15dc44557c1c275c99d127d</anchor>
      <arglist>(const matrix3x3 &amp;m, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32a70eb5e04f4e10a386089723f05b2a</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>cross</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a68dc2c35a1e58febaa9e13cd82e3a50f</anchor>
      <arglist>(const vector3 &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>vectorAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a00e2879019f2fb0fc689a7e5cb5d2008</anchor>
      <arglist>(const vector3 &amp;v1, const vector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcTorsionAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62d62b3487ca8969bdfbd7c434da564e</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2PlaneSigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1fa4ebe11664cfe4759ea7ccaa3abbb9</anchor>
      <arglist>(vector3 a, vector3 b, vector3 c, vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2Plane</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad0e0c09ef7c92973447c46d3ad3f3f8d</anchor>
      <arglist>(vector3 a, vector3 b, vector3 c, vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2PlaneAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29227290e6e6931c009942836a21e5df</anchor>
      <arglist>(const vector3 a, const vector3 b, const vector3 c, const vector3 d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Point2Line</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32827b2955824019ff9a7e0a4ebfcd64</anchor>
      <arglist>(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ApplyRotMatToBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a56bd19e6ce3d11cd0ccdc0420e91ada3</anchor>
      <arglist>(OBMol &amp;mol, matrix3x3 &amp;m, OBAtom *a1, OBAtom *a2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator|</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a48ed8b37310a8d7153a64309f09901a0</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator&amp;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a327b6158a69368530d30de5ce06cc7a5</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator^</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa2cf1233a6c6ce53b79f94b7a60d2d2a</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>operator-</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a682eec6ce003f48a6098d6700e3cedba</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac001b331f648fbbd8590576f59d4d2ab</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3ba5fcca1ecb1241049411be7017186d</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a54358a339fc06df028bb5fbe403b0032</anchor>
      <arglist>(std::istream &amp;is, OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a42db9af61dccd8f586f358058b78d1cc</anchor>
      <arglist>(std::ostream &amp;os, const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetCorrectedBondVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a69c4665c3756720ac6f0d62b2488fdd6</anchor>
      <arglist>(OBAtom *atom1, OBAtom *atom2, int bondOrder=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompareBondPairSecond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac166197716f00da13cdac1c0cee85975</anchor>
      <arglist>(const std::pair&lt; OBBond *, unsigned int &gt; &amp;a, const std::pair&lt; OBBond *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNbrs</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a723b609c4e82a3b0ae91f4aa44196740</anchor>
      <arglist>(OBBitVec &amp;fragment, OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>getFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a04fb8cae80f1866e2921853c509b07b4</anchor>
      <arglist>(OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds=std::vector&lt; OBBond * &gt;())</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>getFragment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0e3ffef22e9d0e3a960e1ddc3c7a3af0</anchor>
      <arglist>(OBAtom *atom, OBAtom *skip, const OBBitVec &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFerroceneBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>add2cdb4d7ec3918bac8fa18eb32d4d4c</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMetalloceneBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0e9fff5044095331af29c5b0781557c4</anchor>
      <arglist>(std::vector&lt; OBBond * &gt; &amp;bonds, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ByteCode *</type>
      <name>AllocateByteCode</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a818fd93f0aa1e1f5b3c63bbbc8013cca</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DeleteByteCode</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acc9426f6c6d58198a97d8c726660559d</anchor>
      <arglist>(ByteCode *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FatalMemoryError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a59c2e046bb935ac3eba0d3b003d10176</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateByteCodes</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1748035db13037545433f80148a7c928</anchor>
      <arglist>(ByteCode **node, int resid, int curr, int prev, int bond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Toupper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1ea11acf2b1952b517470849055dd9d9</anchor>
      <arglist>(string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Tolower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1853c7aae336e34aaf9e3bf5098f6998</anchor>
      <arglist>(string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reweight</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a399f52de3bc4ed70a70547a39416dff4</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;rotorWeights, std::vector&lt; int &gt; rotorKey, double bonus)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>transformedFractionalCoordinate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab30451b430cbfd12c3cc861985766628</anchor>
      <arglist>(vector3 originalCoordinate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CompareUnsigned</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0876587a9edcb8d17a70923e424e3169</anchor>
      <arglist>(const unsigned int &amp;a, const unsigned int &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComparePairFirst</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a669ac61cfe4be78e8624b31b39179a9c</anchor>
      <arglist>(const std::pair&lt; OBAtom *, unsigned int &gt; &amp;a, const std::pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComparePairSecond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a76bfba8476b7512138a477265edc4476</anchor>
      <arglist>(const std::pair&lt; OBAtom *, unsigned int &gt; &amp;a, const std::pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adfcd0e581453354d7c779541ec58c491</anchor>
      <arglist>(ostream &amp;os, const OBFloatGrid &amp;fg)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adc71eb19ad3b4c729264738f6d69d1d3</anchor>
      <arglist>(istream &amp;is, OBFloatGrid &amp;fg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_vector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afc7ca70b08925b0a3950b67785d9f354</anchor>
      <arglist>(const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>OBQuery *</type>
      <name>CompileAutomorphismQuery</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abfb2d29563ee1a81f2e70a51d55c83cf</anchor>
      <arglist>(OBMol *mol, const OBBitVec &amp;mask, const std::vector&lt; unsigned int &gt; &amp;symClasses)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6239f809ba8a88712a94f2a6bb90a485</anchor>
      <arglist>(OBMol *mol, Automorphisms &amp;maps, const OBBitVec &amp;mask, std::size_t maxMemory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindAutomorphisms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4e9dbdc3dacbdf4b8ac6e48baba7bc35</anchor>
      <arglist>(OBMol *mol, Automorphisms &amp;maps, const std::vector&lt; unsigned int &gt; &amp;symClasses, const OBBitVec &amp;mask, std::size_t maxMemory)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expand_cycle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a31ce8b089ca36508940585406a2f93f1</anchor>
      <arglist>(OBMol *mol, OBAtom *atom, OBBitVec &amp;avisit, OBBitVec &amp;cvisit, const OBBitVec &amp;potAromBonds, int rootIdx, Timeout &amp;timeout, int prevAtomIdx, int depth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expandKekulize</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62de79552e98ffdb88a9b8509a705158</anchor>
      <arglist>(OBMol *mol, int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, Timeout &amp;timeout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expand_kekulize_lssr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9645071cedc98dac304402a63e32d700</anchor>
      <arglist>(OBMol *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, std::vector&lt; OBRing * &gt; &amp;lssr, std::vector&lt; bool &gt; &amp;lssrAssigned, std::vector&lt; OBBond * &gt; &amp;bondsThisRing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count_assigned_bonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8a423a9a023698abe77ee30550619f54</anchor>
      <arglist>(std::vector&lt; OBBond * &gt; &amp;bondsThisRing, std::vector&lt; int &gt; &amp;bondState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPotentialAromaticAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7b44d43b56950aff23fbca88664ad996</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>potentialAromaticBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7e62ffcac6073c5fb792d2f5bc62c522</anchor>
      <arglist>(OBMol *mol, OBBitVec &amp;bonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_bonds_of_ring</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adbf96b6f2307d00a5f525ecc3a4c5bca</anchor>
      <arglist>(OBMol *mol, OBRing *ring, std::vector&lt; OBBond * &gt; &amp;ring_bonds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_leftover_electrons</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a67f559671aa9d68ce3888baab8f7fc1a</anchor>
      <arglist>(OBMol *mol, std::vector&lt; int &gt; &amp;atomState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_leftover_electrons</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a07faa5acbed4a3cbbfd0d711321c0439</anchor>
      <arglist>(OBMol *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>restoreDoubleBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa57c0c18ebfc17ba6f962725101ab5b3</anchor>
      <arglist>(TEditedMolecule &amp;sm, bool putEither)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>intToStr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae4c78efdf4d582451d8d0c323d98f205</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xDistPoint</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5eeac49565ab1fdcb863f31f41ec2f5f</anchor>
      <arglist>(double x1, double y1, double x2, double y2, double x0, double y0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlapped</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acb3b0f424f25beb57a312c1a679f3b0c</anchor>
      <arglist>(double x1A, double y1A, double x2A, double y2A, double x1B, double y1B, double x2B, double y2B, double delta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAtoms</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac6d5144b33c27a6dce66dff86c4ebdde</anchor>
      <arglist>(int a1, int a2, const std::vector&lt; std::vector&lt; int &gt; * &gt; aeqList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>incrementValues</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1c632244490414023578336c8528c613</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;currentValues, const std::vector&lt; int &gt; maxValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteIntElement</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95f6327fcb8303f8d4fbb309a20e3f2b</anchor>
      <arglist>(std::vector&lt; int &gt; *source, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>findAlternateSinglets</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a24ad6fc920fa2699d472547ec4d1721a</anchor>
      <arglist>(const std::vector&lt; int &gt;iA1, const std::vector&lt; int &gt;iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeAssignment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a78600823bb7358bc592f05fa5039936d</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; bondAssignment, const std::vector&lt; int &gt; specialFlag, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds, int &amp;nAss)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>analyzeOK</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aaf79bb3ded26c6df1bcb8008c76afac6</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; maxValency, const std::vector&lt; int &gt; bondOrder, const std::vector&lt; int &gt; atomCheckFlag, int nAtoms, int nBonds, int &amp;nGtMax, int &amp;nNEH, int &amp;nOddEven, bool testExceedHydrogen, bool oddEvenCheck)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>incrementAssignment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b40d2265cd8cf97dc199e8059d13ff0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;bondAssignment, int nAss)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>determineBondsOrder</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aef260e06b0c46b10fe3be453e1362ee5</anchor>
      <arglist>(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; maxValency, std::vector&lt; int &gt; &amp;bondOrder, std::vector&lt; int &gt; &amp;hydrogenValency, int nAtoms, int nBonds, bool oddEvenViolate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alternate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a656a12d74df6452be30fd76d3860bca6</anchor>
      <arglist>(OBMol *pmol, const std::vector&lt; int &gt; nH, std::vector&lt; int &gt; &amp;bondOrders)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ptInRect</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab8184977f057db3afea953ff0d97355d</anchor>
      <arglist>(const Rect r, const Point p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareStringsNumbers</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af3acf0818f209ed2426163c90b6d1440</anchor>
      <arglist>(string s1, string s2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomSymbol</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0c4710d7911172f59b1f9caf9192d2d6</anchor>
      <arglist>(TSimpleMolecule &amp;sm, int atAtom, int atEx, int priority, string ndData)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAtomSymbol</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a49950c5bac5703c9a3c7efea3d4a41f4</anchor>
      <arglist>(TSimpleMolecule &amp;sm, int atAtom)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa5a5e94e5040b9aa439f4f658f0741d4</anchor>
      <arglist>(const string instring, const string substring, int fromPos=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeZeroeth</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac2c0520f21b12e9bfae93e4e425e26c9</anchor>
      <arglist>(std::string instring)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>analizeParity</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a79d8fe626950346aaaeabec7cfdce123</anchor>
      <arglist>(string data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>analizeParityBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac6b2a0b35248f073b86a96fbef99f461</anchor>
      <arglist>(string data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>changeParity</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a53b6e688d17496385f69834ed1014dc8</anchor>
      <arglist>(std::string data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>changeParityBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af2ed9f300b95cff9ffc0fbc34cacc578</anchor>
      <arglist>(std::string data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sproduct</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1da27ac0556550ed29812976e41e97b9</anchor>
      <arglist>(TSimpleMolecule &amp;sm, int br, int i1, int i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bondEquivalent</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aee1209411864c8c11729145e25e4bd2c</anchor>
      <arglist>(int bn1, int bn2, const std::vector&lt; int &gt; eqList, TSimpleMolecule &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>addZeroeth</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae55766527e16c454a28332c2b9f51bab</anchor>
      <arglist>(std::string instring, std::string stringAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpDownBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8499ac47df50a86298d88a5079a544f6</anchor>
      <arglist>(int atomNo, int parity, TSimpleMolecule &amp;sm, std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SortVVInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a74797fbdbf190ac9522db1f2d582581b</anchor>
      <arglist>(const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SortAtomZ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac44ee11ab4413a4b1cb20b5bd24f183f</anchor>
      <arglist>(const pair&lt; OBAtom *, double &gt; &amp;a, const pair&lt; OBAtom *, double &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>OBComparePairSecond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4da122a7830becd4fa38b8792671cdd</anchor>
      <arglist>(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>OBComparePairFirst</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a83d991b1e233b11b794e4ab3f87b52cc</anchor>
      <arglist>(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ClassCount</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abe5da6d31a3fcc23a2efd77085c8c2d4</anchor>
      <arglist>(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CreateNewClassVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8f302cc167630d63e3ca5a4c4d86e41b</anchor>
      <arglist>(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ValenceSum</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8e455dc2d94f2394a21dd76db3af8325</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>KekulePropagate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8d72e30a8da1c39c9906a27ef62dd5f6</anchor>
      <arglist>(OBAtom *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCurrentValence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad87b019400c810f14603c6532435030b</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandKekule</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5d65e3449d4d6a0a7a35ea4e13039f16</anchor>
      <arglist>(OBMol &amp;mol, vector&lt; OBAtom * &gt; &amp;va, vector&lt; OBAtom * &gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CorrectBadResonanceForm</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a13eb26f56a8a475622fba5fc01d4d50e</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTitles</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7654363e339f0fe07323c9f7e542d4db</anchor>
      <arglist>(ostream &amp;ofs, OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>center_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aabfd0c1c9630002b16c782ad7d39790f</anchor>
      <arglist>(double *c, unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate_coords</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a037d5f246395ec725489c655344a958a</anchor>
      <arglist>(double *c, double m[3][3], unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotorToAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a95b4ba35439691534ac9c74c47a4b688</anchor>
      <arglist>(double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a034c6dd9973dc10ecb7cab1e58a683fa</anchor>
      <arglist>(std::ifstream &amp;fs, const string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SafeOpen</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab9bfc815426ab3c657b97c198aee9f3e</anchor>
      <arglist>(std::ofstream &amp;fs, const string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2e30f35d0b3984ff969fed0eadc3a848</anchor>
      <arglist>(std::string &amp;s, unsigned int start)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveLinear</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a867d77834ebf14f88224f0dd7e7e0e61</anchor>
      <arglist>(double A, double B)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveQuadratic</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad37b2e597a6a0115fa09fc4903665c9d</anchor>
      <arglist>(double A, double B, double C)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CubeRoot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a637e2cd6fd74982c574e513d729b29bc</anchor>
      <arglist>(double X)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveCubic</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af0ca115b10493da91f7a1c65f5b44ef6</anchor>
      <arglist>(double A, double B, double C, double D)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_roots_3_3</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa7ec675d10f9071757b87d4952938b65</anchor>
      <arglist>(double mat[3][3], double roots[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetVectorBinding</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7b5986b1238c63b45e7fb0fdfdfc4ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>CreateAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5ef07c8230811964a209e423abea11d2</anchor>
      <arglist>(Pattern *, AtomExpr *, int, int vb=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FatalAllocationError</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afb8652b972f454e6ab6a58c7ffa46380</anchor>
      <arglist>(const char *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FreePattern</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adda2fb3f1a00bdee06b36a3a56ecab0a</anchor>
      <arglist>(Pattern *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pattern *</type>
      <name>CopyPattern</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1fea358f643e1a4c2969fe9fc367372b</anchor>
      <arglist>(Pattern *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AllocAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa06090c65ac9acea8044a078064142d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>CopyAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac86a92f114ff5ab6ee7357352682922c</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FreeAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae445247649429e110f031d235bc4d465</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9cf9b8eaac01d8b3edecdc32e0d73512</anchor>
      <arglist>(int prop, int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomNot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a03cacdaa8b1851aa9f927a8108b9e3ea</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomBin</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a61fd91da70225bf05011639396d23b10</anchor>
      <arglist>(int op, AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>BuildAtomRecurs</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c7a4877081dd4f7ab5966e1cb506895</anchor>
      <arglist>(Pattern *pat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>GenerateElement</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7d8b74f86bd19e5c64c5cfafbc0f5fc8</anchor>
      <arglist>(int elem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>GenerateAromElem</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adf5c0e4e485dfa0a5b9854063d0e75be</anchor>
      <arglist>(int elem, int flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsInvalidAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8d298e86b8ff500e158a8410aa5aa732</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>AllocBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac80b9ed98f3d3d577e051b6dd2870cef</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>CopyBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a308583e0ca7df091c7a7e3b9fb321805</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>EquivalentBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a62e1c3bdf62c95fbff1b64cb4996eccb</anchor>
      <arglist>(BondExpr *expr1, BondExpr *expr2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FreeBondExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec5ad77869a83b4b1f65bcfcb065d98f</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>BuildBondLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab0f9c1d3ab7ba35f0083c342db724359</anchor>
      <arglist>(int prop, int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>BuildBondNot</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a558423c98a7710dccb8d9234a8c0d2cc</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>BuildBondBin</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6fc2b0b41adf46651940ca2c9410ed0d</anchor>
      <arglist>(int op, BondExpr *lft, BondExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BondExpr *</type>
      <name>GenerateDefaultBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad1d85b6d3bd9953ffd9a3ffc5545bcfc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pattern *</type>
      <name>AllocPattern</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a17874fdfb56af286f64cbf9471772daa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>CreateBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0dc584d0582e8f76b7c9873dc1ccf569</anchor>
      <arglist>(Pattern *pat, BondExpr *expr, int src, int dst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>MarkGrowBonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac16aac0b5b4c8698863437383b747a5c</anchor>
      <arglist>(Pattern *pat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetChiralFlag</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a308bf98f43b9e6d709f17b2e83617d6f</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>NotAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a67a769d9ce95278983a65764b363188c</anchor>
      <arglist>(AtomExpr *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AndAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa31643b98610c21a70246529ae43a3c0</anchor>
      <arglist>(AtomExpr *, AtomExpr *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>OrAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aecadd7da4b4879ed4274e628fc440f4f</anchor>
      <arglist>(AtomExpr *, AtomExpr *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsBooleanAtomLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac613f2b30f871cd23e63b8573372b2a4</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsNegatingAtomLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a93043bdcf295c9daa7efb45bc31182ce</anchor>
      <arglist>(AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>EqualAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a19b1b9103d86b579bb44d777db593c73</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>OrderAtomExpr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a40de5efd81cb1bca8ff737a1507deeb0</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomLeafConflict</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a58b602c6be0aa88f69fbaecd71a82b7a</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomExprConflict</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6419b054750512355f620886990ae725</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomLeafImplies</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afe1606ae8fc8753791a06f48e1beaf4f</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>AtomExprImplied</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a53bb1c96f3be289fbe52bdb65afe3b13</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AtomExprImplies</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5efeaba0de04686b85e1cd11296bb76f</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>AndAtomExprLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec3b3cd6bc1ab563427c7a03d52d7c0c</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>ConstrainRecursion</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aafea7a59ad4cbb9bda87187210befbc5</anchor>
      <arglist>(AtomExpr *recur, AtomExpr *expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AtomExpr *</type>
      <name>OrAtomExprLeaf</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a44c137e83dc2832887a5db79ceb19dbf</anchor>
      <arglist>(AtomExpr *lft, AtomExpr *rgt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetExprOrder</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acc7a90098a2f71e1480986f513426244</anchor>
      <arglist>(BondExpr *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SmartsLexReplace</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1be5369686428b6311fc8f79baf855c5</anchor>
      <arglist>(std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>isqrt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acf0cdead441d34bce09b5dffbd031e94</anchor>
      <arglist>(unsigned int val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>IsOddPrime</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4d8217756622db102e25941df848d37</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>RelativelyPrime</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a83b9098df014b7fce40c3d29eb240240</anchor>
      <arglist>(unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>LeadingZeros</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9c9b5a925bb477e9cf899d8705defc60</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DeterminePotency</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab39d4f554084f831800c2f18b5b0f017</anchor>
      <arglist>(unsigned int m, unsigned int a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DetermineFactors</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5e5d2c394de2985154659ef73adddea6</anchor>
      <arglist>(unsigned int x, unsigned int *factors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>DetermineIncrement</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a368951c5db9d79bad24d0632dbaf23d4</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DetermineSequence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad3a7dadaa9b14b3d1a4a521f632a2477</anchor>
      <arglist>(unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateSequence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adfc4a863d0839be0e62e9db9d585fd7e</anchor>
      <arglist>(unsigned int p, unsigned int m, unsigned int a, unsigned int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>GetAtomIDNumber</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a896fe2a9e9925cda30253ea47ab123c6</anchor>
      <arglist>(const char *atomid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>GetResidueNumber</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a822c0b4a40ee24e37bc3064b4e403458</anchor>
      <arglist>(const char *res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SetResidueKeys</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a91a8965770cf999c120602edb0c09bcd</anchor>
      <arglist>(const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DetermineFRJ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a387eb9209ded6f58de6c672c06121ec8</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>BuildOBRTreeVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a902077219ff1df4935790b354a00909b</anchor>
      <arglist>(OBAtom *, OBRTree *, vector&lt; OBRTree * &gt; &amp;, OBBitVec &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>atomRingToBondRing</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acd603c36f7650b398cddf72b1b863b1f</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; int &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visitRing</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac932ad377c246fc19473d052ab3243a8</anchor>
      <arglist>(OBMol *mol, OBRing *ring, std::vector&lt; OBRing * &gt; &amp;rlist, std::vector&lt; OBRing * &gt; &amp;rignored)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FindRings</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0bc08c11af150479f14d23684fab908f</anchor>
      <arglist>(OBMol &amp;mol, vector&lt; int &gt; &amp;path, OBBitVec &amp;avisit, OBBitVec &amp;bvisit, int natom, int depth)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rint</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9f0ec6e80141edbb924cfc4839117c94</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotorToAngle</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3d3039fda855c4c8c37c8345f0b51a64</anchor>
      <arglist>(double *c, OBAtom **ref, double ang, vector&lt; int &gt; atoms)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PackCoordinate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a69a83bcbc3a172e306c4556518aa0999</anchor>
      <arglist>(double c[3], double max[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnpackCoordinate</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3180afc2c45b337a776dcc164e99e89a</anchor>
      <arglist>(double c[3], double max[3], int tmp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetDFFVector</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a534fe2a629963b79ffbd499f461ca5df</anchor>
      <arglist>(OBMol &amp;, vector&lt; int &gt; &amp;, OBBitVec &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CompareRotor</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adfad2bce1feae52028bcf69d6b5de37a</anchor>
      <arglist>(const pair&lt; OBBond *, int &gt; &amp;, const pair&lt; OBBond *, int &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>MinimumPairRMS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a29e21802967a71af8d4f4828d979676b</anchor>
      <arglist>(OBMol &amp;, double *, double *, bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>trim_spaces</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab1efa641b2fa046a6c00f729818933d6</anchor>
      <arglist>(char *string)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>operator*</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a41d8538809cb689100fa8a0807510128</anchor>
      <arglist>(const matrix3x3 &amp;A, const matrix3x3 &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>SQUARE</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a30703c4e70c6142f64ceb67f1888b6e2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a590374f29c633247d07b75e43ae89f9d</anchor>
      <arglist>(ostream &amp;co, const matrix3x3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>RemoveWhiteSpaceUnderscore</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a12c13a3449bb5bffa3436d7dda6f217c</anchor>
      <arglist>(const string &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad8081070ab0409c71d9abfe43902881f</anchor>
      <arglist>(0.0, 0.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VX</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a71fd9d70c392449514d7a263d94e0ed1</anchor>
      <arglist>(1.0, 0.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VY</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac43607459a7e61f202515f641ff57508</anchor>
      <arglist>(0.0, 1.0, 0.0)</arglist>
    </member>
    <member kind="function">
      <type>const vector3</type>
      <name>VZ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>abe3ca6a519f7aa7bcade3fb6d2b927f6</anchor>
      <arglist>(0.0, 0.0, 1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetLabelAlignment</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a474093accb1df03b02d17bc4b7f00377</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAtomSymClass</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a394447ad37adaf40565f53d07f5eed17</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToUpper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aae157b7c5a3145dff9e938888d41d46f</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToUpper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47cc993bd022dfca052b2b18f5cd89ea</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToLower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8e8df618618aa53bf4cf202b0230c7ac</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToLower</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a47e5132fa26acd9f575c6c34e6337348</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae254bae8e13592739edfdf24b917a943</anchor>
      <arglist>(std::string &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertCase</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a02a81294407df471b68048bb2bcfd503</anchor>
      <arglist>(char *cptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CleanAtomType</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae7fd604c6cfd7cbb0067721106af8ca9</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PerceiveStereo</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gae7aedffc6994cf26d16524389c56bdac</anchor>
      <arglist>(OBMol *mol, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga305c9600a3a336da16683baa395e20f4</anchor>
      <arglist>(OBMol *mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaebcf38fd76c5d76fffbae808b8571f9b</anchor>
      <arglist>(OBMol *mol, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga419e494a34740f1f8003acabfa30a95b</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga35e07645a245db366b115f0dc20542fd</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gab85c5ef4c9416ee7af02b21658fe9de2</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTetrahedralStereo * &gt;</type>
      <name>TetrahedralFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gac3049b86debe9059b851825b29b1557c</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom3D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga7e1ba3a4ac33b0c6404b0d960cc53d00</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom2D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga98528c3002ed718695ccfaf031ca3f04</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, const std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TetStereoToWedgeHash</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga182a53150e1793ac1ec14958afb05f17</anchor>
      <arglist>(OBMol &amp;mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; &amp;updown, std::map&lt; OBBond *, OBStereo::Ref &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; OBBond * &gt;</type>
      <name>GetUnspecifiedCisTrans</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga63e739a42d88ac64ed77c07d73866a45</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StereoRefToImplicit</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga9b44683d071146220a97390283944f70</anchor>
      <arglist>(OBMol &amp;mol, OBStereo::Ref atomId)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBCisTransStereo * &gt;</type>
      <name>CisTransFrom0D</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gac74fff254a639ede4d92a59fa44318a6</anchor>
      <arglist>(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</arglist>
    </member>
    <member kind="function">
      <type>OBStereoUnitSet</type>
      <name>FindStereogenicUnits</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaebf264394d502844b99b1dbe031ea185</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses)</arglist>
    </member>
    <member kind="function">
      <type>OBStereoUnitSet</type>
      <name>FindStereogenicUnits</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga0f62e73467d2059ad28d544633634862</anchor>
      <arglist>(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses, const Automorphisms &amp;automorphisms)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>AliasDataType</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af962a429bf8fe8b8f222ff1a6018c35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>RateData</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a94007d911a76e1404494fd9b1785f22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>ThermoData</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4c2b0b854dea9451bf30f7b37353c877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBLocale</type>
      <name>obLocale</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af9a30f985504c4a70fd08aa72c0cd16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXBONDS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a82ccfbdf4943a4e74a708edafcced9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXFRAGS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a22febe826ea2f93f69725fbef532c921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXCHARS</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab91841d785674a38b34fcf2fd9685142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAX_DEPTH</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad087045047b2155479ef662be1be3abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NELEMMAX</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ad1eec14ce20cfaf366e19721f1f27090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBElementTable</type>
      <name>etab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e53ca6bf87ac2f6447c9ef2332c9418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBTypeTable</type>
      <name>ttab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab8d4d5690031703bcccb95ddbe7ebf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBIsotopeTable</type>
      <name>isotab</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a35082995377e56142ee5a9fd351c7a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAromaticTyper</type>
      <name>aromtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a36c0ee580e088fa888f7d96c16e969bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtomTyper</type>
      <name>atomtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a717e026b570e71d0e648d851d34b6482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBChainsParser</type>
      <name>chainsparser</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab81925dbd111f3bf1733a4cbba547131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBMessageHandler</type>
      <name>obErrorLog</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a394eef44b3dd6a9174067715712c2d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBResidueData</type>
      <name>resdat</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a30154f62f3bd1a1b8613a080444e69d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned long</type>
      <name>NoId</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a99dab86ea7c23d635f350a07644c16a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>Residue</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1c64f54dc7b18535a4e9cc581199e26a</anchor>
      <arglist>[MAXRES][4]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>ElemDesc</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ada1d79ef0dec356ea0ae9c1d4e654ca2</anchor>
      <arglist>[MAXELEM][4]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ResNo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4a6dc069703276b9476ce6b7c5f018e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ElemNo</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a508adcc5794ff87b21a2e5fc0d752b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VZero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ace51dfd98be07acf3a9c75c21e8d8af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VX</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6ca3b632d31093a7110635452bccc7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VY</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2d3d483edcdb477b3d15f19a001845ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector3</type>
      <name>VZ</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a08ec791bf0217b5df66e5879a9f9c95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBPhModel</type>
      <name>phmodel</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4a64fa5669b273a31330641abe62978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>bitsoff</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a384eab3fdca5eabacaf7c1167d8fbbe8</anchor>
      <arglist>[SETWORD]</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>nibble_bit_count</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37764b678471578b5f9441bd6f130fd8</anchor>
      <arglist>[0x10]</arglist>
    </member>
    <member kind="variable">
      <type>OBBondTyper</type>
      <name>bondtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aba95148bad1cac8e3abb51a485c17cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Template</type>
      <name>Peptide</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a26e55b55a5d9997fa7e9326cd603fcdd</anchor>
      <arglist>[MAXPEPTIDE]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Template</type>
      <name>Nucleotide</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab4cf89b53bf070dafd1717b69e89d8a0</anchor>
      <arglist>[MAXNUCLEIC]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>ChainsAtomName</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a7b064978f82414d1a9805ac383a5cac5</anchor>
      <arglist>[ATOMMAX][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ResidType</type>
      <name>AminoAcids</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0f1fa68f20787eefe51bc205d70bf141</anchor>
      <arglist>[AMINOMAX]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ResidType</type>
      <name>Nucleotides</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2326ccdc5fd0c0b5cfd5842cf4c7da03</anchor>
      <arglist>[NUCLEOMAX]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MonoAtomType</type>
      <name>MonoAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6d27c5a78720907303f7345d7f972f36</anchor>
      <arglist>[MaxMonoAtom]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MonoBondType</type>
      <name>MonoBond</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a424ffb435ce72308ed456dd1c8e5de60</anchor>
      <arglist>[MaxMonoBond]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MonoAtomCount</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a4f891e27abe7998822f22e513182317a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MonoBondCount</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>afe6df7aef6454d16dfbde0b74a516b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static StackType</type>
      <name>Stack</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9e0089655dc8a4d83d40dcbe519ca9bb</anchor>
      <arglist>[STACKSIZE]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>StackPtr</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5e019437eb125244e080ac8bee696b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>AtomIndex</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a08aed91cf3c0528c11e2c383078b9e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>BondIndex</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab8cd0fea55be4772aece582108b664c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>StrictFlag</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4e7dde6c2732deca11bff4c63c46372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>red</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8759fc55507d155f4eb9fa303cfecc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>green</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac12598cc2108fbc1e3ba8d1c3c92bb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>yellow</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acee835767e8d4be32f5ad94a2e90a45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>blue</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a19b2b376a1bda5b375eca394cff7f129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>normal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae70ea9d1800f7ec86a2db16c71c42e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>hVal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a007ca25767fb63a9b52010d40c8888df</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>maxVal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6eb8f9135e86a8fd55d2293c4fe7b811</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>chargeVal</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0d7409371f9cf6d7f50a3fda440d871a</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>aSymb</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a010272f11ab71479f636c0327b5843a8</anchor>
      <arglist>[NELEMMCDL]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>exactAtom</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1b7de377338f7ac7700315efbba80ae2</anchor>
      <arglist>[NEXACTATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>alkaly</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6e4dd9241c1923f5a16e445d29e040e2</anchor>
      <arglist>[NALKALYATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>alkalyEarth</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a67d14372d5486c87fba4d1347e98677c</anchor>
      <arglist>[NALKALYEARTHATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>trivalent</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a37351982a79ec5e7505f20f8d706dd0f</anchor>
      <arglist>[NTRIVALENTATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>titan</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a2c1f49db7daefd6995a8bd194e3ac0ef</anchor>
      <arglist>[NTITANATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>vanadium</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac5ecc60b7d1b91afa310c0c6379b909c</anchor>
      <arglist>[NVANADIUMATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>cromium</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a18359deca081005601d5e234fee87a5f</anchor>
      <arglist>[NCHROMIUMATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>manganeze</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a6b27e665d816bd4edca018692a03ee1e</anchor>
      <arglist>[NMANGANESEATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>likeFe</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1e38b8674bb78cdd93818c4f569d3317</anchor>
      <arglist>[NLIKEFEATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>platinum</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ab280567064a5940906303e0f95b673d3</anchor>
      <arglist>[NPLATINUMATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>copper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af395a23311a093c6c9ba174c91bb00fe</anchor>
      <arglist>[NCOPPERATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>zink</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a790d50110edd641cf164ef702acd67c2</anchor>
      <arglist>[NZINKATOMS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>possibleAromatic</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a32e0599f9cf6f751a89279c86f703e47</anchor>
      <arglist>[NAROMMAX]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>metals</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a174dbce034c042d7961ad4b02dd4f344</anchor>
      <arglist>[NMETALS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>lightMetals</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aa6724f0a1ae8f22fa59505cb00498565</anchor>
      <arglist>[NLIGHT_METALS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>heavyMetals</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a1dddb327de910ca9d524dc76a68090a3</anchor>
      <arglist>[NHEAVY_METALS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>halogens</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>acb826f58b78c49d8732fb29a0b325f9e</anchor>
      <arglist>[NHALOGENS]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>hetero</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>aec7f886140fb13e79a6823f3bf78b5cf</anchor>
      <arglist>[NHETERO]</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>strData</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ac1e24d8c0684f30e0835a9ca5cf6d1b9</anchor>
      <arglist>[NDATABASE_MOLECULES]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bondValence</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>af4e78cb542837e6c77dcd5da5765833f</anchor>
      <arglist>[NBONDTYPES]</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>fsastart</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a8fc4e404ce6dc298048b5bdf5deb3124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>fsbstart</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a5d29a62c474c707d84973a8ecb1f62a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SwabInt</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0afcf921bfdabceef6c6cf00836ae203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>Roots</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a19c1a2a80cf2af5131ca597d0ce38192</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>N_parsed_bonds</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a9bb7a6b653e299a7918cf66e3a7be057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>POINT_GROUP</type>
      <name>PointGroups</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a856b116adc145026ec1c182e9145c818</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>primes</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>adddfd42867b5aaa0caaa3a793a8f69e2</anchor>
      <arglist>[MAXPRIMES]</arglist>
    </member>
    <member kind="variable">
      <type>OBRingTyper</type>
      <name>ringtyper</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae5fd3b39a867e164de9f433a78d9d09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>SINT</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>ae3c640db1cce9cd703ef7c5429de5453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned char *</type>
      <name>STPTR</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a0cc646b14fcc04a16103f6bd73382d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static SpaceGroups</type>
      <name>_SpaceGroups</name>
      <anchorfile>namespaceOpenBabel.html</anchorfile>
      <anchor>a3463c4c11680aefbcce3a25305211efa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::AliasData</name>
    <filename>classOpenBabel_1_1AliasData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <class kind="struct">OpenBabel::AliasData::AliasItem</class>
    <member kind="function">
      <type></type>
      <name>AliasData</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a55d097a56763789d4b0d070e51a580fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAlias</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>ad3cc04112e0d8320faff12cd8e70bcd4</anchor>
      <arglist>(const std::string &amp;alias)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAlias</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>aff1fad2cef60a4d52443058c69ec835d</anchor>
      <arglist>(const char *alias)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetAlias</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a8e2bf33bcdd59342e0447ccf8a3ece1a</anchor>
      <arglist>(bool rightAligned=false) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetColor</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>afe19945cf89192f929d6f0931ef66a63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>adae56afc36beb65bb8fb4cc32afd7d19</anchor>
      <arglist>(std::string color)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsExpanded</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a01c2d9efc5bbab7c9f080f3eec0b94b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Expand</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>ae9370e865e83b4dfefbb8b6cb2c15535</anchor>
      <arglist>(OBMol &amp;mol, const unsigned int atomindex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RevertToAliasForm</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>ac14285658929bd5af45a1560cb1ec15b</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_alias</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a7dd8464fd3023ffafa56a134e663a4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_right_form</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>ac8b232648a71f527f8a33b13d9562013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>_expandedatoms</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a08d5887a8d97196910cb41a2d551f375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_color</name>
      <anchorfile>classOpenBabel_1_1AliasData.html</anchorfile>
      <anchor>a1134e770ae4315ea8bc1201e2f21da8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAtom</name>
    <filename>classOpenBabel_1_1OBAtom.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="enumeration">
      <name>StereoFlag</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>afbdb429fe4a7d37960636a555de77326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad5b5ccb4d16c9ce269b65ccc4e7fa1ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBAtom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a52876d92719e68259ca43bf5cd19349a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtom &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3fa1416db7f7f223cb5d77cc7a916f2e</anchor>
      <arglist>(OBAtom &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a43c3ac9fe061bbb6a7e714759400e35d</anchor>
      <arglist>(const OBAtom *other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Duplicate</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af2ee969f23433f548e39a909547869c7</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetDistance</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae93c2ea0464618c797ae509fb3f3f455</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetDistance</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ac2a0e52810ad157f41a9ecbbae90ee48</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAngle</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a02dada3ad01505b2d4ddcbe7b9f006c8</anchor>
      <arglist>(int b, int c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAngle</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a6d6d9bdda3f480d358c14b2010034d41</anchor>
      <arglist>(OBAtom *b, OBAtom *c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIdx</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ab994a975e39f5c62288f4f972b6f90c9</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetId</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a383094c5a19383cf09f3dfb4c1de1da2</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHyb</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a9ca5228f1b568f7076cd930ad0902a83</anchor>
      <arglist>(int hyb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a573a9f96a971854938ab2db5eb4d4851</anchor>
      <arglist>(int atomicnum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIsotope</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a90b69b7f0259fe3dcbde073f36ebf1c8</anchor>
      <arglist>(unsigned int iso)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImplicitValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4ebf98749415a00a56fdbc77f87fdc87</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementImplicitValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae048690c14e9258cc653231a56d5dfda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DecrementImplicitValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a7acb91a903a31d698dc25d296b988f7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFormalCharge</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aa1d084182d025e6fa000b928807d7689</anchor>
      <arglist>(int fcharge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpinMultiplicity</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a299285ee1effd21803b3c042a376e149</anchor>
      <arglist>(short spin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a473f946fc45e9a7e5479d260e4cfd107</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aadd853960ce2a2382a7d2d451d5ab450</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPartialCharge</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a963851351ab3c084233a82d367f15607</anchor>
      <arglist>(double pcharge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVector</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3b9594d66359ec366d2590459d0b617f</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVector</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad69e26aebea5d59b5d79ccd514631297</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoordPtr</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aeff361260a8a4e9ea703d5d38f5fc671</anchor>
      <arglist>(double **c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVector</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a5f11d9c7a42f6be6e4b6272526f3ad09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ade786f15ee67979fbb9c48970b22e184</anchor>
      <arglist>(OBResidue *res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a962b3010305cfb80ba816a0e54097dee</anchor>
      <arglist>(OBMol *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAromatic</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3d29498c15007d9b6729e26784f23a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAromatic</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a2fcf3bf429f36281a43c879e40e75f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetClockwiseStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>adf069c94123595712cb7fa847b87e449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAntiClockwiseStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af328f0aa99465103074b1d336c393919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPositiveStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a6ddbbbc5f8e185c43e634a0425311275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNegativeStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aea322d9d450ee48fb2e89a4f7c34deda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>afdf42f73fe8a0cec0db3c3e544830fcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInRing</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae6a016e7f67cf564e5f80254c425f65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChiral</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad4e5a4c67101743f644b047b632d058b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearCoordPtr</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3fa3634d92a924e5af69208768e839a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetFormalCharge</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a25098f4715711b9755fa50ca18ac2f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ade227de93fbe080fc1c2854e530df81a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short int</type>
      <name>GetIsotope</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>adfdbf1a8c9bf80588039b4f08cfc1069</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSpinMultiplicity</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a14ccfaca2264c8f8141f4c0ed7343c25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAtomicMass</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a635bb1edc5190cbe33eda4a34843be9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetExactMass</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a10b7a478773fee2a1a2bcc04c5ae5d0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetIdx</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a80892a7fdfc7180a85160279c1186952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetIndex</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae6b8fa1646a64b9fbe745af4719920ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetId</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a1e4a97cdb0dce128f98c6c08ec7c85e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetCoordinateIdx</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ab7c533796dfe7ce75f2a755b668ebd5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetCIdx</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a042ed0fe3ac49c9505f9f79d07469423</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aebccc307cd3036d7a2ad0c80e90aef22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetHyb</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4f510d8274d4d2a835c7c438aa794e57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetImplicitValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ade9a7b6271ba3fb38bbaa20602d736ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetHvyValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a8def681dc1ce0b36145de5a8f4a46d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetHeteroValence</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af0cf20008ef74a7af30b2df9d9b7bc7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a7f02f5442f2ed3aa2045587d3319ab7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetX</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a140fe887c529e7b90eae3de197e8ceb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetY</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a7e0e3acd8a6e4016522b9cdbc8f5aeb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZ</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a885f0eb530803b77acf8ac2055c59ee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a9ccf82e6805fa3a2f34b977e1db6f4f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a0acce91d627a918ea20832d9b2fb8b93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>abe77460b0bada97d73fc158579294931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetCoordinate</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af9dd6c6924f23479933e0b8779a4bec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>GetVector</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad15ec0c7f87cea35b02269fd53be159c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vector3 &amp;</type>
      <name>GetVector</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a33fed269ac5a6e12f2d58d09e623191a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetPartialCharge</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aeccf78db112723467e7756a5734c82b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>GetResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae8533afa0177a165ca51941872f85aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>GetResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>afac526c6de01759b568caddae4c4f2c3</anchor>
      <arglist>(bool perception)</arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetParent</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad8480b61159bc6cb861b17341dc2b29a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetNewBondVector</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a818650a1b97f10bbc2204520ef65ad27</anchor>
      <arglist>(vector3 &amp;v, double length)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aed271572fc66bbef1751cac6ccf3cade</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetNextAtom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad3bbdba4326cf884eeb110b02f7caef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBondIterator</type>
      <name>BeginBonds</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ac4ea48df79e239b506d3501dd42adde9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBondIterator</type>
      <name>EndBonds</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a87859f951e8ea33345b76d93014486c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>BeginBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad9d21c9b65678905c6d7d461160fcd9f</anchor>
      <arglist>(OBBondIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>NextBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a133c681e9534e7255b1fae272c40a511</anchor>
      <arglist>(OBBondIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>BeginNbrAtom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a60c99e07cbd015b89dd0f41525150a74</anchor>
      <arglist>(OBBondIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>NextNbrAtom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a37ef92842ef05f2084102f45b6a05caa</anchor>
      <arglist>(OBBondIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a616b5aac27eec22be5be998bc15d6349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3e3b0d3b268e6abe26f87d4c422c31cd</anchor>
      <arglist>(OBResidue *res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a85fa173a3c3f488fc691a11eaad81439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a5abeab08afbd305a51b9a9b5bd8fe356</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a1773630938cf6a028368394b666d06bf</anchor>
      <arglist>(OBBondIterator &amp;i, OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af47adec983369f903208f5fbae863406</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a03fe71c8266435b7a76682e5c1472894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HtoMethyl</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a51618686d8ad1b5f66ff2fc2c607493e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetHybAndGeom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af7a144a4ef755d5cc31e0d2e47a2e84a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForceNoH</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a1a92c9eb656eb9ef43f03c717a38adc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNoHForced</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a55e8f858833eee0408aee7b0f1b9c22c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ForceImplH</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a03e54abd32434bd610bfd4430d91b7b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasImplHForced</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a8920c0ef5c32f64887d09c3b2da857d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CountFreeOxygens</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a599391b68a70a3a6ea87511e74e142e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>ImplicitHydrogenCount</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae09ed28481ac044dab3f31c8605b44a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>ExplicitHydrogenCount</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a2f3a84cfc5519d13e49880b6d2cc1b4e</anchor>
      <arglist>(bool ExcludeIsotopes=false) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>MemberOfRingCount</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af7215961220abaa4e684bfafeca87bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>MemberOfRingSize</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae7d5797a4c8b99c943f943034e3287d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>CountRingBonds</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4a027cbfb230638ae056ccd04b48fe8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SmallestBondAngle</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a83db73f33e51b011f21358bd5a0463ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageBondAngle</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae9468871377da00c7b949b20d6d17f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>BOSum</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a6e7269e46f6f39fb598a9f3b74bba06c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>KBOSum</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a566764b6577e8ba6a4959bd0f2e25076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasResidue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae3177d9e8b583d3cda02b90c141894c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHydrogen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ab633bc0f8f40dfcedf42940ab8a5316c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHydrogen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4659948e851d094d7ffddcc7d9c9ff4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCarbon</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a1f0a167775136e911cd349cdd8923b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNitrogen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aacb82bc548922e4f1276a255f212f143</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOxygen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af7e8030ce19d79c9ad0b3cfbf116dc59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSulfur</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aa71152591d5cc51fc2f3701ff7de7dfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPhosphorus</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ab8c7f052f9380b98eef3b83da640eba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAromatic</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4ef863ca7ed29e266960966a66dc8fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInRing</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aa17842bd610dc8b2ede2fe324738fe5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInRingSize</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a9ca260c28f84147e45c377cdb2254144</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHeteroatom</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad89058fb178a4b056a0786a5ddc8e162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNotCorH</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a5d150980792220d4929ac312bfce1636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsConnected</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a35892bf1255c1b8824c870e5460fd641</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOneThree</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a895cbd0d89d126571465b59ee0a3b79a</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOneFour</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad1b5c7353abc13edd81339fc58206a3b</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCarboxylOxygen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ab7dd88da6d7a1e72f636c50586d5551d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPhosphateOxygen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a5b1d4c9a297629beacb66c0ef04070e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSulfateOxygen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a76ecda2fd4bf9207310088f25f526ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNitroOxygen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a256fca254282407b1342875266769463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAmideNitrogen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ac8299dd769242a441864a7ad2fcb92b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPolarHydrogen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a6da4cfc5bbc2e4c9b358bccd5d97e51f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNonPolarHydrogen</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae519982c28911c0906e9181c46d7bdbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAromaticNOxide</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad651ae188decc15fa8ec3907860e585e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsChiral</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a63258442848bd8e29e0d5224e145ad83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAxial</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>afca1f93ec35d38ad6b7e8eb634bd5d45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsClockwise</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4d1f38bbe03483629778078dcc4e75a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAntiClockwise</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af3abb70d4f818b9c3e416928afa2e844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPositiveStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a9880a080dd0bce244291bde514b67d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNegativeStereo</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a61e5344c34c172e9b889e59255aff6de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasChiralitySpecified</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a8844e382c76003229ee5fdd0341aacee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasChiralVolume</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a63911efd550113b275239d322670986d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHbondAcceptor</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a63e02252214e540d56815820715f1ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHbondDonor</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a71e3c9571430e3d6587f7b80ee8fb926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHbondDonorH</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a135d08515315b5daa95e6081dc104a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAlphaBetaUnsat</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4f5a47b31d2c120928f77dad66e655cc</anchor>
      <arglist>(bool includePandS=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBondOfOrder</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>addb891e1fa000764b9030d5e08c0c67a</anchor>
      <arglist>(unsigned int bo)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CountBondsOfOrder</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a4fc49ec59966a08059750ecd2e9d20a5</anchor>
      <arglist>(unsigned int bo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNonSingleBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae3d85200b00bf0ad59725175d606acfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSingleBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>af347b80d156587c2287754345606c78d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDoubleBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a0cb35a21cc08897bc7f9b01ae4561e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAromaticBond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a11bf8aa7f79e9b9bdef2602808bb794d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MatchesSMARTS</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>abfdefac42d3c895920f1f715f0d710a5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Visit</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a6368d7673f23186649b2969ade3661d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetFlag</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a0adfe60e7fb18cb7ca2fe3ac5bb6737a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFlag</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>adcdab8f96dc4fdc2940749e527087245</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasFlag</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3a1dc0419a66d2e7288214342de43b7a</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>_ele</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a2a4ac28765690d9b074521327cb4876b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>_impval</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ab3e028e65ae7c0dac55997f2cb7281ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae34265581460024d37fb0ff25d97f110</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>_fcharge</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a6e636025c5db07bf67523b31a55f6327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>_isotope</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ad60f474b9381f875e4b6e3f5df457c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>_spinmultiplicity</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aec3b74d938a5e47bc6a6627f64d86e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_idx</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a1219a011a5e0ec59c67a5a873d81986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBMol *</type>
      <name>_parent</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aa15238ffbdb1330727678c9d6553d6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBBond * &gt;</type>
      <name>_vbond</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a3c7208419c7703e947e9a1c365838b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_cidx</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>aef178db02607fe00f112bd1a7f5f4d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>_hyb</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a5d400386667c899017669303bdec09cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>_flags</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a5cc9f88f4cc5fda10e7932cd59a87f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_pcharge</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae4b9cf0b2f94fc6befff220367fccd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>_c</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>a91a32f6c060e12e4d188974db5b111d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3</type>
      <name>_v</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ae8dcade9402fad862f0391488350ea3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBResidue *</type>
      <name>_residue</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>ac26545dc3d68694f0a7b6f4a776f7a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>_id</name>
      <anchorfile>classOpenBabel_1_1OBAtom.html</anchorfile>
      <anchor>accc49a515c7a81154bd46a8ea8a16204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAtomClassData</name>
    <filename>classOpenBabel_1_1OBAtomClassData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBAtomClassData</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>a1c34a34b14ff00d2e2c71d60fa14b669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>a515d0a9cc93e86e83e13ea46a85e527a</anchor>
      <arglist>(int indx, int cl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasClass</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>a2818d4a12bc5df1f644bff22e1e34c22</anchor>
      <arglist>(int indx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetClass</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>aa3c48540d6fb0bd0489728e09ef5340d</anchor>
      <arglist>(int indx) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetClassString</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>afa70e660173650d06ba8957abd2ad7d2</anchor>
      <arglist>(int indx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>af4b57d21919c42d55af03391f91a1c08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>_map</name>
      <anchorfile>classOpenBabel_1_1OBAtomClassData.html</anchorfile>
      <anchor>a9683dd28083044f5c5ecf3bd4d828265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGenericData</name>
    <filename>classOpenBabel_1_1OBGenericData.html</filename>
    <member kind="function">
      <type></type>
      <name>OBGenericData</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac1d123c6ea761d25e7b4066501eb3652</anchor>
      <arglist>(const std::string attr=&quot;undefined&quot;, const unsigned int type=OBGenericDataType::UndefinedData, const DataOrigin source=any)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBGenericData</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>acb834533508953a264ed93b74fddad8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBBase</name>
    <filename>classOpenBabel_1_1OBBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBBase</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a7a58af02c4e2dd0d9b174b3032f1ffa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBBitVec</name>
    <filename>classOpenBabel_1_1OBBitVec.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; unsigned &gt;</type>
      <name>word_vector</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a732c7bffa6fdaeb8996f3a63450f422f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBBitVec</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>af0100bd07b2642e38b29dc8e74ff765b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBBitVec</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>ac5a4c3682c88b8d666b5d7d33183fb55</anchor>
      <arglist>(unsigned size_in_bits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBBitVec</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a1a1bd9c96031c99d3209b04ef50b4d6c</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBitOn</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a0920b57e131b9eab47d6939e890cd521</anchor>
      <arglist>(unsigned bit_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBitOff</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a5ca76b0cbbf2dd86395b0af704c8cdfb</anchor>
      <arglist>(unsigned bit_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRangeOn</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a1a5ff904f4dbba5c3d92bb1d98fa23c2</anchor>
      <arglist>(unsigned lo_bit_offset, unsigned hi_bit_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRangeOff</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>af248c931e7d8abdcb0ca18ba0a3e8533</anchor>
      <arglist>(unsigned lo_bit_offset, unsigned hi_bit_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fold</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a47b489f96fb83fb92444dc4fc69d052e</anchor>
      <arglist>(unsigned new_bit_size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FirstBit</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>ac00671a01df7cc0b2751cf01576cb48b</anchor>
      <arglist>(unsigned bit_offset=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NextBit</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>ab8bac9f6bedd4c94792757d965945ac6</anchor>
      <arglist>(int last_bit_offset) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndBit</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a787ec2b13a14e73a2732a5eb0941c89a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>aa28b8191c62589d996ac605c9cbe5829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>CountBits</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>acf47ba30bf82aff0a9f03029917c5849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a6fcfd4a80bfd7dc324f815cd351bfbdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>aaef62c8761ddd1b95824fc57b1b277b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Resize</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a7bc2d3a9e8b18736d47932ba327afd38</anchor>
      <arglist>(unsigned size_in_bits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ResizeWords</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a6b57d4f315f27f863dfaba863f9d6c4c</anchor>
      <arglist>(unsigned size_in_words)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BitIsSet</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a9cbd85a20d3c22eed705e4215b5beff7</anchor>
      <arglist>(unsigned bit_offset) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BitIsOn</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>ad06f035d55e669326f14cd7c6ff724cc</anchor>
      <arglist>(int bit_offset) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FromVecInt</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a6919c04c8f2a7a600d926dfb69a2ccff</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;bit_offsets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FromString</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a0e38205f69ea775ac85766e8fa84aa09</anchor>
      <arglist>(const std::string &amp;line, int bits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToVecInt</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>ad336607832d6ef7e48bed9fe103e0fa5</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;bit_offsets) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Negate</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a00e05e1bb6f3185b1a40728679be5274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWords</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a56df5cb29ee1da7ea5626ab4c0f35882</anchor>
      <arglist>(word_vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a24793888dd45beaff49d652ce07bd823</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a089f455ab3d208b87f8492d900009a47</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator|=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>ad34fbd2840a8afd87d69f4f71174407d</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator|=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a3f7949c8ca082670fa93310be6576854</anchor>
      <arglist>(int bit_offset)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator^=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>afb212210bd7dffef43eaca0db7e3a499</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a321d8efee0bf7ca07bbffe94bda40b87</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>aa7711d3edd25794568784a430fd7b062</anchor>
      <arglist>(const OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a1f22ca998400b0babe0bee468189225b</anchor>
      <arglist>(int bit_offset) const </arglist>
    </member>
    <member kind="friend">
      <type>friend OBBitVec</type>
      <name>operator|</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a1c09da3d5e947c68ef25c4fa7a72fbc3</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend OBBitVec</type>
      <name>operator&amp;</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a9beb722c4fb6a164ca45704c92c2eb35</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend OBBitVec</type>
      <name>operator^</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a60e304c03f383f60b6bdddc2b989e77b</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend OBBitVec</type>
      <name>operator-</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a9afe9bbf2fcb9441afbb636aad51e27e</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a1ebdca3306fde1d1553fb6f796121a34</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>aff92f9cf4ab168373dd84cb3f50714b2</anchor>
      <arglist>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a159591a12e5958414000352f4fb32f85</anchor>
      <arglist>(std::istream &amp;is, OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOpenBabel_1_1OBBitVec.html</anchorfile>
      <anchor>a7b0a6021022c32f1e21ea411427a1d00</anchor>
      <arglist>(std::ostream &amp;os, const OBBitVec &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBBond</name>
    <filename>classOpenBabel_1_1OBBond.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="enumeration">
      <name>Flag</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3f3de3e0d751949b8d0b60ffb302944a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aromatic</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ring</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Closure</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StereoFlag</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afbdb429fe4a7d37960636a555de77326</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Wedge</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WedgeOrHash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CisOrTrans</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBBond</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a61559abfacb167bad8bb124d1f899b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBBond</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>af3978005314074b4383b10d497b55003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIdx</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ab994a975e39f5c62288f4f972b6f90c9</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetId</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a383094c5a19383cf09f3dfb4c1de1da2</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBO</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3b00183cecf8df500db30888b4f83e70</anchor>
      <arglist>(int order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBondOrder</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afb89a19ab65bff6626af0eccfb83af07</anchor>
      <arglist>(int order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBegin</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3c443bcf96eac155aa058b69cc59aa4e</anchor>
      <arglist>(OBAtom *begin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnd</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a9bcf1c90715c368ce2896acae75235c4</anchor>
      <arglist>(OBAtom *end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a962b3010305cfb80ba816a0e54097dee</anchor>
      <arglist>(OBMol *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLength</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ac7d5e7adb0a537d92a628c811148dc21</anchor>
      <arglist>(OBAtom *fixed, double length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLength</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a62b38719673238813acc911788969922</anchor>
      <arglist>(double length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a89e52e2c0a57a3f936e8713406cc45e9</anchor>
      <arglist>(int index, OBAtom *begin, OBAtom *end, int order, int flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetKSingle</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>acb95632fbaba13a5aa138725a20f2c0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetKDouble</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a2372682111abb0a7d49ba2f6caa7f51f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetKTriple</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a068e086977f8e15b07d3c3d32f622ead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAromatic</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3d29498c15007d9b6729e26784f23a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWedge</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aac63169d5f12da96ad067cc8194c8cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a25f82438018e969b4feda4a25042c608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetWedgeOrHash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>abc50b699bc2efd24c5a65295b82f0ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUp</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a1b06560e0e01a806b92c2386220d0b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDown</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a7690859a81831984dbc0fa73313d44b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInRing</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aacde511d3c9a744b44c88958bb86eb68</anchor>
      <arglist>(bool set=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetClosure</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ab499793fc98aadbaa192756b8327016d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetHash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a934251078b7907fd8cd8573c40fdea58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetWedge</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a8425a34105ee2f2e152da12ebca9960e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetUp</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a88d9f308b5a9d49e98da1c6bd195358f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetDown</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a561d657e1cc83679879b2b8f662b9205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAromatic</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a2fcf3bf429f36281a43c879e40e75f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetKekule</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a512e7b122631a29f1ef8c679704632cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetIdx</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a80892a7fdfc7180a85160279c1186952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetId</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a1e4a97cdb0dce128f98c6c08ec7c85e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetBO</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ad4d2cadd80651fe9e8bc35c492aa5667</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetBondOrder</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a753514f0d4afe52f08f3ace5cfc727bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetFlags</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aa793cd236a5be4bd934b9a43b28129f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetBeginAtomIdx</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a831ee182c3fb21b73a712f4d5c19bf92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetEndAtomIdx</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a35e027ae790e6e8d7d5c2c21cb4925da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetBeginAtom</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>afdda9b904cabc9ce0335a665988ab143</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const OBAtom *</type>
      <name>GetBeginAtom</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ada14874eb793cf1ab7dee5b50cab9422</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetEndAtom</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aee593e9cc14031b07e3dc63a003c345f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const OBAtom *</type>
      <name>GetEndAtom</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a996c3317c41ba042ad7293f6db16906c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetNbrAtom</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a30735471b108fe43965fd2d0a9fe86a0</anchor>
      <arglist>(OBAtom *ptr)</arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetParent</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ad8480b61159bc6cb861b17341dc2b29a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetEquibLength</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a5a63a8b7f30958105ce72602da6715e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetLength</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aae1577c27936bc32d489469f228cc2a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNbrAtomIdx</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ae3aba2dee7140a159fb534747bb2dc7a</anchor>
      <arglist>(OBAtom *ptr)</arglist>
    </member>
    <member kind="function">
      <type>OBRing *</type>
      <name>FindSmallestRing</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ac567d206e2ca785c9a6d9d46ee00bb45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAromatic</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a4ef863ca7ed29e266960966a66dc8fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInRing</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aa17842bd610dc8b2ede2fe324738fe5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRotor</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a0919315f7a2fd68937c561186be76e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAmide</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a86eb2acbb9c5811e645df18b8b0bacf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsPrimaryAmide</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a8d59ca837068a807d393dab30cf72775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSecondaryAmide</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a38f8ea65888a454fa07b77cdd4aa41ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTertiaryAmide</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a771d7a8c76475f1e72a75e8330fac6d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEster</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a783023d0c499c732c067d566c90b67ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCarbonyl</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a0b3a46209d5f71fd8b5717a81dce7dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSingle</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aa7c514e18d5bbe2873dc223a02df526e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDouble</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a66926118e966d8cdb17a6ae23f2e89f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTriple</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ae763d876fdca6bb00dd7d97574c9c1d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsKSingle</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3dcf63c2cdd597361fe1f140501fb4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsKDouble</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a1293d36d6ef65f89892ed57092aeb157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsKTriple</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ad2ccb49198384c9d22b47ac7d0c4de90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsClosure</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ab91f9d866c216bcb3ffc5aa0774b5177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUp</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a1733c541422f1bec76b19733d5f6f046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDown</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a4ff4d4e51ec0a91f7b8174265de188e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsWedge</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a70910881ff95404e96c9b40d33e0db76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ab5e8e371f621ba037c843f6da7fe6bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsWedgeOrHash</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>ad5c6dd89356b7fdfffc9c72020fec0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCisOrTrans</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a892ffd8f4ddd7adbe285b6bf7133aa7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDoubleBondGeometry</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aed0dfa6939f68b337f13fbcf4e0f3da7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Visit</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a6368d7673f23186649b2969ade3661d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasFlag</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a152d1276438a7bf4a6ac76d6305c84b2</anchor>
      <arglist>(int flag) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFlag</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>adcdab8f96dc4fdc2940749e527087245</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UnsetFlag</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a401b99defa8a57195dc40a2604cee115</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_idx</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a1219a011a5e0ec59c67a5a873d81986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBMol *</type>
      <name>_parent</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aa15238ffbdb1330727678c9d6553d6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBAtom *</type>
      <name>_bgn</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3a61f73b711933e11ee793bf8fc550e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBAtom *</type>
      <name>_end</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aa094fa86d6e276e37457b5f662d386e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>_order</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>a3db9d8d4a032ad98c3cc9139bff39a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short int</type>
      <name>_flags</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>aec57dcfb24a8b5496b6319fa1172fa5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>_id</name>
      <anchorfile>classOpenBabel_1_1OBBond.html</anchorfile>
      <anchor>accc49a515c7a81154bd46a8ea8a16204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBBondTyper</name>
    <filename>classOpenBabel_1_1OBBondTyper.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBBondTyper</name>
      <anchorfile>classOpenBabel_1_1OBBondTyper.html</anchorfile>
      <anchor>af7ac382f652408141331e40f908c46b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBBondTyper</name>
      <anchorfile>classOpenBabel_1_1OBBondTyper.html</anchorfile>
      <anchor>a72db550a153a452b1ed3d4ac2cc0d90c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBBondTyper.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBBondTyper.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignFunctionalGroupBonds</name>
      <anchorfile>classOpenBabel_1_1OBBondTyper.html</anchorfile>
      <anchor>aa5af3b65ac3956ea6ee5e16198e5bb7a</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBBuilder</name>
    <filename>classOpenBabel_1_1OBBuilder.html</filename>
    <member kind="function">
      <type></type>
      <name>OBBuilder</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a7bb41c313c47405a2040198e671caad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadFragments</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>afe0a7e760f4908db34dfb69dc65d3bba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Build</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>af20dd57788f4898cd7377dffe63986fc</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetKeepRings</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>acf9a71f4ec162379069afdcae3088beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetKeepRings</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>aa981684e16a4cc7f7acf0cb9df1ce55b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector3</type>
      <name>GetNewBondVector</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a103258e3f686fac67714a2a847bd7466</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector3</type>
      <name>GetNewBondVector</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>ad0cefa50ad126c06c03bad33175ce2b4</anchor>
      <arglist>(OBAtom *atom, double length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Connect</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>abe40cdbb1abc8939273d9cde6b7b638a</anchor>
      <arglist>(OBMol &amp;mol, int a, int b, vector3 &amp;newpos, int bondOrder=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Connect</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>af123db2b6c32f7d210f4455e7fb8cccc</anchor>
      <arglist>(OBMol &amp;mol, int a, int b, int bondOrder=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Swap</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>ab97bb4c77a46265bdedaead1a6463ca7</anchor>
      <arglist>(OBMol &amp;mol, int a, int b, int c, int d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CorrectStereoBonds</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a6898b04c792072e4ace54885e9ff7b10</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CorrectStereoAtoms</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a568e42fdfa07962a14761bb9875ee138</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsSpiroAtom</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a7baa4d72adf170defdf09a225b3edf57</anchor>
      <arglist>(unsigned long atomId, OBMol &amp;mol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBBitVec</type>
      <name>GetFragment</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a3ab05c6d2aa0e1597398b85b825b57b1</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AddNbrs</name>
      <anchorfile>classOpenBabel_1_1OBBuilder.html</anchorfile>
      <anchor>a26e58d067cc3985a84fbf5cfa031947d</anchor>
      <arglist>(OBBitVec &amp;fragment, OBAtom *atom)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBChainsParser</name>
    <filename>classOpenBabel_1_1OBChainsParser.html</filename>
    <member kind="function">
      <type></type>
      <name>OBChainsParser</name>
      <anchorfile>classOpenBabel_1_1OBChainsParser.html</anchorfile>
      <anchor>aa593ab79033f0bec4605419515d00393</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBChainsParser</name>
      <anchorfile>classOpenBabel_1_1OBChainsParser.html</anchorfile>
      <anchor>ac717b59426373eedc1ebb4442b3d7b3e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PerceiveChains</name>
      <anchorfile>classOpenBabel_1_1OBChainsParser.html</anchorfile>
      <anchor>ab4077f1ebf77386df177be76a63b6b10</anchor>
      <arglist>(OBMol &amp;mol, bool nukeSingleResidue=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBChargeModel</name>
    <filename>classOpenBabel_1_1OBChargeModel.html</filename>
    <base>OpenBabel::OBPlugin</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ComputeCharges</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>a5169afc2e696bcdc3069120e4088b484</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>GetFormalCharges</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>ab389d7d8e54da1b05bd936cb82deb650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>GetPartialCharges</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>a4466833d6a376b5a0f975ffe41716bba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetDipoleMoment</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>a9b1ae06b444f49a68b2e2c8ac9a0c534</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FillChargeVectors</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>aefec0fbdf06bb4199614da22f1a9deee</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>DipoleScalingFactor</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>a38074e4c8bdf55f4c0fc5f66bf8e8065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_partialCharges</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>aacfd3c312da07c274fddf70535d5485e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_formalCharges</name>
      <anchorfile>classOpenBabel_1_1OBChargeModel.html</anchorfile>
      <anchor>adfe2c37552d808ee93749e89ba1e1030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBConformerFilter</name>
    <filename>classOpenBabel_1_1OBConformerFilter.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsGood</name>
      <anchorfile>classOpenBabel_1_1OBConformerFilter.html</anchorfile>
      <anchor>a51c2e3f536769e1c08d67d3bd51bc051</anchor>
      <arglist>(const OBMol &amp;mol, const RotorKey &amp;key, double *coords)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBConformerFilters</name>
    <filename>classOpenBabel_1_1OBConformerFilters.html</filename>
    <base>OpenBabel::OBConformerFilter</base>
    <member kind="function">
      <type></type>
      <name>OBConformerFilters</name>
      <anchorfile>classOpenBabel_1_1OBConformerFilters.html</anchorfile>
      <anchor>a3ce03124b1c399ec47c9f73311cc7808</anchor>
      <arglist>(const std::vector&lt; OBConformerFilter * &gt; &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsGood</name>
      <anchorfile>classOpenBabel_1_1OBConformerFilters.html</anchorfile>
      <anchor>aa37ca1a89ffb71694922e4b90b012ab2</anchor>
      <arglist>(const OBMol &amp;mol, const RotorKey &amp;key, double *coords)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBConformerFilter * &gt;</type>
      <name>m_filters</name>
      <anchorfile>classOpenBabel_1_1OBConformerFilters.html</anchorfile>
      <anchor>a18cff861d594e096ca411d3cefafe114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBStericConformerFilter</name>
    <filename>classOpenBabel_1_1OBStericConformerFilter.html</filename>
    <base>OpenBabel::OBConformerFilter</base>
    <member kind="function">
      <type></type>
      <name>OBStericConformerFilter</name>
      <anchorfile>classOpenBabel_1_1OBStericConformerFilter.html</anchorfile>
      <anchor>a914bcf8638e8e48af7c5f9dfc2222a2a</anchor>
      <arglist>(double cutoff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsGood</name>
      <anchorfile>classOpenBabel_1_1OBStericConformerFilter.html</anchorfile>
      <anchor>aa37ca1a89ffb71694922e4b90b012ab2</anchor>
      <arglist>(const OBMol &amp;mol, const RotorKey &amp;key, double *coords)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBConformerScore</name>
    <filename>classOpenBabel_1_1OBConformerScore.html</filename>
    <member kind="enumeration">
      <name>Preferred</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HighScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199a073a4c447a7027d5e628f4ff35c02ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199a77a557955ebc510e6b694ad1a33ce8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Convergence</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Highest</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfa4bf5c35ed60c6d5584981ba1688d3eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lowest</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfaa1a11438163780169b78e0ee94e4ff31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Sum</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfa518f6bbe779cc0085da5461c257fd8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Average</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfab3c87ec2c47256239220b24e46acda7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Preferred</type>
      <name>GetPreferred</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a9c17ca51589a988f78ffaecd8f10f26a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Convergence</type>
      <name>GetConvergence</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a3a532c5117d7765c1159c25f5713fab1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Score</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a49dff79670ea23af9bf3c35b15f21627</anchor>
      <arglist>(OBMol &amp;mol, unsigned int index, const RotorKeys &amp;keys, const std::vector&lt; double * &gt; &amp;conformers)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRMSDConformerScore</name>
    <filename>classOpenBabel_1_1OBRMSDConformerScore.html</filename>
    <base>OpenBabel::OBConformerScore</base>
    <member kind="enumeration">
      <name>Preferred</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HighScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199a073a4c447a7027d5e628f4ff35c02ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199a77a557955ebc510e6b694ad1a33ce8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Convergence</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Highest</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfa4bf5c35ed60c6d5584981ba1688d3eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lowest</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfaa1a11438163780169b78e0ee94e4ff31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Sum</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfa518f6bbe779cc0085da5461c257fd8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Average</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfab3c87ec2c47256239220b24e46acda7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Preferred</type>
      <name>GetPreferred</name>
      <anchorfile>classOpenBabel_1_1OBRMSDConformerScore.html</anchorfile>
      <anchor>acd1109a84508503c02e429be0fd3960b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Convergence</type>
      <name>GetConvergence</name>
      <anchorfile>classOpenBabel_1_1OBRMSDConformerScore.html</anchorfile>
      <anchor>a58c03d41bd16b4017639f6bf41f8de45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Score</name>
      <anchorfile>classOpenBabel_1_1OBRMSDConformerScore.html</anchorfile>
      <anchor>af48ac6558d86f5b0d3e7981ee51033a8</anchor>
      <arglist>(OBMol &amp;mol, unsigned int index, const RotorKeys &amp;keys, const std::vector&lt; double * &gt; &amp;conformers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBEnergyConformerScore</name>
    <filename>classOpenBabel_1_1OBEnergyConformerScore.html</filename>
    <base>OpenBabel::OBConformerScore</base>
    <member kind="enumeration">
      <name>Preferred</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HighScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199a073a4c447a7027d5e628f4ff35c02ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>ae5293b2df07c4f01e42a925f954fe199a77a557955ebc510e6b694ad1a33ce8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Convergence</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Highest</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfa4bf5c35ed60c6d5584981ba1688d3eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lowest</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfaa1a11438163780169b78e0ee94e4ff31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Sum</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfa518f6bbe779cc0085da5461c257fd8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Average</name>
      <anchorfile>classOpenBabel_1_1OBConformerScore.html</anchorfile>
      <anchor>a11429dfa214276750cb761b6261485cfab3c87ec2c47256239220b24e46acda7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Preferred</type>
      <name>GetPreferred</name>
      <anchorfile>classOpenBabel_1_1OBEnergyConformerScore.html</anchorfile>
      <anchor>acd1109a84508503c02e429be0fd3960b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Convergence</type>
      <name>GetConvergence</name>
      <anchorfile>classOpenBabel_1_1OBEnergyConformerScore.html</anchorfile>
      <anchor>a58c03d41bd16b4017639f6bf41f8de45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Score</name>
      <anchorfile>classOpenBabel_1_1OBEnergyConformerScore.html</anchorfile>
      <anchor>af48ac6558d86f5b0d3e7981ee51033a8</anchor>
      <arglist>(OBMol &amp;mol, unsigned int index, const RotorKeys &amp;keys, const std::vector&lt; double * &gt; &amp;conformers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBConformerSearch</name>
    <filename>classOpenBabel_1_1OBConformerSearch.html</filename>
    <member kind="function">
      <type></type>
      <name>OBConformerSearch</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a3d54183d8351d93903a41fb8e2d6eb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBConformerSearch</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a92682a05ad305ecfb357868cda17b6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a9084f759abbf98766f3fed69c14b568a</anchor>
      <arglist>(const OBMol &amp;mol, int numConformers=30, int numChildren=5, int mutability=5, int convergence=25)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumConformers</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a5ee2e4f8c4c9cc9fed9949e54b8c728e</anchor>
      <arglist>(int numConformers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumChildren</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a25b1f90c4963a806ac4aa898f542afa3</anchor>
      <arglist>(int numChildren)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMutability</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a375b8f03c5cd5fd162cea6bd78c14356</anchor>
      <arglist>(int mutability)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConvergence</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a259d7fb57066383560678537a93d79ad</anchor>
      <arglist>(int convergence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedBonds</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a045f339459d9cc1892cfe9dcdbed2b60</anchor>
      <arglist>(const OBBitVec &amp;fixedBonds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a95879a373f39c05163d27941df8c18c6</anchor>
      <arglist>(OBConformerFilter *filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScore</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>ab6e866e55e02b792a2b3837ee949bbfd</anchor>
      <arglist>(OBConformerScore *score)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Search</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>af648d58ec31e39dff6af003f8e6b5ca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RotorKeys &amp;</type>
      <name>GetRotorKeys</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a6753356d193ce72d72d1fc1cfee74639</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetConformers</name>
      <anchorfile>classOpenBabel_1_1OBConformerSearch.html</anchorfile>
      <anchor>a908a9729ddc64dd383f093ab30a0aae3</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGlobalDataBase</name>
    <filename>classOpenBabel_1_1OBGlobalDataBase.html</filename>
    <member kind="function">
      <type></type>
      <name>OBGlobalDataBase</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a36b81861b36e935bf0a39dee7745c3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBGlobalDataBase</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a8556118660d5608e1c18a8e67a93df4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5ebfe2dd02a8ba2b7e84f1f6d55c74cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a9a84dbfb089769dec48cd6f6eca1057b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBElement</name>
    <filename>classOpenBabel_1_1OBElement.html</filename>
    <member kind="function">
      <type></type>
      <name>OBElement</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>adc9911e43430fd65726f393308db7e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBElement</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>aade9292237f46323dd52c6822919a791</anchor>
      <arglist>(int num, const char *sym, double ARENeg, double rcov, double rvdw, int maxbo, double mass, double elNeg, double ionize, double elAffin, double red, double green, double blue, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a8f31c44517534e1f574a8863b62a3393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>GetSymbol</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a084678724fe2a604272869011725a54f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetCovalentRad</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a75c2e30ac7073faf1846c1d95f10477e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetVdwRad</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a7efca557d66da627333df398980c6126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMass</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>ae10e5ef3968d6e55522d0480cea9c660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMaxBonds</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a40026d51ab0e4e95dff002676ccac3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetElectroNeg</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a79b6be626237d9dba8525e2ed748dd43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAllredRochowElectroNeg</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a1c07be5f389f4e10159862452c3bba68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetIonization</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a440bfda6981c965bd3064ab806f6e8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetElectronAffinity</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>aaa8e88b8910a30ae9de3ef9b3aab921c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetName</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a8facce7acc5e95194c232b9bbd1363d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRed</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a7b09cecd8e93a824444dd769ac756c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetGreen</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>ad75a0aa975fc5c2b3228306e590ef399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBlue</name>
      <anchorfile>classOpenBabel_1_1OBElement.html</anchorfile>
      <anchor>a9108d11a6d6f06fb9788b2fd10f2e9d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBElementTable</name>
    <filename>classOpenBabel_1_1OBElementTable.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBElementTable</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a87bb51173627999f7648500e25896dad</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBElementTable</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a47b05df47eb3884d0c951f65727d8022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNumberOfElements</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a656877a45442ec49f7410896abd65ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a8228e8800bb8fae4658c751d6e999918</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a4f3c95b233fb0842946292b984acf1a3</anchor>
      <arglist>(const char *, int &amp;iso)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a171c098398572c552e88be4e703127bb</anchor>
      <arglist>(std::string name, int &amp;iso)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetSymbol</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a18907ad1590deb926b43c4f08cac9405</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetVdwRad</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a5534d1a7688c45521d2fee711d5a304b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetCovalentRad</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a77199f1c422c616646ba373e1d79e485</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMass</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a77ac743193728f2c07da8d84cc0f60e7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CorrectedBondRad</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>ae62d275baa205c4838fb498429d906e1</anchor>
      <arglist>(int, int=3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CorrectedVdwRad</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>af05f1d98b5f08cad58d6e1b41976e7b7</anchor>
      <arglist>(int, int=3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMaxBonds</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a130b6cb6f0bee924e3f183d607200f2f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetElectroNeg</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>ad7d453967ce8286a47aae29825f22cc5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAllredRochowElectroNeg</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>af8ffe9fb539c2e7222c0f9df2a05d612</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetIonization</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a891e482e56f4a74680df62002b4eef23</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetElectronAffinity</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a440d72ea4b65b4d6fed724e47db623fc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetRGB</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>a6bec3afa386bc2df86bc1c59a2b0396e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetName</name>
      <anchorfile>classOpenBabel_1_1OBElementTable.html</anchorfile>
      <anchor>aea00d52050ec324fef7c792567341c09</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBIsotopeTable</name>
    <filename>classOpenBabel_1_1OBIsotopeTable.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBIsotopeTable</name>
      <anchorfile>classOpenBabel_1_1OBIsotopeTable.html</anchorfile>
      <anchor>a16b5f3d09983bd58b93991f688ec495c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBIsotopeTable</name>
      <anchorfile>classOpenBabel_1_1OBIsotopeTable.html</anchorfile>
      <anchor>a509d31ff06b39b2db2a538be6eef77a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBIsotopeTable.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBIsotopeTable.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetExactMass</name>
      <anchorfile>classOpenBabel_1_1OBIsotopeTable.html</anchorfile>
      <anchor>a4c5bc398ee57e26e5bd2d198b6d3ef0d</anchor>
      <arglist>(const unsigned int atomicNum, const unsigned int isotope=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBTypeTable</name>
    <filename>classOpenBabel_1_1OBTypeTable.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBTypeTable</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>a35e30738b52f297cdffdc3b1505d278f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBTypeTable</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>a72cd4a33759982430a7db60c3d392fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetFromType</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>a9b40b242258cc488f341d06412a1fb89</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetToType</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>aeb07d37f2d18888127964d11e28c1c12</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Translate</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>a9c5ec7f3f42fea1f014ac3f346c7aef4</anchor>
      <arglist>(char *to, const char *from)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Translate</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>a613e0ea0da4b4b0d26ea29439e3554a8</anchor>
      <arglist>(std::string &amp;to, const std::string &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Translate</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>ae6b8b982d19826ce1ba0f0727ff5e2c6</anchor>
      <arglist>(const std::string &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFromType</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>a1a9fe7160061744082f703249badf036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetToType</name>
      <anchorfile>classOpenBabel_1_1OBTypeTable.html</anchorfile>
      <anchor>af9d611bffc1f340b6017ad203493ec25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBResidueData</name>
    <filename>classOpenBabel_1_1OBResidueData.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBResidueData</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>a4ef264f8ff7fea2f1f720c38583bc329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetResName</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>afec8f68f06070cbd91a20b5d70f26e84</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LookupBO</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>a41190815d4d7f64a08eed50e39f64122</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LookupBO</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>a2261b40460f154a06dfb77c006d11c4f</anchor>
      <arglist>(const std::string &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LookupType</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>a0a88a935d72a1ad7c7f2e5ac8ef59df6</anchor>
      <arglist>(const std::string &amp;, std::string &amp;, int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AssignBonds</name>
      <anchorfile>classOpenBabel_1_1OBResidueData.html</anchorfile>
      <anchor>a61ad927515ed6a722fd90d3610759197</anchor>
      <arglist>(OBMol &amp;, OBBitVec &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBDescriptor</name>
    <filename>classOpenBabel_1_1OBDescriptor.html</filename>
    <base>OpenBabel::OBPlugin</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Predict</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a21c9550baf45496df7f4b4ee9e494683</anchor>
      <arglist>(OBBase *, std::string *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>PredictAndSave</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a3a6e9ddee5b20a8911bc9f6e407d1abd</anchor>
      <arglist>(OBBase *pOb, std::string *param=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetStringValue</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ade8613a3e82627568adbac497bd3422b</anchor>
      <arglist>(OBBase *pOb, std::string &amp;svalue, std::string *param=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Compare</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a5a775da37f5ce464013813ec66b3a349</anchor>
      <arglist>(OBBase *pOb, std::istream &amp;ss, bool noEval, std::string *param=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Order</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ac9b3638a021a9cafc06d8e7059907740</anchor>
      <arglist>(double p1, double p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Order</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ada86af1dfb13dd68c119d412480c78c3</anchor>
      <arglist>(std::string s1, std::string s2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>FilterCompare</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a1d0907c6fab9cdb01ce11858eb5f0860</anchor>
      <arglist>(OBBase *pOb, std::istream &amp;ss, bool noEval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AddProperties</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a2230dfc67c9b617df81f950e382844cc</anchor>
      <arglist>(OBBase *pOb, const std::string &amp;DescrList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DeleteProperties</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a1a089d9c827830b5a9a2e644b267e510</anchor>
      <arglist>(OBBase *pOb, const std::string &amp;DescrList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetValues</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a789fe3d5cae737f1caa28590fe29f460</anchor>
      <arglist>(OBBase *pOb, const std::string &amp;DescrList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; std::string, std::string &gt;</type>
      <name>GetIdentifier</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a9d1adeb0f4720b6af7f0fc5569a8bb3e</anchor>
      <arglist>(std::istream &amp;optionText)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>ParsePredicate</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a20b0788ed84f1b69746dfd9ed06be507</anchor>
      <arglist>(std::istream &amp;optionText, char &amp;ch1, char &amp;ch2, std::string &amp;svalue)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>ReadStringFromFilter</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ac41e9b3233ce576c2e4c5b242767eaec</anchor>
      <arglist>(std::istream &amp;ss, std::string &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>CompareStringWithFilter</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a00c8a88c0a36c9a1167b119214e015e6</anchor>
      <arglist>(std::istream &amp;optionText, std::string &amp;s, bool noEval, bool NoCompOK=false)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>ispunctU</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a865d2be70640a96f185bf78dcaaea8b2</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>MatchPairData</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a4e794d96851deaad479e17b30928a3cd</anchor>
      <arglist>(OBBase *pOb, std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFingerprint</name>
    <filename>classOpenBabel_1_1OBFingerprint.html</filename>
    <base>OpenBabel::OBPlugin</base>
    <class kind="struct">OpenBabel::OBFingerprint::bit_or</class>
    <member kind="enumeration">
      <name>FptFlag</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a48c2b72feb2607662249c83e85ce665b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FPT_UNIQUEBITS</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a48c2b72feb2607662249c83e85ce665baa6c1016f52874254ed7604c44df21cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FPT_NOINFO</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a48c2b72feb2607662249c83e85ce665ba9220882080beed735edfcbc3175bc62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBFingerprint</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a55f9725c7e338f4d4c2d9f7a7c34f0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBit</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a70768d339cbfa0146c7f1cd278e05e19</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetBit</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a41fefad793d68714c5a0732b000bd1b2</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fold</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a9bbe06daca0e9e000492cc6a89d7dabd</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;vec, unsigned int nbits)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetFingerprint</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a462db518c432fa8fab958b8dd32d8a05</anchor>
      <arglist>(OBBase *pOb, std::vector&lt; unsigned int &gt; &amp;fp, int nbits=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>Flags</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a94a94537cc5ba96b1876db1b612b91a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetFlags</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a6948a255af347b37b32ba5c55d6368a4</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>DescribeBits</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a4ffe45da1e2dd403bf6b51364717d2a6</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt;, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Tanimoto</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>af244b13b4b50bb9343f3026d7372e964</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vec1, const std::vector&lt; unsigned int &gt; &amp;vec2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Tanimoto</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>ae6df021d906a48593e8f9ed11bd8d128</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>Getbitsperint</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>ad9ecfee3be06f4c37ef48506100f6f0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFingerprint *</type>
      <name>FindFingerprint</name>
      <anchorfile>classOpenBabel_1_1OBFingerprint.html</anchorfile>
      <anchor>a3f95fb7efe843a55b087edd16fbe4012</anchor>
      <arglist>(const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::FptIndexHeader</name>
    <filename>structOpenBabel_1_1FptIndexHeader.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>headerlength</name>
      <anchorfile>structOpenBabel_1_1FptIndexHeader.html</anchorfile>
      <anchor>ace6a28b9a2f58cb13b09af8fb5c739ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>nEntries</name>
      <anchorfile>structOpenBabel_1_1FptIndexHeader.html</anchorfile>
      <anchor>ad186ad63c9d2b800747b680984bb37eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>words</name>
      <anchorfile>structOpenBabel_1_1FptIndexHeader.html</anchorfile>
      <anchor>af562bd9c6faf08f0dab334b23d5788ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>fpid</name>
      <anchorfile>structOpenBabel_1_1FptIndexHeader.html</anchorfile>
      <anchor>afa1b09f7991580662a10548fd55700ee</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>datafilename</name>
      <anchorfile>structOpenBabel_1_1FptIndexHeader.html</anchorfile>
      <anchor>a5c36621530d43d4607e35153277a1058</anchor>
      <arglist>[256]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::FptIndex</name>
    <filename>structOpenBabel_1_1FptIndex.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>Read</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a0165efa2dfb7dd4f4d9aec3973b088f1</anchor>
      <arglist>(std::istream *pIndexstream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadIndex</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a5a8fd9bdf05856c1effa4ac58de2d14f</anchor>
      <arglist>(std::istream *pIndexstream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadHeader</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a5ddd4c4d6e70ac29a06a6ca0280ddf06</anchor>
      <arglist>(std::istream *pIndexstream)</arglist>
    </member>
    <member kind="function">
      <type>OBFingerprint *</type>
      <name>CheckFP</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a682b05eef24f11179405526ff6f81095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FptIndexHeader</type>
      <name>header</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a6d5979c64e7513c829f24e421d253ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>fptdata</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a1d071a268033064b8771f42e57e20a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>seekdata</name>
      <anchorfile>structOpenBabel_1_1FptIndex.html</anchorfile>
      <anchor>a744eaebf662c3b17f14de1cf9d628278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::FastSearch</name>
    <filename>classOpenBabel_1_1FastSearch.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>ReadIndexFile</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a4f4f7dec3fe4bb72fc8c8da2594c5787</anchor>
      <arglist>(std::string IndexFilename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ReadIndex</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a5a306c0d134e330a1d33ae0a6cbc10a1</anchor>
      <arglist>(std::istream *pIndexstream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FastSearch</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a2d2d75247574ce3d0f7bbc0d4283b3c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Find</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a575cc7caa2b2a42bec8b47e7c0206a80</anchor>
      <arglist>(OBBase *pOb, std::vector&lt; unsigned int &gt; &amp;SeekPositions, unsigned int MaxCandidates)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindMatch</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a96dcab8b2694f95817af39be06f20d53</anchor>
      <arglist>(OBBase *pOb, std::vector&lt; unsigned int &gt; &amp;SeekPositions, unsigned int MaxCandidates)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindSimilar</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>aff36c0fb2899c7d30277788ddc536340</anchor>
      <arglist>(OBBase *pOb, std::multimap&lt; double, unsigned int &gt; &amp;SeekposMap, double MinTani, double MaxTani=1.1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindSimilar</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>af660415f38248e3b885bb22dc7805558</anchor>
      <arglist>(OBBase *pOb, std::multimap&lt; double, unsigned int &gt; &amp;SeekposMap, int nCandidates=0)</arglist>
    </member>
    <member kind="function">
      <type>OBFingerprint *</type>
      <name>GetFingerprint</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a753d677380f29e219da02952b7ef7430</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FptIndexHeader &amp;</type>
      <name>GetIndexHeader</name>
      <anchorfile>classOpenBabel_1_1FastSearch.html</anchorfile>
      <anchor>a6c00d74d4b0859279a48173737b1f8b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::FastSearchIndexer</name>
    <filename>classOpenBabel_1_1FastSearchIndexer.html</filename>
    <member kind="function">
      <type></type>
      <name>FastSearchIndexer</name>
      <anchorfile>classOpenBabel_1_1FastSearchIndexer.html</anchorfile>
      <anchor>a21c06e59e7d95a0bf4a221aa31b61ce8</anchor>
      <arglist>(std::string &amp;datafilename, std::ostream *os, std::string &amp;fpid, int FptBits=0, int nmols=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSearchIndexer</name>
      <anchorfile>classOpenBabel_1_1FastSearchIndexer.html</anchorfile>
      <anchor>af219ac452127a2cc2af7e938db522d37</anchor>
      <arglist>(FptIndex *pindex, std::ostream *os, int nmols=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FastSearchIndexer</name>
      <anchorfile>classOpenBabel_1_1FastSearchIndexer.html</anchorfile>
      <anchor>a4ad5fb826838fc07d9bee2c09b5ef039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Add</name>
      <anchorfile>classOpenBabel_1_1FastSearchIndexer.html</anchorfile>
      <anchor>ad4714872089241b8d1b5bb6b714b5e5c</anchor>
      <arglist>(OBBase *pOb, std::streampos seekpos)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::LineSearchType</name>
    <filename>structOpenBabel_1_1LineSearchType.html</filename>
    <member kind="enumvalue">
      <name>Simple</name>
      <anchorfile>structOpenBabel_1_1LineSearchType.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7aebfbf7dc5cde0772efb1aa49712bd76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Newton2Num</name>
      <anchorfile>structOpenBabel_1_1LineSearchType.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a38e70ed84d1b5d7404464b69c8e5093a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFFParameter</name>
    <filename>classOpenBabel_1_1OBFFParameter.html</filename>
    <member kind="function">
      <type>OBFFParameter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a31c588c926e46d76ea0b6ea45e6f98a8</anchor>
      <arglist>(const OBFFParameter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>a</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>aa4c2a5552e9bc49b1816ff532f558c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a148e3876077787926724625411d6e7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>c</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a4e1e0e72dd773439e333c84dd762a9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a6f364afbe132c4ecfea48bde1b0618ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_a</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a86e4c325d35090aeb11ec1be9d2c4b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_b</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>aef54f9555eb83d9adc8bfe4c51a41048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_c</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a612751a856867453e2cf240a13b1c69a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_d</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a436665a0d94c49fd61354af10a56e33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>_ipar</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a34493373e0f4d6c8c596512041153e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>_dpar</name>
      <anchorfile>classOpenBabel_1_1OBFFParameter.html</anchorfile>
      <anchor>a1c0d7fbb96a8e7c4dd0fec6ced77c5b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFFCalculation2</name>
    <filename>classOpenBabel_1_1OBFFCalculation2.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBFFCalculation2</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a04b016790fa35bca53ad7e92809e5c76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetupPointers</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>aa063f21c51ee71ca470bce2e7042b815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>energy</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a1d26cc49e49afe96406210d6beaf418a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a9541ea5166923fc18311a3cfc4843518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a3b7f67e0c88d3405346c2aa592d75faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a1e39ca816fd0ddb7f59cc2260755b796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a086acc8d6f926ab15c5c385455810445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a993ba135affe04e9501db67669648be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>aadfcce040172c26d6082c4834a1c1469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>ab0d0610fa74feb39da624f420e1f90ba</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a8185562751b948f890ffc0d869341fae</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFFCalculation3</name>
    <filename>classOpenBabel_1_1OBFFCalculation3.html</filename>
    <base>OpenBabel::OBFFCalculation2</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBFFCalculation3</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a1adda0196551047b1256f060572007a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetupPointers</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>aa063f21c51ee71ca470bce2e7042b815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>af305879d7db682f069904a4532e57ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a9face146941b40a8f35a2d459a06f41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a6ddb04505fbda255d73c3e5d09571b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a8c8a61abf052a7ad6ce5f0f074ac351d</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>energy</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a1d26cc49e49afe96406210d6beaf418a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a9541ea5166923fc18311a3cfc4843518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a3b7f67e0c88d3405346c2aa592d75faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a1e39ca816fd0ddb7f59cc2260755b796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a086acc8d6f926ab15c5c385455810445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a993ba135affe04e9501db67669648be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>aadfcce040172c26d6082c4834a1c1469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>ab0d0610fa74feb39da624f420e1f90ba</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a8185562751b948f890ffc0d869341fae</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFFCalculation4</name>
    <filename>classOpenBabel_1_1OBFFCalculation4.html</filename>
    <base>OpenBabel::OBFFCalculation3</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBFFCalculation4</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation4.html</anchorfile>
      <anchor>acbada7180292de7f7c8cafc3c65ba802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetupPointers</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation4.html</anchorfile>
      <anchor>a23b6e1e5e28cdcd7afc3113b7a3bdbea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>d</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation4.html</anchorfile>
      <anchor>a457c0f77c032f8f7de69fabdd1a669a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_d</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation4.html</anchorfile>
      <anchor>a815ecadb16b028e5ca95121791128c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_d</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation4.html</anchorfile>
      <anchor>ae06bd6c1d1e4d2b8e2fe5ddb797b2164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_d</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation4.html</anchorfile>
      <anchor>a20a8d079b2a45b324c0b8c142510ee00</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>af305879d7db682f069904a4532e57ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a9face146941b40a8f35a2d459a06f41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a6ddb04505fbda255d73c3e5d09571b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_c</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation3.html</anchorfile>
      <anchor>a8c8a61abf052a7ad6ce5f0f074ac351d</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>energy</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a1d26cc49e49afe96406210d6beaf418a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a9541ea5166923fc18311a3cfc4843518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a3b7f67e0c88d3405346c2aa592d75faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a1e39ca816fd0ddb7f59cc2260755b796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a086acc8d6f926ab15c5c385455810445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a993ba135affe04e9501db67669648be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>pos_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>aadfcce040172c26d6082c4834a1c1469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_a</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>ab0d0610fa74feb39da624f420e1f90ba</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_b</name>
      <anchorfile>classOpenBabel_1_1OBFFCalculation2.html</anchorfile>
      <anchor>a8185562751b948f890ffc0d869341fae</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFFConstraint</name>
    <filename>classOpenBabel_1_1OBFFConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>OBFFConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>aaec19a6806233001c0fb9173903e5372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBFFConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a42a5eb0558a3777f22ab404b02a5fd1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetGradient</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>aa72374f7ad0c140529a3b010e7daf8af</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>factor</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a2d7e5dd7a479c4c7aef6e6133a1441c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>constraint_value</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a34ec2e15a6be688ae711d3917cf817af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rab0</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>aa1e6a4fbe89b7309e09a9ecd6b410f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rbc0</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a30de1b49893da89052152acbac377988</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ia</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a2c924fc0836c91dc1e9f1c4c443f53a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ib</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a264d7907938e52414f6007ea28c2d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ic</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a93787aabee2d583f4d29e32199feeccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a7441ef0865bcb3db9b8064dd7375c1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>a</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a9541ea5166923fc18311a3cfc4843518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>b</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a3b7f67e0c88d3405346c2aa592d75faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>c</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a8864f86536f4aef5a68274b98380e022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>d</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>abc62ecd7a79c7d1cd07ef8aee2ec0bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3</type>
      <name>grada</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a85f3dc7c6507fc363d7294b47d799738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3</type>
      <name>gradb</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a432477a5629da8236131cc2dacb776f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3</type>
      <name>gradc</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a9eda32553be7029c4f04b012b84a2555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3</type>
      <name>gradd</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraint.html</anchorfile>
      <anchor>a360127e447a0f25cfd633cba0c784db7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFFConstraints</name>
    <filename>classOpenBabel_1_1OBFFConstraints.html</filename>
    <member kind="function">
      <type></type>
      <name>OBFFConstraints</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ae5a473b68e3f49144e03ee8c99cec7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBFFConstraints</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>aabbe8ba0bb89a9324a43f54468bd6f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetConstraintEnergy</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ad5fd16d1e3dc861db030dab03b87f4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetGradient</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>aa72374f7ad0c140529a3b010e7daf8af</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>OBFFConstraints &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a23c4410bafb1dd9a449e8710e290fc64</anchor>
      <arglist>(const OBFFConstraints &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a3b4049f17c690c761669547608a29448</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFactor</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ac9ec43b972a3527b0177109fb471c6be</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIgnore</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ab8ae3696e95452349c4607d58c4d22fb</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtomConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a5800c3582d7de41d8f083d4fe6b75de4</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtomXConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ae22202328abe00f55d372e878279999b</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtomYConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ae0921729e3e6c132377c2aab8ded12ed</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtomZConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>afd75a15f84d65f464a0a4af4c44639ac</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDistanceConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a13b70932048e027b08ec61f403b2072d</anchor>
      <arglist>(int a, int b, double length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAngleConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a4534496875adeb67374b7d5a35194968</anchor>
      <arglist>(int a, int b, int c, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTorsionConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a5bec1b9b555729022a67186aa98a7c3c</anchor>
      <arglist>(int a, int b, int c, int d, double torsion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteConstraint</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a9bea7e159036a792452a1ef3d7d45c8b</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFactor</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a5fda52380450913006d8b39593956910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a9827f891ea982b6e8f01d9faf874efde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConstraintType</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a49d51b5d271f3108521bae71d040bdb5</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetConstraintValue</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ad19916dbb989f78adeb8473e09690dae</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConstraintAtomA</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a1bc3a0462c759c19696932aeba9d6b99</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConstraintAtomB</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>aa4ecc84d6c8c0c564e385338c650f843</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConstraintAtomC</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>ae6c629b2a434f81f2c6868ce4c137653</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetConstraintAtomD</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a51a05027c17b90c09dad6246a842231c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIgnored</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a1ef9644f813fd9ffba5f16718d1853d8</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixed</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a7b2f826c36d84c339e84ea30963c6a47</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsXFixed</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a5df69d12401e57429152f7dcda13c88b</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsYFixed</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a8919a12934df438f2911041578c48a36</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsZFixed</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a0957b149d0a1a1968d23022788fb70a7</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>GetIgnoredBitVec</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>aa32799d67f2aeece7ee1a0d0ce78d488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec</type>
      <name>GetFixedBitVec</name>
      <anchorfile>classOpenBabel_1_1OBFFConstraints.html</anchorfile>
      <anchor>a770eb922e5625b67a4e40b83b8fdc8cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBForceField</name>
    <filename>classOpenBabel_1_1OBForceField.html</filename>
    <base>OpenBabel::OBPlugin</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBForceField *</type>
      <name>MakeNewInstance</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad6b7355f59eca545c6921a7b16ad035b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBForceField</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab49558e469015d76e7c27ee0cfdf4a75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParameterFile</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>af264a32549daf4185196ac9d9c074833</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>GetUnit</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1107abae4af40cd96faa7385b4de79c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasAnalyticalGradients</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6bdadd446f41751086aff8c6a4fde5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a85e63dfcf5b43e5ae867815f0398c87e</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a8bc55d583ab340cbbf2c1b787b007ccf</anchor>
      <arglist>(OBMol &amp;mol, OBFFConstraints &amp;constraints)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ParseParamFile</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a4832732ca896c32a5c7cab59513f2190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetTypes</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5e025d2eb5240ce5776e5cd4ad54f557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetFormalCharges</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a0d8cc6c6af6a74b49c13ef35750910c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetPartialCharges</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab6922ea591809c44c1c0d89be3f8b691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetupCalculations</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>af2662d702c1eb43cc58c30d274712e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetupPointers</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a7cf46e58ec76819b7ae31983cfdee9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSetupNeeded</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a638c3bbd2aff3edd2b372fd087ccf99d</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetAtomTypes</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa41fd7cce6a9cf2e56ca603de7fbc507</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPartialCharges</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a06280807851159ac893d3391400861d3</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCoordinates</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a8be38bcae14834b6849d777e19885955</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpdateCoordinates</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab9bff2ca9aad359da6491fa4c3f46577</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetConformers</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad2cdc7a2d0f83221e9536d391032c6ea</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpdateConformers</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5c29065ad6e1322ade9087657bc576ec</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetCoordinates</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a06b2f4ac9f082f41da3ae01d4bb3f1cc</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetConformers</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ac271a3bf117a79400817b696d11ea4a7</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>OBGridData *</type>
      <name>GetGrid</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5f7ae482e5f2e4f4bda8fc6b6156f2a9</anchor>
      <arglist>(double step, double padding, const char *type, double pchg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntraGroup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ae9114ec448ff6ffeb4e529aa7fd39f9a</anchor>
      <arglist>(OBBitVec &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInterGroup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a524b145587c6a1f4f4f4daf96272b898</anchor>
      <arglist>(OBBitVec &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInterGroups</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ac976169598f4df4ab91c669f052a91a6</anchor>
      <arglist>(OBBitVec &amp;group1, OBBitVec &amp;group2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearGroups</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a2bae648fc3aade1956399fce8bce98fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasGroups</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>af62e7cd1222afc97088ebd1ab795fdf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableCutOff</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>acfbc43a75be62083cb454b62fb7c24fc</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCutOffEnabled</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a395ba2797e3bc2f4ad4a401b074d0b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVDWCutOff</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a82b6dd2103b4751237474bb3671a4d24</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetVDWCutOff</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a4109e7005a5eb4c91f10bd68958bfbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetElectrostaticCutOff</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a8cd8ec1bf4c4405aa94f3b6b3a86e45e</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetElectrostaticCutOff</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a15a2329a93fec0c5864c6229daf4254f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUpdateFrequency</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>af02e18f8a525f1e682b58654656f5d12</anchor>
      <arglist>(int f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetUpdateFrequency</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a80a6e534a8f9a7ba20d4fc25b75c6891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdatePairsSimple</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a7bc49547f1ea2ebf09864495d324fe67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNumPairs</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa1d27b0f4f43d58d416528cd24215307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableAllPairs</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a3545e8d4699a3cd7beba90de2fa7bedc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Energy</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad9242de2f838fb94efcd85f7182a6f83</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_Bond</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ada5914c7c0927cc9157d404ac175bcce</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_Angle</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab071cd3395d95bfa4c90cbdc3426c95a</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_StrBnd</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a180eb032b11995b3140d54b1fd1ec991</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_Torsion</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>abcf664aaa0bbb807a4f6e3d441d3147a</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_OOP</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a83d00f6965c92799d4d4a6e488a737e3</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_VDW</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a9a27f6899e6a57b234cfe79022ca0d1c</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>E_Electrostatic</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a7ed5b3a5502abbe3a9931165475905e0</anchor>
      <arglist>(bool gradients=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintTypes</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5aade506ba2985dc08c1368c01f45b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintFormalCharges</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a95220f9d1cc8cb66548a504c451094c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintPartialCharges</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a12dc30d677cadcf672458a5b60460559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintVelocities</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad022f259b6d08561e0c609fdc8484a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetLogFile</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>adca43238dd8a76b1f66737b74c1933ee</anchor>
      <arglist>(std::ostream *pos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetLogLevel</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aad67effdb484585dffa645891d6d8ded</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetLogLevel</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa9927fd2efb61460c8e879f83c0d387e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OBFFLog</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a06249fabc93686f6fa389173bcd2e300</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OBFFLog</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a232f01774986e74179b56eb961728a54</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DistanceGeometry</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a7b4196fee783bef9070d3d50ba91ff84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SystematicRotorSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a0cd9e722f0f76012921ee143484e3e0a</anchor>
      <arglist>(unsigned int geomSteps=2500)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SystematicRotorSearchInitialize</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa64a24788b054b2b29e98e0552ba27f0</anchor>
      <arglist>(unsigned int geomSteps=2500)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SystematicRotorSearchNextConformer</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aece2b94728b7f56b953b1fb7e11d0e18</anchor>
      <arglist>(unsigned int geomSteps=2500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RandomRotorSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a3c2aba026c883a8c78a8874a2171cea0</anchor>
      <arglist>(unsigned int conformers, unsigned int geomSteps=2500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RandomRotorSearchInitialize</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a3511ce0631f467170ac6d5a9c6d5edde</anchor>
      <arglist>(unsigned int conformers, unsigned int geomSteps=2500)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RandomRotorSearchNextConformer</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad3435f0ac74b1fad83681bb0cb317616</anchor>
      <arglist>(unsigned int geomSteps=2500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WeightedRotorSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aabf7fa941ffdd2106f5f82f2afefa33f</anchor>
      <arglist>(unsigned int conformers, unsigned int geomSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLineSearchType</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a303afe5059c4c70d029d160d6369fca7</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetLineSearchType</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa0635968faae8eae39c1157f34f1f186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>LineSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5f08066361ace92acfa362df93fafd76</anchor>
      <arglist>(OBAtom *atom, vector3 &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LineSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab4582129101043340868e2f854db4f1d</anchor>
      <arglist>(double *currentCoords, double *direction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Newton2NumLineSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a735079ca73080f12512074483776d7ef</anchor>
      <arglist>(double *direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LineSearchTakeStep</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1bff17c1e5b29b5635638c6a7633962c</anchor>
      <arglist>(double *origCoords, double *direction, double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SteepestDescent</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a209c761c2f70a11d574a605c6f83921f</anchor>
      <arglist>(int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SteepestDescentInitialize</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6ba7f48a161b7c25d9a8ad661c3c572b</anchor>
      <arglist>(int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SteepestDescentTakeNSteps</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab2cea937bb0224112a6f79758a099932</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateGradients</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a2f2732698efde5c2f155bfac08fd9ded</anchor>
      <arglist>(int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateGradientsInitialize</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a7e253a1997cddeb4fd5eaa79e6e42610</anchor>
      <arglist>(int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ConjugateGradientsTakeNSteps</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aef9f033a26aaedb027c2a99de04a9646</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateVelocities</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ae9f7de4324a4a476ca0663772c1a6bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CorrectVelocities</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a8c466035b972dddd7f5ebd27f04f685b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MolecularDynamicsTakeNSteps</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a52ae121410bc166d73eb4200f6127842</anchor>
      <arglist>(int n, double T, double timestep=0.001, int method=OBFF_ANALYTICAL_GRADIENT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DetectExplosion</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a0d97557b9f37191cce473fbfd4636a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>ValidateLineSearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ac6e66726b2becbbccf39e6d4ecf6ae2e</anchor>
      <arglist>(OBAtom *atom, vector3 &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateSteepestDescent</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a837dd6b4440b4fe77f23976bbdaa64a3</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateConjugateGradients</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a91538863099a02a981364ad66f47f4e8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Validate</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a591a6c018926edaa3f398ca7134e26c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ValidateGradients</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5bd73ca104b0fd34659d77a7f9d3a0a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>ValidateGradientError</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ae517465b4ca745841c28cf22db304a7f</anchor>
      <arglist>(vector3 &amp;numgrad, vector3 &amp;anagrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBForceField *</type>
      <name>FindForceField</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a4d625c122a1c2ed931851331b0243950</anchor>
      <arglist>(const std::string &amp;ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBForceField *</type>
      <name>FindForceField</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a8af11ddb5650f7733164c81da3aacbd8</anchor>
      <arglist>(const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorBondDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab4c518f64fa1e22d82ed6da82d14e4e3</anchor>
      <arglist>(double *pos_a, double *pos_b, double *force_a, double *force_b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorDistanceDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a974238716b14999015e8150dacba1037</anchor>
      <arglist>(const double *const pos_i, const double *const pos_j, double *force_i, double *force_j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorLengthDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab451a524c7a4f04bb987b3fac9288eed</anchor>
      <arglist>(vector3 &amp;a, vector3 &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorAngleDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6c5b48194a0edecff825f246b645d44c</anchor>
      <arglist>(double *pos_a, double *pos_b, double *pos_c, double *force_a, double *force_b, double *force_c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorAngleDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>afe981b8f96a737d0228fbf62c4c94417</anchor>
      <arglist>(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorOOPDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a0d4f489e2b0ba2fd1e4a220cebf93f1c</anchor>
      <arglist>(double *pos_a, double *pos_b, double *pos_c, double *pos_d, double *force_a, double *force_b, double *force_c, double *force_d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorOOPDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a4b7e7649d0928a2cb6a2123e3e4dec6f</anchor>
      <arglist>(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c, vector3 &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorTorsionDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aef595f8b6deb9c2213321352db467e98</anchor>
      <arglist>(double *pos_a, double *pos_b, double *pos_c, double *pos_d, double *force_a, double *force_b, double *force_c, double *force_d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorTorsionDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a4d4709cf0de47e7c6f44da4e21f20c9f</anchor>
      <arglist>(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c, vector3 &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorSubtract</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad88b7a26afc5f8b478e299a96d555f14</anchor>
      <arglist>(double *i, double *j, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorSubtract</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a19395cf2512e5b3af33f4ea603c18436</anchor>
      <arglist>(const double *const i, const double *const j, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorAdd</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a34e901932f48c16a06929d7da9308b98</anchor>
      <arglist>(double *i, double *j, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorDivide</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ac9d079c742232c33bc668f09135ab1a5</anchor>
      <arglist>(double *i, double n, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorMultiply</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad3db6d00549c9448579509d878735ec0</anchor>
      <arglist>(double *i, double n, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorMultiply</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a33ebd98d01af8308d5b4f0cf0ef3b151</anchor>
      <arglist>(const double *const i, const double n, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorSelfMultiply</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a2bd8889c439dd81f3492d409f27e80d4</anchor>
      <arglist>(double *i, double n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorNormalize</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a09521bcec46ef53d75215305755a911d</anchor>
      <arglist>(double *i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorCopy</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a12db497d1100ca5a0620ba2076581a63</anchor>
      <arglist>(double *from, double *to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorLength</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>afa91d516c7ab5c44d0443c15deb62910</anchor>
      <arglist>(double *i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorDistance</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a655c6950fb947600a4ffcbbf5f53fc18</anchor>
      <arglist>(double *pos_i, double *pos_j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorAngle</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a66aab9d4399b8502d330872181f51429</anchor>
      <arglist>(double *i, double *j, double *k)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorTorsion</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5a156d1eea0507509cbb7f245999a31b</anchor>
      <arglist>(double *i, double *j, double *k, double *l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorOOP</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>af031c62775e4d3374c0504d7af515ee0</anchor>
      <arglist>(double *i, double *j, double *k, double *l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorClear</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ae9651eef486a9afd00ef38c972df90f8</anchor>
      <arglist>(double *i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>VectorDot</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a847a262329a92da08c099830a8431a48</anchor>
      <arglist>(double *i, double *j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>VectorCross</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a814fd94395b7e2dfe95d78c11eb2a004</anchor>
      <arglist>(double *i, double *j, double *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>PrintVector</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a336e29059a710e30d98a0d9898a10c63</anchor>
      <arglist>(double *i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OBFFParameter *</type>
      <name>GetParameter</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad8a19dcfdef3d4cb8a3eea17d3c1f918</anchor>
      <arglist>(int a, int b, int c, int d, std::vector&lt; OBFFParameter &gt; &amp;parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OBFFParameter *</type>
      <name>GetParameter</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6d072805c7042da11d4ae8c8319a22f2</anchor>
      <arglist>(const char *a, const char *b, const char *c, const char *d, std::vector&lt; OBFFParameter &gt; &amp;parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetParameterIdx</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a905e6654e8bd06c0e558fa8b45223263</anchor>
      <arglist>(int a, int b, int c, int d, std::vector&lt; OBFFParameter &gt; &amp;parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector3</type>
      <name>NumericalDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a2a6bafaddf41c8eb9d0bda246bb07c85</anchor>
      <arglist>(OBAtom *a, int terms=OBFF_ENERGY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vector3</type>
      <name>NumericalSecondDerivative</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a499789742e7b2021f26f8d1cfe04045f</anchor>
      <arglist>(OBAtom *a, int terms=OBFF_ENERGY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetGradient</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab2ac199e3ef0f47fbdc0365ededfeced</anchor>
      <arglist>(double *grad, int idx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddGradient</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab0b5fe1f004e97857de0cf641b5e3789</anchor>
      <arglist>(double *grad, int idx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual vector3</type>
      <name>GetGradient</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad0da17ffd83c1041f1d0657404b4724d</anchor>
      <arglist>(OBAtom *a, int=OBFF_ENERGY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double *</type>
      <name>GetGradientPtr</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab1736c0602ea4313ff7602aa948ece82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ClearGradients</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>afeabf5a9fd6207144ed24a80c39714a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsInSameRing</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>acafd9be7a3a74bed05e552a20aa0fccf</anchor>
      <arglist>(OBAtom *a, OBAtom *b)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBMol</type>
      <name>_mol</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a5ae66d31df78d115efc8282c8c695c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_parFile</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a0ad96c121eb2ab3291c9f348f3e66eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_validSetup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a2d0a817f871831bed3e700ff65bd32ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_gradientPtr</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa1d49201f58bfcceb6d47593bf360bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>_logos</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>aa5950d373df53720595c030d3db04397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>_logbuf</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a158daac1f91a0b0efd242be1bd7c30e4</anchor>
      <arglist>[BUFF_SIZE+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_loglvl</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a4e929e2f2b2aeb818341fff4bc1d73d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_origLogLevel</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a122d15094b107a94e4359e67e0e1f539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_current_conformer</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab95ae5a13edb24f5d32b01e2098f26df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_energies</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a7b2ba72f54b74909a53a0548cdf44ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_econv</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a47292a5e3cad98d5a169bd2c54103d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_e_n1</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad33cee0e99c32beb8f2b8b05248a085f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_cstep</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ac7f362c839a5c13c37dcbd43b426516b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nsteps</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>afe138e40e061c04494421e5513829b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_grad1</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1c24fef8a19cd43ec17f25b026570ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_ncoords</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab39c453046b3d76a24615c0f4ddb5dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_linesearch</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>afb076d7d251019d009f919e41161d004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_timestep</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a74c5643406e1d2fc9a8ec5a64a746d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_temp</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a21c5ecf3204a9907236f7596268a76a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_velocityPtr</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a60c161177d9d80020f3a42d8f5ad2a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_cutoff</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6664339ecef04e70cd97a0a5738b99c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_rvdw</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1eab6cf4abedfa50bd898b5d8394586a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_rele</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1cb4961672fc9fdbbcc6f77f10328124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBBitVec</type>
      <name>_vdwpairs</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>acf019f5fea50c00abe4a8eceb1ebefd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBBitVec</type>
      <name>_elepairs</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a304e7d6e8b9b55195148d8ce241c4231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_pairfreq</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6daefdab547529f4ddee1b729085df82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBBitVec &gt;</type>
      <name>_intraGroup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad73a3ddc8c65a31256666ba5cd10fcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBBitVec &gt;</type>
      <name>_interGroup</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6212b1ca8ff39273ec120c20524deba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; OBBitVec, OBBitVec &gt; &gt;</type>
      <name>_interGroups</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ab3487cbb18bbd78d58a4afa84d65beb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static OBFFConstraints</type>
      <name>_constraints</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a22f844c60684776be9d47109855e16de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>_fixAtom</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ad7d6ee4569e450185c8e229aa405e138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>_ignoreAtom</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1a201141d98a5e271d02d2a083bc3a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>OBFFConstraints &amp;</type>
      <name>GetConstraints</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6b49b3a0f1e2f4b950c61971c2eda257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConstraints</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>ac97dee57cf1c5abbbddff62294a01c3b</anchor>
      <arglist>(OBFFConstraints &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixAtom</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a285bcf84b82ad8ce98fedfdf845fd29a</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetFixAtom</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a6df5d9cd111137994ae597f611ab5d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIgnoreAtom</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>adff150aaabc20d030d023fabc67a8936</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetIgnoreAtom</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a190fd6af7b60752a48c3c95fbcf41697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IgnoreCalculation</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a1a15aa0fc35de803cb02fd0d76931742</anchor>
      <arglist>(int a, int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IgnoreCalculation</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a642f86408aa78a8909e2661cf34e7460</anchor>
      <arglist>(int a, int b, int c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IgnoreCalculation</name>
      <anchorfile>classOpenBabel_1_1OBForceField.html</anchorfile>
      <anchor>a07190ce19050974e8344af32f874aece</anchor>
      <arglist>(int a, int b, int c, int d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFormat</name>
    <filename>classOpenBabel_1_1OBFormat.html</filename>
    <base>OpenBabel::OBPlugin</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBFormat</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a11590b0840c8360ab4c3b62476d49863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1e309febfaef70cc3c8d98afc1540931</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadChemObject</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a6044ced825a2a83b7cfe7c45eea63c99</anchor>
      <arglist>(OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a663171ec9788e2d1621d374848b3888b</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteChemObject</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a5ea5d9623cd9594549a52e116caecaa2</anchor>
      <arglist>(OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ab87525f269e7819d8462f450d30d56a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TargetClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1870e0d80a223ef4e1661be80029dbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::type_info &amp;</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a73f632a573cbbfecf9e00f04c5ce73e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>SpecificationURL</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1d3a8785a0ad0c85b98fa3406a64d50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetMIMEType</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0e10219d8aedefa78ef16fc7fded85ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>Flags</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a94a94537cc5ba96b1876db1b612b91a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SkipObjects</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1f0ee7ba19cc62b53a7ee06fa4f91509</anchor>
      <arglist>(int, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBFormat *</type>
      <name>MakeNewInstance</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0924b1a442d147fa036bff23a4cf04ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterFormat</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a47a434f63a789f142966304e35aa6952</anchor>
      <arglist>(const char *ID, const char *MIME=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromMIME</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>aca0c09ee719aba9da34cb281aa0db6a5</anchor>
      <arglist>(const char *MIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBCommentData</name>
    <filename>classOpenBabel_1_1OBCommentData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBCommentData</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>ad00ae4186abf02955b13ee5ca02d3d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBCommentData</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>a07f7c689e54a15bcf5a171e41a0d2be1</anchor>
      <arglist>(const OBCommentData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>OBCommentData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>a58aa6624e86c23b6c2c858aa7948e797</anchor>
      <arglist>(const OBCommentData &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>a71ec30c014852fe90aed06daa76e378b</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>a0f90c3ff45f5d9a13c71f46dba0770e5</anchor>
      <arglist>(const char *d)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>afb46b1b77157b78eba83c094204f96b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_data</name>
      <anchorfile>classOpenBabel_1_1OBCommentData.html</anchorfile>
      <anchor>abfcfad17c10b3bb5b39412d927518e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBExternalBond</name>
    <filename>classOpenBabel_1_1OBExternalBond.html</filename>
    <member kind="function">
      <type></type>
      <name>OBExternalBond</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>aa3e2d107afd3e69aee9bf52b47d1444c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBExternalBond</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a272bc9b5d31d02f3104184c93c093a24</anchor>
      <arglist>(OBAtom *, OBBond *, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBExternalBond</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a68791bdd96a49bce34b72e205c0975f6</anchor>
      <arglist>(const OBExternalBond &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBExternalBond</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a359543c25a72cf7a9ab33ab75b9b5f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetIdx</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>ac8451eabbc164153f5030ae9723cf48b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetAtom</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a6bbee7efbeae405ba88ccb87b2f4c792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a074123f2f8a5e90b5ce359af557e1805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIdx</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>ab994a975e39f5c62288f4f972b6f90c9</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtom</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a84cdb57aaf88aa0a94f4f4a1dd0f0252</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBond</name>
      <anchorfile>classOpenBabel_1_1OBExternalBond.html</anchorfile>
      <anchor>a75c73979e73fb44e48424150fa0208c7</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBExternalBondData</name>
    <filename>classOpenBabel_1_1OBExternalBondData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBExternalBondData</name>
      <anchorfile>classOpenBabel_1_1OBExternalBondData.html</anchorfile>
      <anchor>a4cc82159f2d4aee7ee7fc12797708122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBExternalBondData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBExternalBondData.html</anchorfile>
      <anchor>a3cce8cbbe30bd52c22b130a6d3b8dd85</anchor>
      <arglist>(OBAtom *, OBBond *, int)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBExternalBond &gt; *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBExternalBondData.html</anchorfile>
      <anchor>a11f9065de21b2a826607337504954584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBExternalBond &gt;</type>
      <name>_vexbnd</name>
      <anchorfile>classOpenBabel_1_1OBExternalBondData.html</anchorfile>
      <anchor>a8b0c5550b7332d65d1c285004891cff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBPairData</name>
    <filename>classOpenBabel_1_1OBPairData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBPairData</name>
      <anchorfile>classOpenBabel_1_1OBPairData.html</anchorfile>
      <anchor>a5ad22fd0a07bf5e52a4fabaf7f1dcbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBPairData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classOpenBabel_1_1OBPairData.html</anchorfile>
      <anchor>aef706f61b8b25bb7de414f46bbe317b3</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classOpenBabel_1_1OBPairData.html</anchorfile>
      <anchor>a36b6ff14e0bae8e56e4637ab727fc8cb</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBPairData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_value</name>
      <anchorfile>classOpenBabel_1_1OBPairData.html</anchorfile>
      <anchor>a366a2531a9485fdfb2f6abbe528d99e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBPairTemplate</name>
    <filename>classOpenBabel_1_1OBPairTemplate.html</filename>
    <templarg></templarg>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBPairTemplate</name>
      <anchorfile>classOpenBabel_1_1OBPairTemplate.html</anchorfile>
      <anchor>abbe664b8fa3b004481772438aa0c1e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classOpenBabel_1_1OBPairTemplate.html</anchorfile>
      <anchor>a8525d460be3e43a8e605d854a2c9e246</anchor>
      <arglist>(const ValueT t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ValueT &amp;</type>
      <name>GetGenericValue</name>
      <anchorfile>classOpenBabel_1_1OBPairTemplate.html</anchorfile>
      <anchor>ab23bca6040f6b5ef2e331a5210678c9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueT</type>
      <name>_value</name>
      <anchorfile>classOpenBabel_1_1OBPairTemplate.html</anchorfile>
      <anchor>a8e244c63178d867c1294ea6011dc73ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSetData</name>
    <filename>classOpenBabel_1_1OBSetData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBSetData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>a1998d348b757cd3146c83750f00d8c8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>a3e36d0e80af7574cee4f2240b8f372dd</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>a8ad9af74c60e6f57716910542f616ae5</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;vdata)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>a74418cc8cd2b2a72f8e1778b0cd58a48</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>ac1fc78db5080260be71f604ee5bbfcd2</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>ae61a4b8009b2982994c629b61fbb4e23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;::iterator</type>
      <name>GetBegin</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>a2dd0afcc5538601c2a39a3b7871faff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;::iterator</type>
      <name>GetEnd</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>ae26106f464c8cb2959a7705a606f7da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>ace768b2c55b1d16a47b8fdcda84515ea</anchor>
      <arglist>(OBGenericData *gd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBSetData.html</anchorfile>
      <anchor>ae4896f79700c8d654fc8f7dcef4eb30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBVirtualBond</name>
    <filename>classOpenBabel_1_1OBVirtualBond.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBVirtualBond</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>a792cd3cbd9b561e5cc54e36c2a1f1c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBVirtualBond</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>a1a7300c9c0569be756829770ec72fc90</anchor>
      <arglist>(int, int, int, int stereo=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetBgn</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>a064aa6b502655795918788af438b0208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetEnd</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>afc186d85b94bae6548e433324215fff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetOrder</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>aeaca5975b0354f81d10792199fee7d4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetStereo</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>a9695376d762d4fd2b12da6f51a99fb92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bgn</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>aeb2c09a43f4c8b6256dbed5faf85d768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_end</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>abb406f6b7d63af84fda76dbcdbac66c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ord</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>af7c67fda80d169e7af68407f88740499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_stereo</name>
      <anchorfile>classOpenBabel_1_1OBVirtualBond.html</anchorfile>
      <anchor>aa753c6ca5d794e055f8b4b590c6ba538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRingData</name>
    <filename>classOpenBabel_1_1OBRingData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBRingData</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a25ab395f24099c37b3c7826d6af799cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRingData</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>ac1e829876d4f4f1382b7b86a6d860caa</anchor>
      <arglist>(const OBRingData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRingData</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>ade468a01a37920c9638ba31d3e41d87d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBRingData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a39a9df3ebda7740272a2b02311d26c49</anchor>
      <arglist>(const OBRingData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a45f2a0418d86a4d7f2e94f1c54e504ce</anchor>
      <arglist>(std::vector&lt; OBRing * &gt; &amp;vr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushBack</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a120222dc719c5f6a711770dce699535b</anchor>
      <arglist>(OBRing *r)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a45043bd4256fcf9d62e0cb45e024c466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt;::iterator</type>
      <name>BeginRings</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>aa1a05257821a8156625beabb7dd58e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt;::iterator</type>
      <name>EndRings</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a07ad405727c652a6a280d821b9d1ac47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBRing *</type>
      <name>BeginRing</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a84a7a9a9fd4841fc36005e6d274bb5d9</anchor>
      <arglist>(std::vector&lt; OBRing * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBRing *</type>
      <name>NextRing</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a27022bf8bb745f2b4c90c5f951c9be23</anchor>
      <arglist>(std::vector&lt; OBRing * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBRing * &gt;</type>
      <name>_vr</name>
      <anchorfile>classOpenBabel_1_1OBRingData.html</anchorfile>
      <anchor>a2da396a9610e4fd1218b885407375568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBUnitCell</name>
    <filename>classOpenBabel_1_1OBUnitCell.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="enumeration">
      <name>LatticeType</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Undefined</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78a18f893264a00711081b62de694f99db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Triclinic</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78a0c393259f8f62caf4a7d210327e9ecb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Monoclinic</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78a8dcb30922b1f64f0d749914bf32442ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Orthorhombic</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78ad6c2a31a4f6d88429ee1146228b5bbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Tetragonal</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78a3d2110f7a11f77ed4f87cbc954aeec21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rhombohedral</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78a67f25c654b88f3bdcb76dd7a853f1296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hexagonal</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78af6a3ca263243147ee2b534d1c757544b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cubic</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae2ee58ec34164a3ea47d51ab6ffc5c78a7105ea83819b1af6af85747e20b462b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBUnitCell</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a96db3347da90d28cb56ed1272e75bc02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBUnitCell</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>acb80e2ac4dcdfbebcf43eddaf03494de</anchor>
      <arglist>(const OBUnitCell &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBUnitCell</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a29eaffe421897707aa12103bec99d3c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBUnitCell &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a4b44a40637c9fcb48e7b90b69db7538f</anchor>
      <arglist>(const OBUnitCell &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>acca66a4b8a38d190c178b6ed85f9b8ed</anchor>
      <arglist>(const double a, const double b, const double c, const double alpha, const double beta, const double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>aa087a37fcd1c8b08d5d58277caefbc9a</anchor>
      <arglist>(const vector3 v1, const vector3 v2, const vector3 v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a305d661a815053b610cb220fdfc3922c</anchor>
      <arglist>(const matrix3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOffset</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a4c53fadff602620ff82a9a0c3ceda85a</anchor>
      <arglist>(const vector3 v1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ac6f21a0fb4b93bb99f210559a1a6d7d7</anchor>
      <arglist>(const SpaceGroup *sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a76ccdf2ccfbefae104ff52932dcf11c1</anchor>
      <arglist>(const std::string sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae0d7e7ddcd3c5e3c48c6b24908d8404f</anchor>
      <arglist>(const int sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLatticeType</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a6516b3a121b34a94e19201da06104afa</anchor>
      <arglist>(const LatticeType lt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillUnitCell</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>af5cee9c530db13a5ec558a3783893315</anchor>
      <arglist>(OBMol *)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetA</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a4d3a4219d5f08c2f903206ecb59436e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetB</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae34f695767335c1c8a113881f8a836cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetC</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>aeae82171edc23f08fe42ca5aa5eb0992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAlpha</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>aea9b938ebdd2ab106fbc9e16e5a5950c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBeta</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ad1ee5146d823e2ba31bf76d2390514ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetGamma</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ab1514bd983b16e3dc0e145a5bd4e64f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetOffset</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a1337fb21f02337b6a7272ba61f1547ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpaceGroup *</type>
      <name>GetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>af99bd0594c5b6516bca32994d3982ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>GetSpaceGroupName</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>ae3fd482b6aa543fed4f6b65268bbcf8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LatticeType</type>
      <name>GetLatticeType</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a11a8331a3395213f3bbf79fe674a8ec4</anchor>
      <arglist>(int spacegroup) const </arglist>
    </member>
    <member kind="function">
      <type>LatticeType</type>
      <name>GetLatticeType</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>aba3f04be2fff563529fc61469c68e6e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; vector3 &gt;</type>
      <name>GetCellVectors</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a2e879944e39197abb8ca349696e5561b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>GetCellMatrix</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a5e5e94149287bb5b06380cf90df23e39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>GetOrthoMatrix</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a790e3088533708766883428735f3ff6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>GetOrientationMatrix</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a5fb4764453242b35beff2c39b81bfd64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>GetFractionalMatrix</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>afa8bf1ad8084f6da1518cdac0955c14e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>FractionalToCartesian</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>afe4523005ebd228619125c723ec340ed</anchor>
      <arglist>(vector3 frac) const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>CartesianToFractional</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a7461989643a1029ac93ab3a4fbbd6a50</anchor>
      <arglist>(vector3 cart) const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>WrapCartesianCoordinate</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a16c825f98b3e8b5837c322eb55f72e15</anchor>
      <arglist>(vector3 cart) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSpaceGroupNumber</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a5977e471e82ab8520b9285ead97f09c5</anchor>
      <arglist>(std::string name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetCellVolume</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a28bc7ddc9c46345bfc20455f6863727e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vector3</type>
      <name>WrapFractionalCoordinate</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a17fa7c484e6c603aad0a1dd1e53d21ed</anchor>
      <arglist>(vector3 frac)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix3x3</type>
      <name>_mOrtho</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a8d02fbc6c58e1abe5c8043f1253f6ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix3x3</type>
      <name>_mOrient</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a2497d0bb15408f8670722631fd8d90b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3</type>
      <name>_offset</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a4e04f720581a30502f781e620fb56af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_spaceGroupName</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a2f7186c492d40a6b69092700ff8aee83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceGroup *</type>
      <name>_spaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a9c98685360a568cd4473b1931e2765d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LatticeType</type>
      <name>_lattice</name>
      <anchorfile>classOpenBabel_1_1OBUnitCell.html</anchorfile>
      <anchor>a474459fcdeb63c82700a345e59330645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBConformerData</name>
    <filename>classOpenBabel_1_1OBConformerData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBConformerData</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a1eb0789d37b6c4792d64b4799d81ec0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBConformerData</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>aabfb81e80e84788e20642fc2872fc5fc</anchor>
      <arglist>(const OBConformerData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBConformerData</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a1e909f0c20e17b79ecc51ae05b57f78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBConformerData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a7c2db1828edcca7ff07c8591744ec3a4</anchor>
      <arglist>(const OBConformerData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimension</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a98270b6a5c308d32731da6e0347604f8</anchor>
      <arglist>(std::vector&lt; unsigned short &gt; vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnergies</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a83d2707a7d694d2dcbca91b52e537953</anchor>
      <arglist>(std::vector&lt; double &gt; ve)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForces</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>ae5e8b9cfa509d47b804cd62dabec4384</anchor>
      <arglist>(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocities</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a10e686c1334aab2838abd83f0e43c15d</anchor>
      <arglist>(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDisplacements</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a97fd4b5e51251d3647a1d8744f5fc178</anchor>
      <arglist>(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a6a42c8d13245d5d0c11476c56e6a6e33</anchor>
      <arglist>(std::vector&lt; std::string &gt; vdat)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned short &gt;</type>
      <name>GetDimension</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a11ede097c372a7bca3ac9bbc8325aade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetEnergies</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a3d8b242eebd5ab58552d535f86bd1609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>GetForces</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>ab47a820667f55e0899534778c414c21d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>GetVelocities</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a045c32551393c9123ffcaaf64b68f8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>GetDisplacements</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a0f4fc4a438c20ca17dc4164245723b61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a10bc2a88336b4e3de55ce7112ad07811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned short &gt;</type>
      <name>_vDimension</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a6c0b393e8fabed75f977c2ef2e9776b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vEnergies</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>ad069a68962fcc260bd3d4a1f4fc37fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>_vForces</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>a89ef302474a75b75e95f99892462da96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>_vVelocity</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>ac6c0bfd74d984fed427c1ced49acef5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>_vDisplace</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>aaea44fb2ea8511661a37ff43c6df9149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_vData</name>
      <anchorfile>classOpenBabel_1_1OBConformerData.html</anchorfile>
      <anchor>aff183e0156f477b106269c9524d8b4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSymmetryData</name>
    <filename>classOpenBabel_1_1OBSymmetryData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBSymmetryData</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>abddd585788c3212c9e1305dc10c91381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSymmetryData</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>ad859b75cc7b6d924d9bc29486dcb229a</anchor>
      <arglist>(const OBSymmetryData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBSymmetryData</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>aaf4df0ae2afcaf39df55df81e0a18a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBSymmetryData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>ae1e415e9a406f4965be7352a3c66fa3a</anchor>
      <arglist>(const OBSymmetryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>a2ceb8f352cca6f223aff43d41f4fb2f1</anchor>
      <arglist>(std::string pg, std::string sg=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPointGroup</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>a614446afd9dea92d4da7e8c8095aa107</anchor>
      <arglist>(std::string pg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>aef06d0d2bb4513684db4b052f487d45a</anchor>
      <arglist>(std::string sg)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetPointGroup</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>aed0b54749bded9681b917dbbe6ce1800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>a90903c2ee1d02cbf37d5162541691f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_spaceGroup</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>a472527c3649b76aaaa28597ba3f214dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_pointGroup</name>
      <anchorfile>classOpenBabel_1_1OBSymmetryData.html</anchorfile>
      <anchor>a4a2dc3eb5d3a544b8afe7507b7189fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBTorsion</name>
    <filename>classOpenBabel_1_1OBTorsion.html</filename>
    <member kind="function">
      <type></type>
      <name>OBTorsion</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a1057e5f8a14d61c1246fad1ee53e060b</anchor>
      <arglist>(const OBTorsion &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBTorsion</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a42a5dd5b1bb3906af399c66764589c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBTorsion &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a1cd7449d56eeb21cdd5b389a60ffc8c0</anchor>
      <arglist>(const OBTorsion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a31d1053aee208079bcc3c5e1884774df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddTorsion</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>abd9bec94f93a4e0d1e164cc8787bb38d</anchor>
      <arglist>(OBAtom *a, OBAtom *b, OBAtom *c, OBAtom *d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddTorsion</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a67b9d44a4fb682471ec4ee3866975caa</anchor>
      <arglist>(quad&lt; OBAtom *, OBAtom *, OBAtom *, OBAtom * &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetAngle</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>ac9e3204ad8a0d43c2971ccbefc6b9948</anchor>
      <arglist>(double radians, unsigned int index=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>aa2c22321e05df8c58066c30bef2cf927</anchor>
      <arglist>(OBBond *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetAngle</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a5eeea8f7dd18651b9053ad543121c8a9</anchor>
      <arglist>(double &amp;radians, unsigned int index=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetBondIdx</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a39ce4fb4d317ee338783f3af6c2db6b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>aa28b8191c62589d996ac605c9cbe5829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; OBAtom *, OBAtom * &gt;</type>
      <name>GetBC</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a16b7e8677bd43d8292b1f0485e4d1d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; triple&lt; OBAtom *, OBAtom *, double &gt; &gt;</type>
      <name>GetADs</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a223305867f2593a05ebbc37bdc9bb674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProtonRotor</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a85d2b5ae8365dee2471bce49d8388703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBTorsion</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>ab97992a9144899afd3b91c39dcc8e5e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBTorsion</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>abef598effdc7b9e69ff4e98e1fd0d770</anchor>
      <arglist>(OBAtom *, OBAtom *, OBAtom *, OBAtom *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; quad&lt; OBAtom *, OBAtom *, OBAtom *, OBAtom * &gt; &gt;</type>
      <name>GetTorsions</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a8102ac83d5ecd61c36b0fe849bedcd7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; OBAtom *, OBAtom * &gt;</type>
      <name>_bc</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>aa0d884087af9a4eac62349cdd16f0e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; triple&lt; OBAtom *, OBAtom *, double &gt; &gt;</type>
      <name>_ads</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>adae49ee49ed76ec2af6149f2a20f34bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>ac59e55249c26b7453efa178aab836428</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBTorsionData</name>
      <anchorfile>classOpenBabel_1_1OBTorsion.html</anchorfile>
      <anchor>a7633b32d47d66ecdfb4f3db46e7e1422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBTorsionData</name>
    <filename>classOpenBabel_1_1OBTorsionData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type>OBTorsionData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>ab526e7eddb908b711e19aa355d133241</anchor>
      <arglist>(const OBTorsionData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBTorsion &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>a7549ccb8e6a424fb7e15367125a259c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>aa28b8191c62589d996ac605c9cbe5829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>a0d25d5bc7edb0283cc28e8e81cf4cc59</anchor>
      <arglist>(OBTorsion &amp;torsion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FillTorsionArray</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>af77f051793a56b4f15aa0106066358b9</anchor>
      <arglist>(std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;torsions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBTorsionData</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>a2eacebc6e2740f1c2525e52fa588702c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBTorsionData</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>a59b7f2ef74e6ab882d6cd25424542ba8</anchor>
      <arglist>(const OBTorsionData &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBTorsion &gt;</type>
      <name>_torsions</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>a8284d9e040299fd3ee667ad31e34a8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBTorsionData.html</anchorfile>
      <anchor>ac59e55249c26b7453efa178aab836428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAngle</name>
    <filename>classOpenBabel_1_1OBAngle.html</filename>
    <member kind="function">
      <type></type>
      <name>OBAngle</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>add93801d0d6a91355926fedcdde71565</anchor>
      <arglist>(const OBAngle &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBAngle</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a35e160e815b78f064cd07164bf5aebb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAngle &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a55edfc318fc40919cc323f201316ae34</anchor>
      <arglist>(const OBAngle &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>ada55d4b3f94f964b29fd89e84a3f56c4</anchor>
      <arglist>(const OBAngle &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAngle</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>abf68cf13cd458dac5db091a1f0bb7c9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a55f96888e82a56edfa241a34f3271ae0</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtoms</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a6706ea3186b734ae14e2a472467f5b0b</anchor>
      <arglist>(OBAtom *vertex, OBAtom *a, OBAtom *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtoms</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>ae1d140974db479c58dca476ccc4932c6</anchor>
      <arglist>(triple&lt; OBAtom *, OBAtom *, OBAtom * &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBAngle</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a083ed200f5ea67cdc4270c4fccd479c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBAngle</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>aedda3b8d14bd0980f1527d988a8304a9</anchor>
      <arglist>(OBAtom *vertex, OBAtom *a, OBAtom *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>triple&lt; OBAtom *, OBAtom *, OBAtom * &gt;</type>
      <name>GetAtoms</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a57c9a8b75875e3e90acee23405f1dcac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SortByIndex</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>abed9ee8ec60f469009175af1fbf82267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBAtom *</type>
      <name>_vertex</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a6d6d58b7c653e7457ce0d0c2a907f9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; OBAtom *, OBAtom * &gt;</type>
      <name>_termini</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>aed0a513f416c5140e604577971e1dd5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_radians</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>a8ebc49284f65cb6d82c40fba0f9111b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>ac59e55249c26b7453efa178aab836428</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBAngleData</name>
      <anchorfile>classOpenBabel_1_1OBAngle.html</anchorfile>
      <anchor>ac2fadcaf6e1d7246db44fd04d90df423</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAngleData</name>
    <filename>classOpenBabel_1_1OBAngleData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type>OBAngleData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>af0af03b552fac05db59787be08a443eb</anchor>
      <arglist>(const OBAngleData &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>FillAngleArray</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>ac684b46351b79591c4b6622c184fa20d</anchor>
      <arglist>(int **angles, unsigned int &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FillAngleArray</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>ab67a6a8938c549946e2ef4666b81b285</anchor>
      <arglist>(std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;angles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>aaff4ca410e5b2dace76687a9e9671ceb</anchor>
      <arglist>(OBAngle &amp;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>aa28b8191c62589d996ac605c9cbe5829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBAngleData</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>a98d951bfcab012299d99ef6815536c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OBAngleData</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>a1cae06646bfb537468fd43e4986d9476</anchor>
      <arglist>(const OBAngleData &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; OBAngle &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>a7bde4d88bd37538955958388da8ef107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBAngle &gt;</type>
      <name>_angles</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>a259e7ee82fbf67240f0b058ce4293d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBAngleData.html</anchorfile>
      <anchor>ac59e55249c26b7453efa178aab836428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBChiralData</name>
    <filename>classOpenBabel_1_1OBChiralData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBChiralData</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>abf1b65d23be992839a8a2f72af90a82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBChiralData</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>ab780da2186ce4173886074927c64bd39</anchor>
      <arglist>(const OBChiralData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>OBChiralData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a2d8a571296610389b9427aef139b1d8d</anchor>
      <arglist>(const OBChiralData &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBChiralData</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>abc2d4b013efd6a8788da4a31489d28b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>GetAtom4Refs</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a1f91ee5ea208d5d3038fb753dffafcfe</anchor>
      <arglist>(atomreftype t) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAtomRef</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a107ae45be73b2ef79045015f04cd73b1</anchor>
      <arglist>(int a, atomreftype t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetAtom4Refs</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>ab2d7445256c698000dd2beab47a784e0</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; atom4refs, atomreftype t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddAtomRef</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>aca994f4a7f7e175991a4f0c3c99f99d6</anchor>
      <arglist>(unsigned int atomref, atomreftype t)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a16086309583fe9a7f917a54b151a2cce</anchor>
      <arglist>(atomreftype t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>_atom4refs</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a89411064df2cf2407f4a89f75a5ea618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>_atom4refo</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a9886384fc77ff9471fc26cd16f822324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>_atom4refc</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a9f82047fe27246702be9b5032768ffb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>parity</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>a22c1e0c27cee34369adf919eed3e3aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>ac59e55249c26b7453efa178aab836428</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBAtom</name>
      <anchorfile>classOpenBabel_1_1OBChiralData.html</anchorfile>
      <anchor>ac0625d6c1f6b8002765c09a45d400c4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSerialNums</name>
    <filename>classOpenBabel_1_1OBSerialNums.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBSerialNums</name>
      <anchorfile>classOpenBabel_1_1OBSerialNums.html</anchorfile>
      <anchor>ac133c97c2adaeacc4a476bb27bc24500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSerialNums</name>
      <anchorfile>classOpenBabel_1_1OBSerialNums.html</anchorfile>
      <anchor>a0b0be14ee04253bb90997df9884a94ca</anchor>
      <arglist>(const OBSerialNums &amp;cp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBSerialNums.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; int, OBAtom * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBSerialNums.html</anchorfile>
      <anchor>a392c3230c9d3cca11b1e4d57bdd2ddfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBSerialNums.html</anchorfile>
      <anchor>a97e7e04349f25820cb9f816f7c6a6cdd</anchor>
      <arglist>(std::map&lt; int, OBAtom * &gt; &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, OBAtom * &gt;</type>
      <name>_serialMap</name>
      <anchorfile>classOpenBabel_1_1OBSerialNums.html</anchorfile>
      <anchor>a9452a3c2c31da208c07429f21506f423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBVibrationData</name>
    <filename>classOpenBabel_1_1OBVibrationData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBVibrationData</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>ad6eff9b28ddb91e20a4e4f1648e21f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBVibrationData</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>ac935ab00b5625a4def7fbe6333ede664</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>OBVibrationData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a8c57b18c963d5b562a23616a601158d5</anchor>
      <arglist>(const OBVibrationData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>aeda647e3a1f11dc6bbed4087e98529f5</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp;lx, const std::vector&lt; double &gt; &amp;frequencies, const std::vector&lt; double &gt; &amp;intensities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a151ad8a43a162b11aa78f5dd5fec0076</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp;, const std::vector&lt; double &gt; &amp;, const std::vector&lt; double &gt; &amp;, const std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>GetLx</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a7d213a6f330db419aab9aa3f5dd62e48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetFrequencies</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a829a7ac41b51a00ec9179725aee9e60b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetIntensities</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a4a87c0646df8384b5ef302f655f3da8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetRamanActivities</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>ab5870bb28e8cc16230454accf779f17c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNumberOfFrequencies</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a96d628c08b86549ea8773f3e060e17d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; vector3 &gt; &gt;</type>
      <name>_vLx</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a84619fd6eb56bada6e0c68c54798bde0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vFrequencies</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>a443d61f7fd264880b7233b3d727a5828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vIntensities</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>ae7963c2698fd4975c7060b1c5438b272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vRamanActivities</name>
      <anchorfile>classOpenBabel_1_1OBVibrationData.html</anchorfile>
      <anchor>ac0a11832241a5fc28ac860aa326ba3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBDOSData</name>
    <filename>classOpenBabel_1_1OBDOSData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBDOSData</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a8e1b6f674958d6a07abb778f4b7e203e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBDOSData</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a1ebcd47ca2ff7b5950607d0cdc10dd6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>OBDOSData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a2771005cb116bbae2b46a169f6af5fd7</anchor>
      <arglist>(const OBDOSData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a6b3706524115138367f556cb4a624446</anchor>
      <arglist>(double, const std::vector&lt; double &gt; &amp;, const std::vector&lt; double &gt; &amp;, const std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetFermiEnergy</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a3ab082434283098923245df6e0ca6d04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetEnergies</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a684864bf91d52a68d8c84f365d447d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetDensities</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a28972870c2b635802ad721156ec6f692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetIntegration</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>aa85064106af2d5c69bce5722ec9a0a6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_fermi</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>abac522be53893f4e95ffe90e4423e9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vEnergies</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>ad069a68962fcc260bd3d4a1f4fc37fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vDensities</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>af901a3a7668a1729466dd8fcfe3cae21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vIntegration</name>
      <anchorfile>classOpenBabel_1_1OBDOSData.html</anchorfile>
      <anchor>a551c36cae879624b97356cf0aed85e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBOrbital</name>
    <filename>classOpenBabel_1_1OBOrbital.html</filename>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>afd66805019461ffb95634bf0e79dc992</anchor>
      <arglist>(double energy, double occupation=2.0, std::string symbol=&quot;A&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetEnergy</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>a898054d3301668a37b4d7c3612487157</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetOccupation</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>af1dcd8e10f31fbc0da62fe2e70530fd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSymbol</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>a6aced7401d9f61ea7a921564ddcf3f5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_energy</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>ad93165c379393f8eb17506f1f9820a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_occupation</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>abece6e2fb39058fe60114864abdfc592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_mullikenSymbol</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>abc035539018329c68382babb1648e1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OBOrbitalData</name>
      <anchorfile>classOpenBabel_1_1OBOrbital.html</anchorfile>
      <anchor>a28f7444cea7d79c814b94579da41f1e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBOrbitalData</name>
    <filename>classOpenBabel_1_1OBOrbitalData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBOrbitalData</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>afd15b15b68d5511ac566e95c537883e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBOrbitalData</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>ab152b3389d8c96e2ac4174ce5932499a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>OBOrbitalData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>ae0614715f508ed4aa1e7e0b8b58fc4c2</anchor>
      <arglist>(const OBOrbitalData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAlphaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a1aa001a5bb0835aecf6ac01d3097e5ac</anchor>
      <arglist>(std::vector&lt; OBOrbital &gt; orbitalList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBetaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>af50fed67352599bfd2adcc8a49c8e6f9</anchor>
      <arglist>(std::vector&lt; OBOrbital &gt; orbitalList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHOMO</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>adaea5fe04cd5876e6f2f8479fd6dc726</anchor>
      <arglist>(int alpha, int beta=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOpenShell</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a59b26af6c838614c16d75c8246612698</anchor>
      <arglist>(bool openShell)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOpenShell</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a7b32d28d61b3149a4a5b1051d86918b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAlphaHOMO</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a1243d416863fddeed1c5ba20d7c7a419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetBetaHOMO</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>adb5679cd09bed805338a74cc79b9b370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBOrbital &gt;</type>
      <name>GetAlphaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a82a690605d1d541a30d7ca1bd8e902be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBOrbital &gt;</type>
      <name>GetBetaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a14c67483d74fb40365254f84296d7cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadClosedShellOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a225191676677c410d5f7617ac658ce1b</anchor>
      <arglist>(std::vector&lt; double &gt; energies, std::vector&lt; std::string &gt; symmetries, int alphaHOMO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadAlphaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a5808edbdec480fd06e369da9f37f2642</anchor>
      <arglist>(std::vector&lt; double &gt; energies, std::vector&lt; std::string &gt; symmetries, int alphaHOMO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadBetaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a26a78d89c1cac1bf8612a86b40651933</anchor>
      <arglist>(std::vector&lt; double &gt; energies, std::vector&lt; std::string &gt; symmetries, int betaHOMO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBOrbital &gt;</type>
      <name>_alphaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a6edf786e96b35505ffe9150905f5f06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBOrbital &gt;</type>
      <name>_betaOrbitals</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a91a7e06b86e18fd65689b1da2cdf193f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_alphaHOMO</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>aeec65125d586ace9d5764cc437b6e33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_betaHOMO</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>a71b85b5ab742b2176819410e877ca1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_openShell</name>
      <anchorfile>classOpenBabel_1_1OBOrbitalData.html</anchorfile>
      <anchor>afba45991614dc0f33e799a2c8760b9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBElectronicTransitionData</name>
    <filename>classOpenBabel_1_1OBElectronicTransitionData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBElectronicTransitionData</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>afd34955993e8fa4ca5f54512c75ae2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBElectronicTransitionData</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a380b3a6c5dbb324cbae959d34e9c004e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>OBElectronicTransitionData &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a0a055059f597cf7730123d869b515a9f</anchor>
      <arglist>(const OBElectronicTransitionData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>aef9546adf269f7ee95c18c634dbd4b90</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;wavelengths, const std::vector&lt; double &gt; &amp;forces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEDipole</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a331f4c2dc917bbe7cebeb3a7e5ea8ede</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotatoryStrengthsVelocity</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>ae75e1b69dae06384fadfa777fe59286b</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotatoryStrengthsLength</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a40a1e8ffb6c8e85bcd99b0ad1d224470</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetWavelengths</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a1d19ba0a0f3a16ad1d524b6a539b9dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetForces</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a5ed3850c75fad7423e018502095843dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetEDipole</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>ad9a4401f2b4a5910b723fbdbb771993d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetRotatoryStrengthsVelocity</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>ad322e425e935a5c7989ea6716ed28d0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetRotatoryStrengthsLength</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a62d2c288f077f4b95cfda415e164f14d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vWavelengths</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a523167939ae7b279d2af900ef53ac0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vForces</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>af300a4b44a417f4999c4378522e10d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vEDipole</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a94998f1366e53e7430a50209b05424ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vRotatoryStrengthsVelocity</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>ac555eb9ba9de86341d5a4a0c5a22f098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_vRotatoryStrengthsLength</name>
      <anchorfile>classOpenBabel_1_1OBElectronicTransitionData.html</anchorfile>
      <anchor>a35e7c9407fefcda3910c6fc7e06e9f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotationData</name>
    <filename>classOpenBabel_1_1OBRotationData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="enumeration">
      <name>RType</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>afda39669e25831ec186e17cb437dba09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>afda39669e25831ec186e17cb437dba09a6ce26a62afab55d7606ad4e92428b30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASYMMETRIC</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>afda39669e25831ec186e17cb437dba09a2d93e4d4c3bc28e5ca615d332381e47f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYMMETRIC</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>afda39669e25831ec186e17cb437dba09a4b2338c5e1fba3b9cfb3a3473dfcc856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>afda39669e25831ec186e17cb437dba09adc101ebf31c49c2d4b80b7c6f59f22cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRotationData</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>af55b99b7ce56986ce4421f598bb7b1d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBRotationData</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a519e86e5760ce996627dcf4fe5efab66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>aa0e40eaa96ec46f0513b48fce93b7b76</anchor>
      <arglist>(RType RotorType, std::vector&lt; double &gt; RotationalConstants, int SymmetryNumber)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetRotConsts</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a6f70037b26d7b9467c1a58de1c387d94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSymmetryNumber</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a9ac59b320ed168e96f32234acd79b42a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RType</type>
      <name>GetRotorType</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a3eb540bec04a80b875079e7d0b982ec9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>RotConsts</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a158f9d92716703712f00b3b041adc3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>SymNum</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a59b5e4d007a23da401e33d9f5eea2664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RType</type>
      <name>type</name>
      <anchorfile>classOpenBabel_1_1OBRotationData.html</anchorfile>
      <anchor>a90ab08fd1dc96f17cf3562d8afeb60c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBVectorData</name>
    <filename>classOpenBabel_1_1OBVectorData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBVectorData</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>a7ebf015db0f2457d856d0eb688769d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBVectorData</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>a9bdbefcdfbd801132866f1e77ba70aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>a7c9f75965bfdc8bd1debc7fba3797a65</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>a146acce5019a84cc73f48a23e39b8e6e</anchor>
      <arglist>(vector3 data)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>ab34f0d01cda028329486ce4814cdc966</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3</type>
      <name>_vec</name>
      <anchorfile>classOpenBabel_1_1OBVectorData.html</anchorfile>
      <anchor>a0acc44e4b0579d4cd684edfc4f5a4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMatrixData</name>
    <filename>classOpenBabel_1_1OBMatrixData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBMatrixData</name>
      <anchorfile>classOpenBabel_1_1OBMatrixData.html</anchorfile>
      <anchor>a15f02a1883eb12f6980b542c40f26810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBMatrixData</name>
      <anchorfile>classOpenBabel_1_1OBMatrixData.html</anchorfile>
      <anchor>abeefc08263da22a794ddf7a594a7e82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBMatrixData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBMatrixData.html</anchorfile>
      <anchor>a9d238447321132fcc9109b7a1b39b480</anchor>
      <arglist>(matrix3x3 data)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBMatrixData.html</anchorfile>
      <anchor>a65834d48498fcf653d89ed45680d9917</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix3x3</type>
      <name>_matrix</name>
      <anchorfile>classOpenBabel_1_1OBMatrixData.html</anchorfile>
      <anchor>ae664fb7cf64216e4b362cd4e48b018f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGraphSym</name>
    <filename>classOpenBabel_1_1OBGraphSym.html</filename>
    <member kind="function">
      <type></type>
      <name>OBGraphSym</name>
      <anchorfile>classOpenBabel_1_1OBGraphSym.html</anchorfile>
      <anchor>ab2b78319f588bac47323cfd3aaca8c7c</anchor>
      <arglist>(OBMol *pmol, const OBBitVec *frag_atoms=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBGraphSym</name>
      <anchorfile>classOpenBabel_1_1OBGraphSym.html</anchorfile>
      <anchor>a9f3ecad8af981b1060c6a240f68461e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSymmetry</name>
      <anchorfile>classOpenBabel_1_1OBGraphSym.html</anchorfile>
      <anchor>a7ab3d90cf40eaebfc62669b9f98f3581</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;symmetry_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearSymmetry</name>
      <anchorfile>classOpenBabel_1_1OBGraphSym.html</anchorfile>
      <anchor>a455b5056721f4ee312e00f964a0b6aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>NoSymmetryClass</name>
      <anchorfile>classOpenBabel_1_1OBGraphSym.html</anchorfile>
      <anchor>a17711ae5b1b8ed1c5432299e0694d87f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGrid</name>
    <filename>classOpenBabel_1_1OBGrid.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="function">
      <type></type>
      <name>OBGrid</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a907e18c9891f0d2bf379c3f9be6b6dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ac64ef48829b8b0825d823194065a813e</anchor>
      <arglist>(OBMol &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a1f6551dd07c7ac678e87490d5670aa7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ae8fcb907c909f575ef72e132e7b18ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a5de60e41b3a8ae923af4acf34a5dd8b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>aa3e98e4e3d520f6c796c89976cb48677</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>adf7089774e10eac6341d3662ece9b7ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ae1dab64d37bb4f2fee3dd9dbbb2dd3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a2a499643ad2be70afaa1607b4affb310</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ad557d62926d0bc4cea092baba4466906</anchor>
      <arglist>(double *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a4f56880aa1ad845fbc6c0c7a4ce45d3b</anchor>
      <arglist>(vector3 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_xmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a7b91634c838cfa025070df146452d4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_xmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>aa3a779f1daff2a7dbe79fa4e0b9def75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_ymin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a775215217e5f88eabb13d886d3f28e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_ymax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a89dce702ed281c7c1ca2e88f6a3a00b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_zmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ad2367ec6a3d166e433fec916c5826aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_zmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>abe522732504118f0d41304e111c94e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFloatGrid</name>
    <filename>classOpenBabel_1_1OBFloatGrid.html</filename>
    <base>OpenBabel::OBGrid</base>
    <member kind="function">
      <type></type>
      <name>OBFloatGrid</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a7ddbf2110b572079e0dee5def5b97cf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBFloatGrid</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ad84f091329edc731ab0fb4c53640923b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a80c4eee6725703a22dcce7990eb37552</anchor>
      <arglist>(OBMol &amp;box, double spacing, double pad=0.0)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetMin</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a8121470b4aa37e344630ffb3c8104cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMin</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ab3d065904c33ecf6eaae0199fe6d0592</anchor>
      <arglist>(double *a)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetMax</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>adfbe5b67160cd2a39b96b48ef6a5ce20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMax</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a1aa43bea8911cf7665f6e2fd151b609c</anchor>
      <arglist>(double *a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetSpacing</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a12a4638e627471ba4f9d2ec8837dff0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a78f75c8108f8539c255711029b37cedc</anchor>
      <arglist>(double &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScale</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a815a893513d9333dffce060b37d413cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetHalfSpace</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a59381fddeab9394eb1e6f881bc5bcfde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetXdim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a2d1899945af07ee0874f426dfa907301</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetYdim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>af06d1abed456dfc5ae6df717bfdfd119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetZdim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a48f46d73fcb9f58a8fe51296a9b223df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a6e6665768ad3b8fc18276c6517c0b03d</anchor>
      <arglist>(int *a)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetMidpointVector</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>accffd942b323dd88aebc6fb6c20e1e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetXAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a664e46425ebb4de07d1d3d44eced9fd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetYAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>af7bce82f6dfeb2b4f04f243e23e74dca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetZAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a299ca4b8330c823e4c771888b09ac5ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumberOfPoints</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a8e057288f32449cbd79175447a8eec49</anchor>
      <arglist>(int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetXAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a89ab18f2833d6df6028f5570c1c46e22</anchor>
      <arglist>(vector3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetYAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a2f5749ad1c1b06bcb3c938e78c75f8f9</anchor>
      <arglist>(vector3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetZAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>adcbcb0e0537b5fa2c834ffa962f37b2c</anchor>
      <arglist>(vector3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLimits</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a0b9fb0de3277dd55625e632bc4f0ab5b</anchor>
      <arglist>(const vector3 &amp;origin, const vector3 &amp;x, const vector3 &amp;y, const vector3 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLimits</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a009627e179cde33c9c0150d6a06214fd</anchor>
      <arglist>(const double origin[3], const double x[3], const double y[3], const double z[3])</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetDataVector</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a6501513ff0a2a1cf7960b172d5022926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVals</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a958a1ed547047fb833c200c96686d4a7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetVals</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a5eb7667a7f7ac9876e632c35231fc44a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ac52efdf630f7f15198bf57bff1520113</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVals</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a70b7ebc269d7a65e00d8eae51a5f01f4</anchor>
      <arglist>(double *ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetValue</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a8e87e5ca8491e61def25764da4fdb46d</anchor>
      <arglist>(int i, int j, int k, double val)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>Center</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a2a6903cb1be80ac1055925f1074b75a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Inject</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a0c91177f625939fc2607de9003b1c728</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToCoords</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ab3b10d37b8b9c5e049a43b7f481c3062</anchor>
      <arglist>(int idx, double &amp;x, double &amp;y, double &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CoordsToIndex</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ab508ca499d4968d05e172c2682a0138c</anchor>
      <arglist>(int *, double *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CoordsToIndex</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a36e846af36e72a94ea8f316667b8a2e4</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Interpolate</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a7cc972540451ceedb7215b3bc291c9d7</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InterpolateDerivatives</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a3b04b4e2c0917adc5863f867b6b8c6b4</anchor>
      <arglist>(double, double, double, double *derivatives)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ac64ef48829b8b0825d823194065a813e</anchor>
      <arglist>(OBMol &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a1f6551dd07c7ac678e87490d5670aa7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ae8fcb907c909f575ef72e132e7b18ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a5de60e41b3a8ae923af4acf34a5dd8b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>aa3e98e4e3d520f6c796c89976cb48677</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>adf7089774e10eac6341d3662ece9b7ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ae1dab64d37bb4f2fee3dd9dbbb2dd3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a2a499643ad2be70afaa1607b4affb310</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ad557d62926d0bc4cea092baba4466906</anchor>
      <arglist>(double *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a4f56880aa1ad845fbc6c0c7a4ce45d3b</anchor>
      <arglist>(vector3 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_values</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a7d7a76b9f2cf24040d65d2387f01ebd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_ival</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a87d1e1b6b09eecaec2670dd0f8caa6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_midz</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a63f7b06cde4a057a2c76f8af0ff28e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_midx</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ae65bd2fad82143233d356b5767f7a37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_midy</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ae2de17d8c54e293efbddc7b1eefa0c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ydim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a7c3c42170d23cae468eb5885aa913ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_xdim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>aaec2f9d77f4de3a82e0149113b6416a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_zdim</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>aa4d2282bc8cc51ffa66eb6c17aae17ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_spacing</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a382cc46cd19ec2a1e726d9c8191cedea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_inv_spa</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a86660f38a65032dffc210cb116735e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_halfSpace</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a314a0d1d51e74f040278d0de06f075b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3</type>
      <name>_xAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a774e5b3910ccdafb41ac680e319085d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3</type>
      <name>_yAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a526e1a071db304e1970afc1bdf1769f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3</type>
      <name>_zAxis</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a0d3a8c489526216952d17734085e7287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_xmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a7b91634c838cfa025070df146452d4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_xmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>aa3a779f1daff2a7dbe79fa4e0b9def75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_ymin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a775215217e5f88eabb13d886d3f28e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_ymax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a89dce702ed281c7c1ca2e88f6a3a00b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_zmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ad2367ec6a3d166e433fec916c5826aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_zmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>abe522732504118f0d41304e111c94e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>a0d83407c5f3e5136e849127939db3a70</anchor>
      <arglist>(std::ostream &amp;, const OBFloatGrid &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classOpenBabel_1_1OBFloatGrid.html</anchorfile>
      <anchor>ad47b6c9bc3a81f0b8ae7047ee8132488</anchor>
      <arglist>(std::istream &amp;, OBFloatGrid &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBProxGrid</name>
    <filename>classOpenBabel_1_1OBProxGrid.html</filename>
    <base>OpenBabel::OBGrid</base>
    <member kind="function">
      <type></type>
      <name>OBProxGrid</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a5d96dd1fe7ca31c165a7ba46527b9f94</anchor>
      <arglist>(int gridtype=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBProxGrid</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a4505a0fdb45f7049f787a3af0c6507e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a396800b8a8f488a60854d5ae69c89658</anchor>
      <arglist>(OBMol &amp;mol, OBMol &amp;box, double cutoff, double resolution=0.5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a23a742f09361eec65d67cdda81e3a428</anchor>
      <arglist>(OBMol &amp;mol, OBMol &amp;box, double cutoff, std::vector&lt; bool &gt; &amp;use, double resolution=0.5)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; *</type>
      <name>GetProxVector</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>af98d915c975f51281314c81d915818bd</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; *</type>
      <name>GetProxVector</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>aab726ed40bb8d715099563e83f96cd4d</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LipoGrid</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>ac83fec56359c563116ec5a845ae20e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PolarGrid</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a68fd875c6e50932b149919ebf5fd486a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetGridType</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a018163ad162fcb4394833ac8c1a370e3</anchor>
      <arglist>(int gridtype)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ac64ef48829b8b0825d823194065a813e</anchor>
      <arglist>(OBMol &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a1f6551dd07c7ac678e87490d5670aa7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ae8fcb907c909f575ef72e132e7b18ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a5de60e41b3a8ae923af4acf34a5dd8b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>aa3e98e4e3d520f6c796c89976cb48677</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>adf7089774e10eac6341d3662ece9b7ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ae1dab64d37bb4f2fee3dd9dbbb2dd3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a2a499643ad2be70afaa1607b4affb310</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ad557d62926d0bc4cea092baba4466906</anchor>
      <arglist>(double *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PointIsInBox</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a4f56880aa1ad845fbc6c0c7a4ce45d3b</anchor>
      <arglist>(vector3 v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_gridtype</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a82f62033e7d83304ab2da3418f6be612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nxinc</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>aeeb5ea7c1188fa71515b62a0449c80dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nyinc</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>aa637d9486f8237b85bef888187c69b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nzinc</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a76fe34283476439a274c9a7f099aeaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxinc</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a118beb497e6460636aa9cf48e46c2623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_inc</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>aab8d6695bce362b593ab3dd8c021700b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>cell</name>
      <anchorfile>classOpenBabel_1_1OBProxGrid.html</anchorfile>
      <anchor>a359e5bb0c1ace1a8d23717ae05ce804b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_xmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a7b91634c838cfa025070df146452d4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_xmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>aa3a779f1daff2a7dbe79fa4e0b9def75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_ymin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a775215217e5f88eabb13d886d3f28e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_ymax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>a89dce702ed281c7c1ca2e88f6a3a00b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_zmin</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>ad2367ec6a3d166e433fec916c5826aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_zmax</name>
      <anchorfile>classOpenBabel_1_1OBGrid.html</anchorfile>
      <anchor>abe522732504118f0d41304e111c94e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBScoreGrid</name>
    <filename>classOpenBabel_1_1OBScoreGrid.html</filename>
    <member kind="function">
      <type></type>
      <name>OBScoreGrid</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>aea55db91f06422c171c3939dd5691b0a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBScoreGrid</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a14f9977e97f604f4e2f4f09ce7d6cb1b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVerbose</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a25911a8785e3fff79ce03278e09c74f1</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a81dba3e924fddc20b688ca613ec2636e</anchor>
      <arglist>(score_t type)</arglist>
    </member>
    <member kind="function">
      <type>score_t</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>ade656857818e093c4caeada3babafd21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a114a309251a09c82e63645b8eaa79f33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Eval</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a1973f00ba0ab103d78305ba01323f18f</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Eval</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a17b8bb0e69ea72ff166768a24f84a03f</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>ab885605cebc669554a96c7ebf10ed1e9</anchor>
      <arglist>(OBMol &amp;, OBMol &amp;, std::string &amp;, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>adc3c7c5a6cb7592aff127db9b0ed320e</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>ac766aa1aa09c55ea699945dba5fecc7b</anchor>
      <arglist>(OBMol &amp;, std::vector&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a18f46d19bc8a15c0c1f2ceacd3d16e7a</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Config</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a76941ad7910ff3d3864f3a0368836efd</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>ac66c4ef5deacb26c213a9f46a15600c7</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Write</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a85fb990e29228c904dfcd80a3c9ed0dd</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector3</type>
      <name>Center</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a1563b71f50c0192978cecaed6fc11fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vector3</type>
      <name>CenterMol</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>af6996bda138d1b637cf36db2fab269d8</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a40a24ec85daa9ac70aa74e4ca744f838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>score_t</type>
      <name>gridtype</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>a04fe4b9911de166e526288d95b4ce6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>classOpenBabel_1_1OBScoreGrid.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGridData</name>
    <filename>classOpenBabel_1_1OBGridData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="enumeration">
      <name>Unit</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>abceb2331ad056e3c5ad27894199a49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOHR</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>abceb2331ad056e3c5ad27894199a49eda1ed8947227c706dcf6ce20f2dabecbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANGSTROM</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>abceb2331ad056e3c5ad27894199a49edac0ff23bb2caec4483def76b5ac62f0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OTHER</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>abceb2331ad056e3c5ad27894199a49edadbf1dee1b8cd7ea3c82661943c7b74f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBGridData</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a3759224f5030c8385542bcb899465b6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBGridData</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a7f927f99da289ae1cb3f9da64ee9d429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAxes</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a8f99a95e113289b791979a0949ebff51</anchor>
      <arglist>(double x[3], double y[3], double z[3]) const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetXAxis</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a664e46425ebb4de07d1d3d44eced9fd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetYAxis</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>af7bce82f6dfeb2b4f04f243e23e74dca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetZAxis</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a299ca4b8330c823e4c771888b09ac5ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAxes</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a039b9b89c60f700b720e1ecb705c31df</anchor>
      <arglist>(vector3 &amp;v1, vector3 &amp;v2, vector3 &amp;v3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a5b11216aacdb5a5d6c827ae33a0948d8</anchor>
      <arglist>(int &amp;nx, int &amp;ny, int &amp;nz) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>ac9c8dab0c9b1ff40b9a62ae274284ca2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNumberOfSteps</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a22d3c24ecf14a00aeee444b63e57ca67</anchor>
      <arglist>(int steps[3]) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetValues</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a9b5e89e70ca1fe3e99d802c0e020dd07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>ac7d6b0a20315fa1a88926cb31ce96b63</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>ada9d79c923a5ed1b0edd0571f80c7537</anchor>
      <arglist>(vector3 pos) const </arglist>
    </member>
    <member kind="function">
      <type>Unit</type>
      <name>GetUnit</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a425800b2d3fa62addcdcd18ad09b3d06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMinValue</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a96de6cade8fdffe8a36cb68f9958284d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMaxValue</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>ae986e6ee03886af15440c86a780eb854</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetOriginVector</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>afd1372eb23d785e07609b4ee1558ea96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOriginVector</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a49001a7fa2061cbf41d8ec868a895f92</anchor>
      <arglist>(double o[3]) const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetMaxVector</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a6451a826110b46a7cbf8b3b2d69adfed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetUnrestricted</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>ac8ee105dfe7a85ecb276eda28b6b7d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumSymmetries</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a51394d46f39c8aaa712c10c32e4200f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumberOfPoints</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a8e057288f32449cbd79175447a8eec49</anchor>
      <arglist>(int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLimits</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a0b9fb0de3277dd55625e632bc4f0ab5b</anchor>
      <arglist>(const vector3 &amp;origin, const vector3 &amp;x, const vector3 &amp;y, const vector3 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLimits</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a009627e179cde33c9c0150d6a06214fd</anchor>
      <arglist>(const double origin[3], const double x[3], const double y[3], const double z[3])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetValue</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a8e87e5ca8491e61def25764da4fdb46d</anchor>
      <arglist>(int i, int j, int k, double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValues</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a3384333ba39252b46f5189ca43baa2d1</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnit</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a29b2f36979b70af2f1793b4754e6d4b4</anchor>
      <arglist>(Unit u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnrestricted</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>ad4c371035d64f046b9728f27fbe48678</anchor>
      <arglist>(bool u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumSymmetries</name>
      <anchorfile>classOpenBabel_1_1OBGridData.html</anchorfile>
      <anchor>a6fc7e124f35cd07bffc7a9acb2c6f294</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGroupContrib</name>
    <filename>classOpenBabel_1_1OBGroupContrib.html</filename>
    <base>OpenBabel::OBDescriptor</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBGroupContrib</name>
      <anchorfile>classOpenBabel_1_1OBGroupContrib.html</anchorfile>
      <anchor>ab9a6ae6c869cad36dc6628f18b2ce677</anchor>
      <arglist>(const char *ID, const char *filename, const char *descr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBGroupContrib.html</anchorfile>
      <anchor>a4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGroupContrib *</type>
      <name>MakeInstance</name>
      <anchorfile>classOpenBabel_1_1OBGroupContrib.html</anchorfile>
      <anchor>ab91e9dba77605edc84876eac596f2094</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;textlines)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Predict</name>
      <anchorfile>classOpenBabel_1_1OBGroupContrib.html</anchorfile>
      <anchor>ad81c5bb776314e5eb855eca1e5bca292</anchor>
      <arglist>(OBBase *pOb, std::string *param=NULL)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>PredictAndSave</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a3a6e9ddee5b20a8911bc9f6e407d1abd</anchor>
      <arglist>(OBBase *pOb, std::string *param=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetStringValue</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ade8613a3e82627568adbac497bd3422b</anchor>
      <arglist>(OBBase *pOb, std::string &amp;svalue, std::string *param=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Compare</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a5a775da37f5ce464013813ec66b3a349</anchor>
      <arglist>(OBBase *pOb, std::istream &amp;ss, bool noEval, std::string *param=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Order</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ac9b3638a021a9cafc06d8e7059907740</anchor>
      <arglist>(double p1, double p2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Order</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ada86af1dfb13dd68c119d412480c78c3</anchor>
      <arglist>(std::string s1, std::string s2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>FilterCompare</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a1d0907c6fab9cdb01ce11858eb5f0860</anchor>
      <arglist>(OBBase *pOb, std::istream &amp;ss, bool noEval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AddProperties</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a2230dfc67c9b617df81f950e382844cc</anchor>
      <arglist>(OBBase *pOb, const std::string &amp;DescrList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DeleteProperties</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a1a089d9c827830b5a9a2e644b267e510</anchor>
      <arglist>(OBBase *pOb, const std::string &amp;DescrList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetValues</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a789fe3d5cae737f1caa28590fe29f460</anchor>
      <arglist>(OBBase *pOb, const std::string &amp;DescrList)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; std::string, std::string &gt;</type>
      <name>GetIdentifier</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a9d1adeb0f4720b6af7f0fc5569a8bb3e</anchor>
      <arglist>(std::istream &amp;optionText)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>ParsePredicate</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a20b0788ed84f1b69746dfd9ed06be507</anchor>
      <arglist>(std::istream &amp;optionText, char &amp;ch1, char &amp;ch2, std::string &amp;svalue)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>ReadStringFromFilter</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>ac41e9b3233ce576c2e4c5b242767eaec</anchor>
      <arglist>(std::istream &amp;ss, std::string &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>CompareStringWithFilter</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a00c8a88c0a36c9a1167b119214e015e6</anchor>
      <arglist>(std::istream &amp;optionText, std::string &amp;s, bool noEval, bool NoCompOK=false)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>ispunctU</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a865d2be70640a96f185bf78dcaaea8b2</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>MatchPairData</name>
      <anchorfile>classOpenBabel_1_1OBDescriptor.html</anchorfile>
      <anchor>a4e794d96851deaad479e17b30928a3cd</anchor>
      <arglist>(OBBase *pOb, std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBInternalCoord</name>
    <filename>classOpenBabel_1_1OBInternalCoord.html</filename>
    <member kind="function">
      <type></type>
      <name>OBInternalCoord</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>af9e18e089dc6ac67726900235fd25221</anchor>
      <arglist>(OBAtom *a=NULL, OBAtom *b=NULL, OBAtom *c=NULL, double dst=0.0, double ang=0.0, double tor=0.0)</arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>_a</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>a5641d72c2be5beec74cd3ef957e318aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>_b</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>ade87acde4e50a8cb3c14decf69f44518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBAtom *</type>
      <name>_c</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>a65c9c9fce541eeda66af80f20525d44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dst</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>a9de926d6e0575fba43233a9086daa96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_ang</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>a4c0b2d486f17834b1e61153d7d1736b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_tor</name>
      <anchorfile>classOpenBabel_1_1OBInternalCoord.html</anchorfile>
      <anchor>af7fa3a43c649400301cd1cff25eb1329</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBIsomorphismMapper</name>
    <filename>classOpenBabel_1_1OBIsomorphismMapper.html</filename>
    <class kind="class">OpenBabel::OBIsomorphismMapper::Functor</class>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt;</type>
      <name>Mapping</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a97df663c0fc8a3ba6e9113802cac5c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Mapping &gt;</type>
      <name>Mappings</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>af45ae29000944170414da618d8d5d677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBIsomorphismMapper</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a9bf7837f3f721213fa343691e63eae5b</anchor>
      <arglist>(OBQuery *query)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBIsomorphismMapper</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a6713b2cb5a577f1ca475218733158aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>MapFirst</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a1008754c556920726558c9ff4364a2b9</anchor>
      <arglist>(const OBMol *queried, Mapping &amp;map, const OBBitVec &amp;mask=OBBitVec())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>MapUnique</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>ae7aeea6f463896e9de5ac36bb72ebd0f</anchor>
      <arglist>(const OBMol *queried, Mappings &amp;maps, const OBBitVec &amp;mask=OBBitVec())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>MapAll</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>afc1d4e5ff69ad9f3854601e0a7d5e6d8</anchor>
      <arglist>(const OBMol *queried, Mappings &amp;maps, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>MapGeneric</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a54d090b64d4101064d7614cf81d7decf</anchor>
      <arglist>(Functor &amp;functor, const OBMol *queried, const OBBitVec &amp;mask=OBBitVec())=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeout</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a3f1b7a8e3d742835665503376bf8643d</anchor>
      <arglist>(unsigned int seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBIsomorphismMapper *</type>
      <name>GetInstance</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a89cf32c6e6d4f6fce6a61a3e70cd2a39</anchor>
      <arglist>(OBQuery *query, const std::string &amp;algorithm=std::string(&quot;VF2&quot;))</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBQuery *</type>
      <name>m_query</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>a095cd6b4cbaab0cba9c46ea592ed899c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_timeout</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper.html</anchorfile>
      <anchor>acda4225670d6511a6b4055aa91a387f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBIsomorphismMapper::Functor</name>
    <filename>classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Functor</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.html</anchorfile>
      <anchor>ab890a520140b6cc0c5f5fe05a6bf4f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.html</anchorfile>
      <anchor>aef089945cd2267e472e3077713dfec4a</anchor>
      <arglist>(Mapping &amp;map)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRateData</name>
    <filename>classOpenBabel_1_1OBRateData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="enumeration">
      <name>rate_type</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a3a2d440e7729afe454180909de5cee32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a3a2d440e7729afe454180909de5cee32a42a4ade1acd55a49164099104990e09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a3a2d440e7729afe454180909de5cee32afe0cb765d0bfc2535a3f5b124ec8f887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>E</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a3a2d440e7729afe454180909de5cee32ab199e021998d49b1f09338d8b9b18ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>reaction_type</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a0c0cce1d70923935e204facefcea5c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARRHENIUS</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a0c0cce1d70923935e204facefcea5c56af9d5bff6fde5459959e67f676da0b461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINDERMANN</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a0c0cce1d70923935e204facefcea5c56a08d04641b486c366ba9b193790dedf67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TROE</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a0c0cce1d70923935e204facefcea5c56aad6da7a4573a5259e41d94c5b228953b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SRI</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a0c0cce1d70923935e204facefcea5c56aa5781b80abc39c88c7970370a3e1f966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREEBODY</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a0c0cce1d70923935e204facefcea5c56a47450c21a6a94cd26f3c43b8681f7711</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>af0b8e0b15297bc82b44b17c06f1e2020</anchor>
      <arglist>(OBBase *parent) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRateData</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a55fefb58b910f8c3fdfee7fabbb23920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRate</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a79f9b3aaba0aa51a615a90c1b927b725</anchor>
      <arglist>(rate_type n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRate</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a76771390c047fee43872969766e83c98</anchor>
      <arglist>(rate_type n, const double val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetLoRate</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>aa817a360c97efbc2366e6232f1581339</anchor>
      <arglist>(rate_type n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLoRate</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a72c63509e94ea135195a1354c4c06d52</anchor>
      <arglist>(rate_type n, const double val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTroeParam</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>aaed4791dfee9e67c60696edb7021e9d9</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTroeParams</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>acc279b50e40cf2382890306420a4be39</anchor>
      <arglist>(int n, const double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEfficiency</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a633fe6294341707865329edbf018cf15</anchor>
      <arglist>(std::string id, double Eff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetEfficiency</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>ab65164866116b9c563b3c8c4719351aa</anchor>
      <arglist>(std::string id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetNextEff</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>ad6ae986be83dcfe54cd18e004b6d9828</anchor>
      <arglist>(std::string &amp;id, double &amp;Eff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>reaction_type</type>
      <name>ReactionType</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a2408b8dee598f5d056e4852f61f3a7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Rates</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>ab82756a04d7c0ab192a0251dc888d748</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>LoRates</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>a3933e62231b2769d0dc648015eac0db0</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>TroeParams</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>ad46e02413bb14f966c63168fda5b05bb</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, double &gt;</type>
      <name>Efficiencies</name>
      <anchorfile>classOpenBabel_1_1OBRateData.html</anchorfile>
      <anchor>aa597564f2d0fa70d0e3439eeba23628e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBNasaThermoData</name>
    <filename>classOpenBabel_1_1OBNasaThermoData.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBNasaThermoData</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a8391a502a623c62101d104739f96ed01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>af0b8e0b15297bc82b44b17c06f1e2020</anchor>
      <arglist>(OBBase *parent) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetCoeff</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a7bc231862ed975fdb41bc6419fe4f255</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoeff</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a9211f08c3cf615993dc83d52b4825020</anchor>
      <arglist>(unsigned n, const double val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetLoT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a42f85fdc1b404a27cd983ab37a72c3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMidT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a5b4038be222c38314925c8ca1e13e289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetHiT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a403e3d8d536ebc96e16697d78c4e36bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLoT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a8d0f8047ae165b363ded711091e7e569</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMidT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a7d05a55aacc2ba0c7a5fab4c8728225b</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHiT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a3949418d1edc4a2ee024541cda0df9b2</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>GetPhase</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a40d1f76b73494eaca7e6434246e52d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPhase</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a6a86547c2c90b936177a5e672647e578</anchor>
      <arglist>(char ph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Coeffs</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>af89bc313a70eae2229a5d2a0f9a174bf</anchor>
      <arglist>[14]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>LoT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>aa713d4e2428d78329da1510dfbfb635a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>MidT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a4e16a1dc717bee4c5f9c856a64ce0060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>HiT</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>aca4549226e1cc69274d6e9a3da6e4706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>phase</name>
      <anchorfile>classOpenBabel_1_1OBNasaThermoData.html</anchorfile>
      <anchor>a2ee079546fcae6e5bbb7d9e2bee3a91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::FilteringInputStreambuf</name>
    <filename>classOpenBabel_1_1FilteringInputStreambuf.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FilteringInputStreambuf</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>a5286eeeb41318332c62b76dbf0f05430</anchor>
      <arglist>(std::streambuf *source=NULL, bool deleteWhenFinished=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilteringInputStreambuf</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>a848f7550d0280c87631b47f76c715013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>overflow</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>a71cbc6b1ec560d3788dac4c02e9328da</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>underflow</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>a175cdf589e167db22f30ccacdf98e007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>a553fc1343cc7a747775864d1d124a5d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::streampos</type>
      <name>seekoff</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>aea680f1e3476af107476e375aaac4b6d</anchor>
      <arglist>(std::streamoff off, std::ios_base::seekdir way, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::streampos</type>
      <name>seekpos</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>a9f073109a0b2c593a7c63967869c366d</anchor>
      <arglist>(std::streampos sp, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)</arglist>
    </member>
    <member kind="function">
      <type>std::streambuf *</type>
      <name>GetSource</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>aaa1ca82e0fba738f10a36f892007a114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSource</name>
      <anchorfile>classOpenBabel_1_1FilteringInputStreambuf.html</anchorfile>
      <anchor>ab8629df5351a87a231c5e95e5518dc4b</anchor>
      <arglist>(std::streambuf *newsource)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::LineEndingExtractor</name>
    <filename>classOpenBabel_1_1LineEndingExtractor.html</filename>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classOpenBabel_1_1LineEndingExtractor.html</anchorfile>
      <anchor>ae1607763657353932b1be8b2909371b6</anchor>
      <arglist>(std::streambuf &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classOpenBabel_1_1LineEndingExtractor.html</anchorfile>
      <anchor>a1d0aa4bfb893ffbd31600926710db47d</anchor>
      <arglist>(std::streambuf &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBLocale</name>
    <filename>classOpenBabel_1_1OBLocale.html</filename>
    <member kind="function">
      <type></type>
      <name>OBLocale</name>
      <anchorfile>classOpenBabel_1_1OBLocale.html</anchorfile>
      <anchor>a3187dc22bcace59e8cf180a9ce2a948a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBLocale</name>
      <anchorfile>classOpenBabel_1_1OBLocale.html</anchorfile>
      <anchor>affe658116670886177d83c47ebbafd4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocale</name>
      <anchorfile>classOpenBabel_1_1OBLocale.html</anchorfile>
      <anchor>ac2a65c05429a05dcb3c0839acec1bce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RestoreLocale</name>
      <anchorfile>classOpenBabel_1_1OBLocale.html</anchorfile>
      <anchor>a6189e53d73ae552e82750433a89b75a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBLocalePrivate *</type>
      <name>d</name>
      <anchorfile>classOpenBabel_1_1OBLocale.html</anchorfile>
      <anchor>af92d12ea713aca7bd87f467dfb698d1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMol</name>
    <filename>classOpenBabel_1_1OBMol.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a937a09d86f3f440467334e546a98d8d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMol</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aafa7e4623d4c3c0305b5523ca8a77e14</anchor>
      <arglist>(const OBMol &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBMol</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a8df0dd71ac1dba7f7876d6671279d087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMol &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a9d63c24cbe9dc1f6e82d58da2b67dafa</anchor>
      <arglist>(const OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>OBMol &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3f9d2bbe4ae3f85ddca39be0a8ff4971</anchor>
      <arglist>(const OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReserveAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a723933398f0402a92916d1cfcb8dadd6</anchor>
      <arglist>(int natoms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBAtom *</type>
      <name>CreateAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afd5176ccf4c318a93379716d48ab01e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBond *</type>
      <name>CreateBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aed69c2ff7d45271240ee8e33f4344d5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBResidue *</type>
      <name>CreateResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3803d9a4c2a776560b0c36bc2e788132</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DestroyAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a8a3d084b1d94acc59c93b9b05e7d3281</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DestroyBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a942e828cdc42e0c168f2188a225a7ac3</anchor>
      <arglist>(OBBond *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DestroyResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab224ebc76c4ac8cac7d10df2fae43e79</anchor>
      <arglist>(OBResidue *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa53209ef174b454eb99e269ef59ebbe0</anchor>
      <arglist>(OBAtom &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InsertAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>abd2ad51974aaf20356fe5a07628205b9</anchor>
      <arglist>(OBAtom &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a62e485fd693d4458ab5c47835afab049</anchor>
      <arglist>(int beginIdx, int endIdx, int order, int flags=0, int insertpos=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac92c32a100a07407535d5412d1a3b3ae</anchor>
      <arglist>(OBBond &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad656115fdd6749ef7ad8394ee687f375</anchor>
      <arglist>(OBResidue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>NewAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae215a7452ce2f50590d64af7a5558f0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>NewAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad2762de927ca28384c48bf618603aab2</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>NewBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aeefe2b1d5039fdf141187e10cf9c6b9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>NewBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a48c326f3815a423f21bba671970ec511</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>NewResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7662758d1fe46ab3a3392b1970c6a656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a688b0d2367ab8e683821e6cff705d5f4</anchor>
      <arglist>(OBAtom *, bool destroyAtom=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac2b07c6d4f4dee79c04614cb34d5a9e7</anchor>
      <arglist>(OBBond *, bool destroyBond=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a202a80d2d05f526fa5186dfb797558d6</anchor>
      <arglist>(OBResidue *, bool destroyResidue=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetFlags</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aba761a006b56d62912a91e259ce11bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6f656d9b9241846d93d6bfbe2ee89818</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0c317a10161689c407f29a6fcacdb852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a115132ab8bd21607d00d61bc1ba5cc16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumHvyAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afa92da4c4cfc01b7c0d4385f487b42a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumResidues</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad1369fbd476ea326b847c08ff64f9331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumRotors</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a4b7d18f81253efd82ca54e4a9c0aae65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af2f78686dc35b7f79f44edc55b42d14a</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetAtomById</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3e8b5af457f70a6f106be30b3375c7f5</anchor>
      <arglist>(unsigned long id) const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>GetFirstAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7a8287faea913f46d12783a066857b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac2d4e8eb07783443a8d663057e5193ab</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBondById</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6a6ff88d670f69d418f0ad0ad76771db</anchor>
      <arglist>(unsigned long id) const </arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac51202dd4219b084be014d7ee533702e</anchor>
      <arglist>(int a, int b) const </arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0de1f5399c5c15b13d1db631951cb2c0</anchor>
      <arglist>(OBAtom *bgn, OBAtom *end) const </arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>GetResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afef672662f0f83abd8149e15cc531f01</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBInternalCoord * &gt;</type>
      <name>GetInternalCoord</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af5afa8a0742e0238f3fd92ada82f079d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTorsion</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a401a725a0efbc20c49783f176d78e6a7</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTorsion</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>adfd902d8de9eeb32ea476fe916a329fd</anchor>
      <arglist>(OBAtom *a, OBAtom *b, OBAtom *c, OBAtom *d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAngle</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1589aac9963e7a8f58bffb24d85b9a16</anchor>
      <arglist>(OBAtom *a, OBAtom *b, OBAtom *c)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFormula</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7adc12bff502264eaebf537a5e28a43c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSpacedFormula</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a997bc4b84a93d285f63efa60cbb8ee8d</anchor>
      <arglist>(int ones=0, const char *sp=&quot; &quot;, bool implicitH=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetEnergy</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a898054d3301668a37b4d7c3612487157</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMolWt</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a77cd52b60b431c19aa7debcd0d92e07d</anchor>
      <arglist>(bool implicitH=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetExactMass</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7cac960f30506aa53d083983845032df</anchor>
      <arglist>(bool implicitH=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetTotalCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab78d46b60f04702fa6f450ef6f8dae62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetTotalSpinMultiplicity</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa431b859ed26f5a45e6ddc3448da1d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short int</type>
      <name>GetDimension</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae66fbb23621ae4f9e7937540d5072869</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetCoordinates</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad11003513310725bd54265ef5bf004c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt; &amp;</type>
      <name>GetSSSR</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0f6bce457ef6f963b8e4ba7c4be23775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt; &amp;</type>
      <name>GetLSSR</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a762b79fd52bbaf0f4444f0308654dab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AutomaticFormalCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a9f801729475d1d17415af6376458c81e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AutomaticPartialCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af2ee11d3efe6526c2eb352bb67684e6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>acfe3b729dc90c4c5e21684e3a60653af</anchor>
      <arglist>(const char *title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a667324c365d3b6f20d17221295c3a89e</anchor>
      <arglist>(std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFormula</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0a4b32a3135f26595bdd260539256c67</anchor>
      <arglist>(std::string molFormula)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnergy</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab78fa0a100d47ad2beb88c7cabb80e62</anchor>
      <arglist>(double energy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimension</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>adc2702cffcab0a0d6907958e3327284b</anchor>
      <arglist>(unsigned short int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTotalCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a58b360590ab212860dc26812ce38057d</anchor>
      <arglist>(int charge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTotalSpinMultiplicity</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a537e4f9fec95b76ae84e5e9c8eb7d192</anchor>
      <arglist>(unsigned int spinMultiplicity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInternalCoord</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a50a6320395d2466d277dc42f872c50f8</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt; int_coord)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAutomaticFormalCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a31e0990c833c415708b3fc515dbb35d5</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAutomaticPartialCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa8df95db3695e5e7ce263c484ce5533d</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAromaticPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aecd431b2cfaefa64d54c2dc4088551fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSSSRPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aba303a094727738eb901cafbecd7c196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLSSRPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a4641fea7bd6513949147bb7a53b6a7e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRingAtomsAndBondsPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0656401ba8b19bc9b9f2d3e8e833d3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtomTypesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa809ea95ee07e61c6dc00ae710d8a749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRingTypesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a08b5caf5aa6fc21e7b6fcd44e3d32f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChainsPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a537294f8e96a7ec5263a79de7454326e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChiralityPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a608e6f965afea1f4f64cb0f499a0cb27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPartialChargesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a00fd4c76a7513a9c8087d975f5d8a51b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHybridizationPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a4b93b72694e8a9a970eee7f0b65ecf9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImplicitValencePerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a9ecfb96410199c294c003f975d870832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetKekulePerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1e298bbe286ab2c5a6f3b086a07b1a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetClosureBondsPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7900736a9f73a041ab8bade19be84cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHydrogensAdded</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a47b63124c405f9c2ecdb766c6de9c56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCorrectedForPH</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af56db37c6a9f7049ed16469ab0a270c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAromaticCorrected</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6438e097839dbc98916fb00a3dc67305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpinMultiplicityAssigned</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a2c81eeba803bc59d6c40f97b0e0e17fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFlags</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab0922e1fa0939499c024e1006433adf3</anchor>
      <arglist>(int flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAromaticPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a88f39becfe74f62c9d0ffedfb4098b77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetSSSRPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a116f93a9700551794731bf71cd17345a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetRingTypesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7d0001f1af294a0d5676a70e12115b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetPartialChargesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0b8a9f6292b91ec5c4022a487e9d6092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImplicitValencePerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af673e91c4869ca8c1057f006d4f06dae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetHydrogensAdded</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac6df023071b8d662aa513a00579f076d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetFlag</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a401b99defa8a57195dc40a2604cee115</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindSSSR</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad4e3eab0d027bd8e503d02e7261ca477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindLSSR</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a39a5ee36b2320d9191dac24acf90b03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindRingAtomsAndBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae58b3f3da59d333ffa0d5b0f005f3526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindChiralCenters</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3368586a5a86bd9684f4b25ac53d2e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindChildren</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae12d082d7bc7adb2e9fd621adf27ccb6</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;children, int bgnIdx, int endIdx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindChildren</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1205b2669e02dbc289c65ab1f56110c1</anchor>
      <arglist>(std::vector&lt; OBAtom * &gt; &amp;children, OBAtom *bgn, OBAtom *end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindLargestFragment</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa797df5bf72cb5e220e13171dd9c7d4a</anchor>
      <arglist>(OBBitVec &amp;frag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ContigFragList</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af74913b3d793c41d1f005afdba11da35</anchor>
      <arglist>(std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Align</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a228de88f48ee3ca6a11554b74d82dedd</anchor>
      <arglist>(OBAtom *, OBAtom *, vector3 &amp;, vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConnectTheDots</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a31d05972f7454e791641c4a7d0071d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PerceiveBondOrders</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac749cfb04173f6f35ef64b1ac1d87178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindAngles</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>abee51ea4be988357bb17c4e5fd3d7e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindTorsions</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1ce9b09fb625faffaae648d7beae9598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetGTDVector</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac4260148aa21c7ada7d625bc0c6f2f7a</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetGIVector</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a94276831221d5693b3017da7fab3ccc8</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetGIDVector</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ade880e97f2bdf3c90e91375aec12aaf0</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Has2D</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afbf33662dacd733285409dfd85696457</anchor>
      <arglist>(bool Not3D=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Has3D</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a4aaa8b5151395ad66ecfe896ca8a0114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNonZeroCoords</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>abdda89a787d7ae0639d5127c2f6a4dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAromaticPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a783c51919c69da3287d51f34b2fa53a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSSSRPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aac2c45d000ac10ad770ec5e5eff97f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasLSSRPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3771eaf33a336f55348f80ca857a159f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasRingAtomsAndBondsPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0329d4256b426a4967afa867f415d06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAtomTypesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0ba2ebe76f1b15c48a8f1538efc8f9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasRingTypesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>adfe42a839d62e3d8f31ce3c28dc2e4e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasChiralityPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a39df67d7e225b9dd721b9b8c7df809ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasPartialChargesPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a87c2cd2043f749d5433a98df4ad8277d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasHybridizationPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a908e2d394d3a47cf821014899344ca37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasImplicitValencePerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7fe699ef7fee62ca46743d6aa78bdea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasKekulePerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aafddb1ded7f589afbdd56062368602db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasClosureBondsPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afb25b05d950ca109bf9c6333b906a9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasChainsPerceived</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac31a6af8f2b96fa35170523b6318c459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasHydrogensAdded</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aefc6e71556f0cd4afdd34e4a99d06025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAromaticCorrected</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab57a4b5dd9752e593e2fdb80f48909d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCorrectedForPH</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afc44b8ad27a62b9cfc670d4fd29bb52f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSpinMultiplicityAssigned</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a4a45f2c821b749250e070c3594289103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsChiral</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a63258442848bd8e29e0d5224e145ad83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a31d1053aee208079bcc3c5e1884774df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumConformers</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a37e5c0caf3b51ae81d8d3abc6ffb1a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConformers</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a95a50ee3e38bea8779b490626f65fc2e</anchor>
      <arglist>(std::vector&lt; double * &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7b80e7015d000221e0cc92fd3cf6f9e4</anchor>
      <arglist>(double *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae4c349e7e3920df72134c0c940318997</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af06dcff6ea883886d4d48bad4cc69156</anchor>
      <arglist>(double *c, int nconf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a21951fddd6c8a35b21769a1d08718581</anchor>
      <arglist>(int nconf)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aeae833c9dcc30e182f18554bd40242d6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnergies</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a22a1e9fe8d4ef1bebf8e9d9aa2cacc12</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;energies)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetEnergies</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa04bad1a38d0d3bff9930e332f460dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetEnergy</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a5ba177c97c9b16781c3e87833359730c</anchor>
      <arglist>(int ci)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>BeginConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a43bacf0671104e33b04835408b5c3785</anchor>
      <arglist>(std::vector&lt; double * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>NextConformer</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>abd4311945a4de0a47d2f036e9632a4b9</anchor>
      <arglist>(std::vector&lt; double * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double * &gt; &amp;</type>
      <name>GetConformers</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a5246a44bf82aa31c2f428665db94bfb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomIterator</type>
      <name>BeginAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae3b07b388e733d5a0e9ee9654a4411a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomIterator</type>
      <name>EndAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a81afb84c73fe3e57e8edd5a472e175f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBondIterator</type>
      <name>BeginBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac4ea48df79e239b506d3501dd42adde9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBondIterator</type>
      <name>EndBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a87859f951e8ea33345b76d93014486c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidueIterator</type>
      <name>BeginResidues</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a35e5693cfdc3b993440d29540ab0509d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidueIterator</type>
      <name>EndResidues</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a62b81baba8ee7151f0aae8fb01e90358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>BeginAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>abceac189ade32ef3a6c5f3d13fc38db4</anchor>
      <arglist>(OBAtomIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>NextAtom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac8ca499b39cdd5f4a2fc76e7d50deaa9</anchor>
      <arglist>(OBAtomIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>BeginBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad9d21c9b65678905c6d7d461160fcd9f</anchor>
      <arglist>(OBBondIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>NextBond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a133c681e9534e7255b1fae272c40a511</anchor>
      <arglist>(OBBondIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>BeginResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a49f6fa37f54e72323ae1b9597fdca02e</anchor>
      <arglist>(OBResidueIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>NextResidue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af3747253310ab328967a8bcaf32842d3</anchor>
      <arglist>(OBResidueIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBInternalCoord *</type>
      <name>BeginInternalCoord</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a67c061a9d850cf30b4bf5ea394760d43</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBInternalCoord *</type>
      <name>NextInternalCoord</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6680c695e3cdceb7e42a554a0ffc8a19</anchor>
      <arglist>(std::vector&lt; OBInternalCoord * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasFlag</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3a1dc0419a66d2e7288214342de43b7a</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFlag</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>adcdab8f96dc4fdc2940749e527087245</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>start_kekulize</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6d03ef3f811fa2c085694ccbf76051d4</anchor>
      <arglist>(std::vector&lt; OBAtom * &gt; &amp;cycle, std::vector&lt; int &gt; &amp;electron)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>expand_kekulize</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6be250d574bdbcae500c9207cb0f2400</anchor>
      <arglist>(int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>has_no_leftover_electrons</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa8300dbbf33e0da417f98d846442e6b1</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;atomState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getorden</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af2e4cda76442b795b7e6f5d74dea0df8</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>expandcycle</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>af1afc15e37f48f63ea001277fef0e289</anchor>
      <arglist>(OBAtom *atom, OBBitVec &amp;avisit, const OBBitVec &amp;potAromBonds)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_flags</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aa4a61b1d913f2bee1e0ed5d9daf26549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_autoPartialCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac23878536c8da0ff97c0985627dd5646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_autoFormalCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae1c74119422bd6a52bb7c384b42dca4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_title</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1dda4ed41c70aef0a361682dd9b2b0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBAtom * &gt;</type>
      <name>_vatom</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad3bcdbfad8eedc0452fe543badd080d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBAtom * &gt;</type>
      <name>_atomIds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aba8a1b036f4544f328db00b0939cbaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBBond * &gt;</type>
      <name>_vbond</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3c7208419c7703e947e9a1c365838b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBBond * &gt;</type>
      <name>_bondIds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad07702b91130d560479a679ae1a536d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short int</type>
      <name>_dimension</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a601fbf5c8e5b7d92281dbe6a124d7f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_totalCharge</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>aaaeee07c1d80b2638b8b9ace0095c9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_totalSpin</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7a92cb97f8aa52f145b2e928cf480a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_c</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a706bc4f751bf06cf864893451a7d21e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double * &gt;</type>
      <name>_vconf</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6fb1d704dcaeb179720ac771745850b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_energy</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad93165c379393f8eb17506f1f9820a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_natoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a370c739afb1e8ed20a96680ec9f1b219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_nbonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a35a920486c1a28ca09de0eeb9dbb174c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBResidue * &gt;</type>
      <name>_residue</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae1c29d0efe6187e8726962008c81e956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBInternalCoord * &gt;</type>
      <name>_internals</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6c2a9726c57abf03a40339776f5d9a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short int</type>
      <name>_mod</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a5db8eb0124fad1bf66ddaf930b4840f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BeginModify</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1b5760b4c75b7631fffb54f84140b3e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EndModify</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac32ffc23db124156a953e8e5cb923ccd</anchor>
      <arglist>(bool nukePerceivedData=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetMod</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ac5103c8b3cbe4f961bd353209bf2860e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementMod</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>adc36b31f851665247f3c576cdd7aa0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DecrementMod</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a8efda275b959c94452e1ded1f568c934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6b78f4cdf91366de39994ade8edc9775</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *pOptions, OBConversion *pConv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RenumberAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>afa417798ba7c13bf75a7ab04f2803cdb</anchor>
      <arglist>(std::vector&lt; OBAtom * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RenumberAtoms</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1a93cc61677782c2b8800a12c6af5675</anchor>
      <arglist>(std::vector&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoordinates</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a10c76fe88720e6ca2e17865b847edbf7</anchor>
      <arglist>(double *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToInertialFrame</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a751725f02bf62696515d79608198cd59</anchor>
      <arglist>(int conf, double *rmat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ToInertialFrame</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a8122f52665d60a1e5e56578561bd36b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a6ac0385e87d0a56901913e5f8049e45f</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>adad8d93db1fadf354b6f51687335fcb9</anchor>
      <arglist>(const vector3 &amp;v, int conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ae330819c26c418de3a2c995fd191807b</anchor>
      <arglist>(const double u[3][3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a3494940b2239a5f427061d2902573efd</anchor>
      <arglist>(const double m[9])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7a6cf5e812be471e72ecac3ee5d0bc46</anchor>
      <arglist>(const double m[9], int nconf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Center</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab9f6ba6fae7e12d0f61f5fd8e746aaf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Kekulize</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a457c69b9a377efcbdb9e8be871f17fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PerceiveKekuleBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1e9f06170626de367fba48ebbacd6f0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewPerceiveKekuleBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab74a82552a9576514b189e2a265d5f5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteHydrogens</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a4e2ddc39752d20fabcda1afc1cc4e8e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteHydrogens</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ace02501ed235e4e6c37dca0585bb46bf</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteNonPolarHydrogens</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a2993ead33ec2a4b15dd536d798ff844d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteHydrogen</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a925b41d42ddf14c12b675d32bdf5e948</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddHydrogens</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad3bab31bf64ff6cb18f6ee259b3b8c11</anchor>
      <arglist>(bool polaronly=false, bool correctForPH=false, double pH=7.4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddHydrogens</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1befb9ee43954207d09e3229e4b5753b</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddPolarHydrogens</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a9c3e3f1fa320501c56cb2b7fe4d6be34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StripSalts</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a89743304090380b06c920530f919a2fe</anchor>
      <arglist>(int threshold=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBMol &gt;</type>
      <name>Separate</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a1e5c6955a32c0ec2317a8de12ab7ba5a</anchor>
      <arglist>(int StartIndex=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetNextFragment</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad711b0ce04370b50be246e7b859d1f99</anchor>
      <arglist>(OpenBabel::OBMolAtomDFSIter &amp;iter, OBMol &amp;newMol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ConvertDativeBonds</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>acba192e5cf0db39c2ed6af7ba05328dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CorrectForPH</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a7af037d80801b43ae5450bd74004d669</anchor>
      <arglist>(double pH=7.4)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AssignSpinMultiplicity</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ad85ec95d1f909843737b67d70638f3c9</anchor>
      <arglist>(bool NoImplicitH=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIsPatternStructure</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a0f0310aa379033994230e29e206106c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>Center</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a9e896374801d7ea5f8986ecb2b54d65b</anchor>
      <arglist>(int nconf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorsion</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>a501e76993e9deb8ec8ab24c464d4ed3c</anchor>
      <arglist>(OBAtom *, OBAtom *, OBAtom *, OBAtom *, double ang)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBMol.html</anchorfile>
      <anchor>ab72bba66cc9e40fb3b657a30d87bbe6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::GasteigerState</name>
    <filename>classOpenBabel_1_1GasteigerState.html</filename>
    <member kind="function">
      <type></type>
      <name>GasteigerState</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a60b11e6617eb4f3091f6c4626f054075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GasteigerState</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a20e17f321802698d7924b26f2ceecc4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValues</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a91bb03a649336aa118717590b06aa5ec</anchor>
      <arglist>(double _a, double _b, double _c, double _q)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a1031d0e0a97a340abfe0a6ab9e831045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a1510a66dacf9cf3586de5fc89ae2a073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a2c09e929a6ea340fc9653cca414b11d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>denom</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a2e18cad6f97f574a912e1e0dd9605b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>chi</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a4533e916f6926d4cafa49a1ac7d4e135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>q</name>
      <anchorfile>classOpenBabel_1_1GasteigerState.html</anchorfile>
      <anchor>a5b5e3f03e443adea974601f295136638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBGastChrg</name>
    <filename>classOpenBabel_1_1OBGastChrg.html</filename>
    <member kind="function">
      <type></type>
      <name>OBGastChrg</name>
      <anchorfile>classOpenBabel_1_1OBGastChrg.html</anchorfile>
      <anchor>a3785fbca15136afe6a49183f5527cec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBGastChrg</name>
      <anchorfile>classOpenBabel_1_1OBGastChrg.html</anchorfile>
      <anchor>a81577cba5b71e178152746a5a27ac8c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AssignPartialCharges</name>
      <anchorfile>classOpenBabel_1_1OBGastChrg.html</anchorfile>
      <anchor>a1c145997cdde372b0d870cabc0aede0a</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GSVResize</name>
      <anchorfile>classOpenBabel_1_1OBGastChrg.html</anchorfile>
      <anchor>a0c4cfd03f0e9db29bf4266da4329eb98</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBConversion</name>
    <filename>classOpenBabel_1_1OBConversion.html</filename>
    <member kind="function">
      <type>void</type>
      <name>CopyOptions</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6af42ed37c470cee546f3aa160a363d4</anchor>
      <arglist>(OBConversion *pSourceConv, Option_type typ=ALL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBConversion</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac46f926abe7b8ed87ca8ddc10a52f399</anchor>
      <arglist>(std::istream *is=NULL, std::ostream *os=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBConversion</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aac6d4dac3d091cccc13add23ad9d3b80</anchor>
      <arglist>(const OBConversion &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBConversion</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a53f0f89f5ba43fd528c645fdaad6ac3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::istream *</type>
      <name>GetInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a5905ca0af771ee5a83ebd496f02e8ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>GetOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a751641ec702413ddf9fb86e24fe6da80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>abe2cafdff8bf62ae36fbbfca3eb836bf</anchor>
      <arglist>(std::istream *pIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7520c6b17b3cf9c506738794baab99b1</anchor>
      <arglist>(std::ostream *pOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInAndOutFormats</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4c751472f8bdb864b85cce430d42cc55</anchor>
      <arglist>(const char *inID, const char *outID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInAndOutFormats</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acfab2829e6d00f79be0de3124fbbb157</anchor>
      <arglist>(OBFormat *pIn, OBFormat *pOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a58e81dd6fcba14828db82a9782e5cff9</anchor>
      <arglist>(const char *inID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a507df3dbfec4b9201387e70ef71fe8de</anchor>
      <arglist>(OBFormat *pIn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a83e966b4442ea826a28b2cd55206e195</anchor>
      <arglist>(const char *outID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ae5b218e7427f7806d69356986e296160</anchor>
      <arglist>(OBFormat *pOut)</arglist>
    </member>
    <member kind="function">
      <type>OBFormat *</type>
      <name>GetInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aed42a5004f6ba5522bb59ce13467a951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBFormat *</type>
      <name>GetOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>afd4dc6481ea2d1d95e2cd04b1643fb8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetInFilename</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7f988979d62a5d63e85a294d826e1c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::streampos</type>
      <name>GetInPos</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab54ab5100f5418bc0ba174da74b72d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetInLen</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acc7cbe1da68663d0d507de6da778d3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6bb30b86d787d86839e457c1ce1f569b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBConversion *</type>
      <name>GetAuxConv</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a8e3fd39dd67cdd120890d37f0f196bda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAuxConv</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a53a1041e7803e63b9bca06ad18bea4fe</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetSupportedInputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a137c540357b45e73f65e602e1196eed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetSupportedOutputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a353b3a6a53808b22361c9f44713978e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Convert</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acc3cc99e2ff0113c9ca6a64f3de71300</anchor>
      <arglist>(std::istream *is, std::ostream *os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Convert</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a95c512f009bf277d9d6299d9f5d0c13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FullConvert</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9d12b0f7f38951d2d1065fc7ddae4229</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;FileList, std::string &amp;OutputFileName, std::vector&lt; std::string &gt; &amp;OutputFileList)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddChemObject</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a342df96ba3cd8751e19758939dbef2f5</anchor>
      <arglist>(OBBase *pOb)</arglist>
    </member>
    <member kind="function">
      <type>OBBase *</type>
      <name>GetChemObject</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a17bfbe7570517993bcfcb1916bd437d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLast</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a0cc38e7988805424c15d68f5444a2a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFirstInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>af5f16d80b577c580920f0c5b8abd5973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFirstInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab94b09151245e8c6accfc418a866d329</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetOutputIndex</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ad44eaf0b472408acb158334c8725d339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutputIndex</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7037cb9de4584f498b0099b7584bdc97</anchor>
      <arglist>(int indx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMoreFilesToCome</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a38d59749ba2add8597210717e804e4db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOneObjectOnly</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4dacf92f4f0cbf7a1f269143659ceb88</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLast</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a19dedcd05ee3ab11ed85c29ff1fef810</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLastFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac157f0eb86dba757b3ebae08ffffb8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCount</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aea550de4e59eeb0d4ccf450608a3c915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>RegisterFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a20a0d20f46d3b003d99d1f5822c2037d</anchor>
      <arglist>(const char *ID, OBFormat *pFormat, const char *MIME=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FindFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a8b0f5849719757fa2e79289e4dc486b5</anchor>
      <arglist>(const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FindFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a44ef357c6e36a5e510feb0b0ce20f5f0</anchor>
      <arglist>(const std::string ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromExt</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3f85a8c30f5c913e08225f85c6bc020b</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromExt</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1e4d4ce20eb43effa105dc25b95050ef</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromMIME</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aca0c09ee719aba9da34cb281aa0db6a5</anchor>
      <arglist>(const char *MIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetNextFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>af0bee894a9ed7ca61637452dc2e264f2</anchor>
      <arglist>(Formatpos &amp;itr, const char *&amp;str, OBFormat *&amp;pFormat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a26b5cfc6a9011d19d78dae56d31296eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>OPAMapType</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9df37d33062bde3400dd034ee7feaa92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FilteringInputStreambuf&lt; LineEndingExtractor &gt;</type>
      <name>LErdbuf</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9afd81920e33981863bf186f78a222d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SetStartAndEnd</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a631730a938bc2219b90c027932db3443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OpenAndSetFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a23aaa3e3be1f55323cd956b53f6b0417</anchor>
      <arglist>(bool SetFormat, std::ifstream *is, std::stringstream *ss=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OPAMapType &amp;</type>
      <name>OptionParamArray</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3b2ad8335b0a9b18bc22bc534b7ffb28</anchor>
      <arglist>(Option_type typ)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>LoadFormatFiles</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acb5fa3f38f036bd82ba49a44d6b7a998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>InFilename</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a20354c0458b4e08dc62db4a4e8717c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::istream *</type>
      <name>pInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab965c6baeb6893dd15a2fefefce795df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>pOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aefeab37b3ca85a70cef740bb1636b353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBFormat *</type>
      <name>pInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a70c004d49155986bcc163bac07df0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBFormat *</type>
      <name>pOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4d630735f21540de237cdcc32916bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>OptionsArray</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3d9e064f9e26ed2e52b140b7cc34a8d6</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a075e1e3c9dd399cef584d7338cc37938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>StartNumber</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac52d6fdbe254370662cccd43af0248f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>EndNumber</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>adb31d46cbf6e64e86bae6d24d90c9702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Count</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aad462966ed963f892117056de1eba502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsFirstInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ae14ad56a72461f3c598cb4dbd151cdc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsLast</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6025251d18641dab4058222b69d1a98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>MoreFilesToCome</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab4ec386870233b42d353a4d66d7b0cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>OneObjectOnly</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7002deaca76f3fc235c76be1fcc38dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReadyToInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9bdd5c815677e240cec9c2e4a71d73f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>CheckedForGzip</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ae0c8e3d58dc0c0d9713ca7a7d27b8c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>NeedToFreeInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a778a4d8f719010ac4adf6af2363af0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>NeedToFreeOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a96fc7fb023ad66073434a206829c23bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LErdbuf *</type>
      <name>pLineEndBuf</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab3b665dec523e9a63f1dc954900211ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBBase *</type>
      <name>pOb1</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a20a1d62cb932144d66e52d7c823fb0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::streampos</type>
      <name>wInpos</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab77068f3bb4cb88694a6be653c00f04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::streampos</type>
      <name>rInpos</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a545a1341008a23c2dd0721c164a9ad89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>wInlen</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>afee7e5bffccd262faaff0417e5ae9af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>rInlen</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1a897c3f35235e4ca7da37ca245db065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBConversion *</type>
      <name>pAuxConv</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3846aa2ce719d5820b66e302c6aeaa8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>SupportedInputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a2322eb2aa14e8d954573abbda9c50e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>SupportedOutputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a50233a5c7c63d03056923f13c7acbb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static OBFormat *</type>
      <name>pDefaultFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a2daf6d1435032c73c65000af61a4a5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>FormatFilesLoaded</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a501b1ec0c0e4fe9e78398e3837a759ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Option_type</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INOPTIONS</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116a291d3d898fa3e1258eef693d56d600d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTOPTIONS</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENOPTIONS</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116acfa24b0443c8420ac7fdf5eb009352b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116ab1d5eac4b1dca480c8056eaea7663b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>IsOption</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab3d2674da23d09868ffedf551abbce0c</anchor>
      <arglist>(const char *opt, Option_type opttyp=OUTOPTIONS)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::string &gt; *</type>
      <name>GetOptions</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7da66ef30fd0af867e9d3bd0df15f4a2</anchor>
      <arglist>(Option_type opttyp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddOption</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a8ad01448cb4d5237ed5f3d8eeaf39804</anchor>
      <arglist>(const char *opt, Option_type opttyp=OUTOPTIONS, const char *txt=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RemoveOption</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a82f1d6a21880f898673f8a1b45d15eee</anchor>
      <arglist>(const char *opt, Option_type optype)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOptions</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac07772684eade5d0d11b8979f0772cf5</anchor>
      <arglist>(const char *options, Option_type opttyp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterOptionParam</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6a45eddab233711eb4e432ed5657358f</anchor>
      <arglist>(std::string name, OBFormat *pFormat, int numberParams=0, Option_type typ=OUTOPTIONS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetOptionParams</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1042e860531f4961b3b0245e9a92f4a7</anchor>
      <arglist>(std::string name, Option_type typ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Write</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3d46d682999a7772db31a835fa4a8091</anchor>
      <arglist>(OBBase *pOb, std::ostream *pout=NULL)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>WriteString</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a18ce8681792d689dab8172a511c5a996</anchor>
      <arglist>(OBBase *pOb, bool trimWhitespace=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ad17f0a96643dec6840eda76c07a54698</anchor>
      <arglist>(OBBase *pOb, std::string filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseOutFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acbe5bd25f0afb1c8cd622e41e61ebc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Read</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1204f9b613067a04ebfe881a58775918</anchor>
      <arglist>(OBBase *pOb, std::istream *pin=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadString</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a93558e9c89cda2e1a4f9fb2cadc5c8d1</anchor>
      <arglist>(OBBase *pOb, std::string input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a76d7d1bf8e0c05c19d5b5e991fd0ba2f</anchor>
      <arglist>(OBBase *pOb, std::string filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OpenInAndOutFiles</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7424c6fe9292f59087d23e7748ac237e</anchor>
      <arglist>(std::string infilepath, std::string outfilepath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReportNumberConverted</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1717ba1ed3f8131d7a0f3b0d6031f5af</anchor>
      <arglist>(int count, OBFormat *pFormat=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumInputObjects</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aea0a1d956ad2f87302924423930c793b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>GetDefaultFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a442b17995d84d654e33ede11a63d7f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>BatchFileName</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4eb6eac5855fb3289c5a438d4084a052</anchor>
      <arglist>(std::string &amp;BaseName, std::string &amp;InFile)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>IncrementedFileName</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a44fbee02afc6de6a9f98bbbb6a2e12bf</anchor>
      <arglist>(std::string &amp;BaseName, const int Count)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>CheckForUnintendedBatch</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a39b6cebdf53672368cfa3edd8bc7740d</anchor>
      <arglist>(const std::string &amp;infile, const std::string &amp;outfile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InstallStreamFilter</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3222302075fbfcfe842ebd0b984a4406</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBError</name>
    <filename>classOpenBabel_1_1OBError.html</filename>
    <member kind="function">
      <type></type>
      <name>OBError</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a42ed7327176739c31d2ad3d777e2fb01</anchor>
      <arglist>(const std::string &amp;method=&quot;&quot;, const std::string &amp;errorMsg=&quot;&quot;, const std::string &amp;explanation=&quot;&quot;, const std::string &amp;possibleCause=&quot;&quot;, const std::string &amp;suggestedRemedy=&quot;&quot;, const obMessageLevel=obDebug)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a58895ce0cba9231c40070623841e2cf6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMethod</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>ae83765d3b6cb73748b93accfacfa04ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetError</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a8dd97637a04d25f1f1ebe3ecd0fa94c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetExplanation</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a62dab1c2b6974eb6984a1c464e3a85c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetPossibleCause</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>ab559c02256338e44ad62ddcf21b00cc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSuggestedRemedy</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a2663dcd1c88b8e71a3460abbff5830e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>obMessageLevel</type>
      <name>GetLevel</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a7d29f141e4eb1eddddf66925372b6379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>af49cd68ba417554f4aebc773b4decfa9</anchor>
      <arglist>(const OBError &amp;) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_method</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>ab76b110ce78dbf832f2be94de64d4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_errorMsg</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>ae555e3ad2f9ba1a05c02c8e728da3e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_explanation</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a51f6cb8ac4c800345ad82cf63df0f9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_possibleCause</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a89443235c00d3d81208c0e339adbf6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_suggestedRemedy</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>aa04ab009d8cdab368735f2bdf66f8a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>obMessageLevel</type>
      <name>_level</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a20898b53aeee396c51fb24d5fad05df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOpenBabel_1_1OBError.html</anchorfile>
      <anchor>a79f2d96335566944848c00c7749286f6</anchor>
      <arglist>(std::ostream &amp;os, const OBError &amp;er)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMessageHandler</name>
    <filename>classOpenBabel_1_1OBMessageHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMessageHandler</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a5cce70bc2fc932b31d3f31bda5900414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMessageHandler</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a4cc3bdf8e84224428a5bde1179b8cc60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a2482566201934523c4631d85b1214a70</anchor>
      <arglist>(OBError err, errorQualifier qqualifier=always)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowError</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a40f9d382b5453a4cbf744c9be7f98ab2</anchor>
      <arglist>(const std::string &amp;method, const std::string &amp;errorMsg, obMessageLevel level=obDebug, errorQualifier qualifier=always)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetMessagesOfLevel</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>aaacf3302e7348bab13284a1336040240</anchor>
      <arglist>(const obMessageLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartLogging</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a2ddeff91a6a4f113be67243d32aae4f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StopLogging</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a08d309e66bc4091df861de396b6dd4a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxLogEntries</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a77f52cdbd233a78a86a17fdbc5b1aeba</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetMaxLogEntries</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>ad5cc775d9bcbe374ba8e3a7706441187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearLog</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>af69ea3bc45568000475c11f584bd6506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutputLevel</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>ae467fbd6fca625ae5ee0ea066810280f</anchor>
      <arglist>(const obMessageLevel level)</arglist>
    </member>
    <member kind="function">
      <type>obMessageLevel</type>
      <name>GetOutputLevel</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a3e6a1f72967b7b5e99d6a25cdde2fe34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutputStream</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a8d5a7033d340808ae4eb4602a6f638de</anchor>
      <arglist>(std::ostream *os)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>GetOutputStream</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>afa3e05fe5fa00cc48db4a2b5b5f3ba95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StartErrorWrap</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>ab7822d9b9f26fac754fa79efab0dfcaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StopErrorWrap</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>ac846e5a1ffd589891812b87e129b1a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetErrorMessageCount</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a43dbb5cf7a6a8e51944720b532ebf0a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetWarningMessageCount</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>ad8c74030fe5436581bebd5c42af17bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetInfoMessageCount</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a00c4e7133ee9e7290c0002445789c1c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetAuditMessageCount</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a48866a67a47b80b0d0c6adf5267e72eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDebugMessageCount</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a673ec0e1a1c14ca7117e07a90efcd8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMessageSummary</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>ab58fc0b88f40b7dca684dfad13d587b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_messageCount</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a5812cd4eb01367908022f9ef86e49ec6</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; OBError &gt;</type>
      <name>_messageList</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a08ea2212aebb85ea22895ec49bd81f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>obMessageLevel</type>
      <name>_outputLevel</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>abddad1d062682a33800f8d048a1e35f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>_outputStream</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>adff5b7b50cde9f6620dc08128df860c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_logging</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a3c4c6fad78b988cdc4fc9b7ade5e788c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_maxEntries</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a7a0d2d55c1de9a5afc3bf71abedfdddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::streambuf *</type>
      <name>_inWrapStreamBuf</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a3e0837dfabcca64b1bdf2392e70b3228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::streambuf *</type>
      <name>_filterStreamBuf</name>
      <anchorfile>classOpenBabel_1_1OBMessageHandler.html</anchorfile>
      <anchor>a9285cdb5ae08c9a33cd6d6998cd69a26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::obLogBuf</name>
    <filename>classOpenBabel_1_1obLogBuf.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~obLogBuf</name>
      <anchorfile>classOpenBabel_1_1obLogBuf.html</anchorfile>
      <anchor>ad22e8f4b05ebff4d7292436b23c62666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>sync</name>
      <anchorfile>classOpenBabel_1_1obLogBuf.html</anchorfile>
      <anchor>a553fc1343cc7a747775864d1d124a5d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolAtomIter</name>
    <filename>classOpenBabel_1_1OBMolAtomIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a0e0a0033461ca2e8bd7d3553613acb68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>aea06b6f6c208a5a2f16a8f25889486a4</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a8553b424677bb20b61daf22de980a8d8</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a5dea72ddb25d80fd94c46bc37325cc7e</anchor>
      <arglist>(const OBMolAtomIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>ab41faac5de2b33826f98ef32e67d99fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a858cff97034f705300649f2d3b54e4b2</anchor>
      <arglist>(const OBMolAtomIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>af79b3e678a637489cf89af2bb5ad22c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a580aa90f2d222d16035a1548a15241c2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a4230379a2279d9f0311112181bdd0257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomIter.html</anchorfile>
      <anchor>a8cd672d91a1ef3171799bf9ea27e2409</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolAtomDFSIter</name>
    <filename>classOpenBabel_1_1OBMolAtomDFSIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolAtomDFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a28577ca5de6b95b9ac0d4210be8d9fde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomDFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a30e32a5f76406721c6e04f431e2d46bc</anchor>
      <arglist>(OBMol *mol, int StartIndex=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomDFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a4b1f4d5e9039910fb796b805d60c8a92</anchor>
      <arglist>(OBMol &amp;mol, int StartIndex=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomDFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>aa73985a70f852dcba0febd7abd6dcc3b</anchor>
      <arglist>(const OBMolAtomDFSIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolAtomDFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a6d1833f8401794abf419e65503bb4fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomDFSIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a45daedafd05277223bcd61fca62ccb86</anchor>
      <arglist>(const OBMolAtomDFSIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomDFSIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>aaf97dbc49b4f8743f21874c99257de73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomDFSIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a037f2d45c5f2bccc0a81a5be6bea4c7c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a4230379a2279d9f0311112181bdd0257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>a8cd672d91a1ef3171799bf9ea27e2409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>next</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomDFSIter.html</anchorfile>
      <anchor>aaaffd1bb24cbcff3418b09c755f2b5bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolAtomBFSIter</name>
    <filename>classOpenBabel_1_1OBMolAtomBFSIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolAtomBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a1afe0a6b964c9975a5eab78a4fe6012f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>ac46bde575f155b4c67ec277d7659a847</anchor>
      <arglist>(OBMol *mol, int StartIndex=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a5b81d087faf530b6bbff4957fad6e86e</anchor>
      <arglist>(OBMol &amp;mol, int StartIndex=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAtomBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a8d3e50b8c5f89a244f0f2835dabd598e</anchor>
      <arglist>(const OBMolAtomBFSIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolAtomBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a0ed2011d285caf87692d837c05b3ab37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomBFSIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a23d45274da2a0155e8d9835c745cb6de</anchor>
      <arglist>(const OBMolAtomBFSIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomBFSIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>aa2197b65eb45814b73aac6f4f061e436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAtomBFSIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>adafdafb290855c8dd10378dbc23f5003</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a4230379a2279d9f0311112181bdd0257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>a8cd672d91a1ef3171799bf9ea27e2409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CurrentDepth</name>
      <anchorfile>classOpenBabel_1_1OBMolAtomBFSIter.html</anchorfile>
      <anchor>ae259c581e29bfc30fe551b6d54b1a0b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolBondBFSIter</name>
    <filename>classOpenBabel_1_1OBMolBondBFSIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolBondBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>a6b7e76f2e1633a6575727328f3b4fa26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolBondBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>a544b96c830c7d3937db8419bc2752d5c</anchor>
      <arglist>(OBMol *mol, int StartIndex=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolBondBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>a5279e7db37832ffda2caa1e6552a978e</anchor>
      <arglist>(OBMol &amp;mol, int StartIndex=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolBondBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>aa3248f3619ab1d8bcc93225aa8eced69</anchor>
      <arglist>(const OBMolBondBFSIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolBondBFSIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>ad2f55c3e4c0ddd03a44f2ad8a4b24e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolBondBFSIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>a626b82281bf33099d61076c09cc7efb6</anchor>
      <arglist>(const OBMolBondBFSIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolBondBFSIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>ae46f47b39f927e4c408fc9d4f00e83b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolBondBFSIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>a2015373cb6b0dcbf051daf7ddc38884b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>a3f8f5f0e7c6e7c69467b815de9082a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBond &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>aadede7839311add35bf5710a3031f13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CurrentDepth</name>
      <anchorfile>classOpenBabel_1_1OBMolBondBFSIter.html</anchorfile>
      <anchor>ae259c581e29bfc30fe551b6d54b1a0b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolBondIter</name>
    <filename>classOpenBabel_1_1OBMolBondIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolBondIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>a455059ecfe54c9a0c32e8456aa848569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolBondIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>a05b5a8858b706d1046f933c51daa8727</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolBondIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>ae814890578f0e8951a5ba1c734d7d5a2</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolBondIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>ae21ad5f1f7fbd04f72693d116ab25ce3</anchor>
      <arglist>(const OBMolBondIter &amp;bi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolBondIter</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>a6ab51a3738ec0fa144ed6b3e49545cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolBondIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>a35cb4c77558cb50d54883f5af4968c3d</anchor>
      <arglist>(const OBMolBondIter &amp;bi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolBondIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>ad17af958901317fceb246b53b90a376d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolBondIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>ad09a4b6c7a2e51c277f52bd486ed73da</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>a3f8f5f0e7c6e7c69467b815de9082a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBond &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolBondIter.html</anchorfile>
      <anchor>aadede7839311add35bf5710a3031f13d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAtomAtomIter</name>
    <filename>classOpenBabel_1_1OBAtomAtomIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBAtomAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>af8a4eb72f4e027a2f7d2649b01b847f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtomAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>a9001f5dde4cd8a725f4cbbf1b3e0a6a6</anchor>
      <arglist>(OBAtom *atm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtomAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>acbe793562d040011f3b9614043b91b28</anchor>
      <arglist>(OBAtom &amp;atm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtomAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>acbafa4b74965993f492cf5673b3e39e1</anchor>
      <arglist>(const OBAtomAtomIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBAtomAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>ae08b3633f489a115c0708df48a086337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomAtomIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>a00796444d36ff096663132f62df5b483</anchor>
      <arglist>(const OBAtomAtomIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtomAtomIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>a9a63e08a6e01bb6e4c5588fc38909e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomAtomIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>af63cddf5d1c62789ea2da95dad37093f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>a4230379a2279d9f0311112181bdd0257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBAtomAtomIter.html</anchorfile>
      <anchor>a8cd672d91a1ef3171799bf9ea27e2409</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAtomBondIter</name>
    <filename>classOpenBabel_1_1OBAtomBondIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBAtomBondIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>af28bfccc1ea71cb3c90d4131fd0ffaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtomBondIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>a1e72a6b50b1b53a7d3c4b96ea26bd76a</anchor>
      <arglist>(OBAtom *atm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtomBondIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>acb90927a24929dc3a21354889e70c374</anchor>
      <arglist>(OBAtom &amp;atm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAtomBondIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>ace16cb67903f2c62d22b4cfd998e465d</anchor>
      <arglist>(const OBAtomBondIter &amp;bi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBAtomBondIter</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>a8049d0d3287127c18a69a03a0ada3389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomBondIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>a85af07ceacfd66f0ca03ae29002f5141</anchor>
      <arglist>(const OBAtomBondIter &amp;bi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtomBondIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>ad5bb33e493787775e92d38f36da65a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomBondIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>aa8d9ebb722fef1050db8537615f038ed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>a3f8f5f0e7c6e7c69467b815de9082a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBond &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBAtomBondIter.html</anchorfile>
      <anchor>aadede7839311add35bf5710a3031f13d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBResidueIter</name>
    <filename>classOpenBabel_1_1OBResidueIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBResidueIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a222f27c41a5414c4fb612d260c21a5fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidueIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a0801e9aa4fb67ccecfb66998108bf2c1</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidueIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>af7e8bb1dd715e2aca43ab0c59229a755</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidueIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a5cf308d7c72dfe7da5fe91dc2bc69650</anchor>
      <arglist>(const OBResidueIter &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBResidueIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>af01b06a6ef42d96b03e8026780e87365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidueIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a4f46d1328c26bdd0b4ef3bf1158367db</anchor>
      <arglist>(const OBResidueIter &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBResidueIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>ae34efedb2d6054469da00761bbb73e16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidueIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a827c7d04dab8bc4533c411f0caf5620f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBResidue *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a059d24fee2eccec2e30b9502ded937fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBResidue &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBResidueIter.html</anchorfile>
      <anchor>a833179fe8d90821086f13903fb00467a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBResidueAtomIter</name>
    <filename>classOpenBabel_1_1OBResidueAtomIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBResidueAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>a248fb7bc3b3279d171bfa2d1bf9eeb41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidueAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>a27b9cf901546b39c88b93e73b4574479</anchor>
      <arglist>(OBResidue *res)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidueAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>aa489ba5d962f95dac6613106e05eecac</anchor>
      <arglist>(OBResidue &amp;res)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidueAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>ad4a7d2ddf874b195795ffc46ef40203d</anchor>
      <arglist>(const OBResidueAtomIter &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBResidueAtomIter</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>a2a89fef9e1122bf74748b6312c9852dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidueAtomIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>a02174771b3a8c84866ba69afe96739dd</anchor>
      <arglist>(const OBResidueAtomIter &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBResidueAtomIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>add4575e56919bdb15840087bc98b74d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBResidueAtomIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>ada5c48d5cec37d64a057dd089679942c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>a4230379a2279d9f0311112181bdd0257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBAtom &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBResidueAtomIter.html</anchorfile>
      <anchor>a8cd672d91a1ef3171799bf9ea27e2409</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolAngleIter</name>
    <filename>classOpenBabel_1_1OBMolAngleIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolAngleIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>a482e4131f901dd1ec3c1d6305b1df9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAngleIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>a48b73b591ecad6e541b5ceedb6618715</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAngleIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>aca2fc700c6c1c60ea2632839b5cae687</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolAngleIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>a0de0326290e35dd6eeaada3eebed60c0</anchor>
      <arglist>(const OBMolAngleIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolAngleIter</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>a917fefa24816b0e6bca7497496cdb918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolAngleIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>ac632e9d1015ae2999d77a0d3cc7ed373</anchor>
      <arglist>(const OBMolAngleIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolAngleIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>aeb764746ed97bde2d79184c4ddcd3f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolAngleIter.html</anchorfile>
      <anchor>a67b12e17cbb37010d7aa2e7a6f292fc7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolTorsionIter</name>
    <filename>classOpenBabel_1_1OBMolTorsionIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolTorsionIter</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>a2e6d7ebd2d9d520ecd18112ac456da81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolTorsionIter</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>a7746689f376b4b9f2fc6a103dc101d38</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolTorsionIter</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>ae49384dc364bf0db20455594dc724632</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolTorsionIter</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>a4d4fd84c94dc51bf6926bbebb4a79cda</anchor>
      <arglist>(const OBMolTorsionIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolTorsionIter</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>ac739d51704add695fff280e299ea91d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolTorsionIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>a15a5fd5b5d98407096d13ac374629367</anchor>
      <arglist>(const OBMolTorsionIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolTorsionIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>ac5093a6bba24c730cf80dd02c6d083db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolTorsionIter.html</anchorfile>
      <anchor>a67b12e17cbb37010d7aa2e7a6f292fc7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolPairIter</name>
    <filename>classOpenBabel_1_1OBMolPairIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolPairIter</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>aa604593cfb41d4c23618d71b4b26ea6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolPairIter</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>a19ad5800c1b20981621429c4c16a845e</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolPairIter</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>ad7816d7465e4c7dcffbe753e2db09ab5</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolPairIter</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>a4e69078c84a82b223974ba6a5e5e5e28</anchor>
      <arglist>(const OBMolPairIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolPairIter</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>adaa9e198d76f5f97560146d1673205b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolPairIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>a9f3a3287b8ca1ebfe8a140bd30d1749b</anchor>
      <arglist>(const OBMolPairIter &amp;ai)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolPairIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>a82f19c09f49162a5d747e6d302f2bd74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolPairIter.html</anchorfile>
      <anchor>a67b12e17cbb37010d7aa2e7a6f292fc7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMolRingIter</name>
    <filename>classOpenBabel_1_1OBMolRingIter.html</filename>
    <member kind="function">
      <type></type>
      <name>OBMolRingIter</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a4201ae784613cc343f4c85aff073f8b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolRingIter</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a15547553c4072355819acbcf350dde77</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolRingIter</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a22b44f56d902ee546801e1ed709177a7</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMolRingIter</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a5fbba8ac448491d75c01dc700ab9abbb</anchor>
      <arglist>(const OBMolRingIter &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBMolRingIter</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a1d382621222fab3106bbf62d88d12c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolRingIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>aa55f07012153c6567722fd73b52c7ae8</anchor>
      <arglist>(const OBMolRingIter &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>aa385aa18f5e42db5a415c25a90f4193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMolRingIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a468d7175593dfa1d0bf6b21d17102611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBMolRingIter</type>
      <name>operator++</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a844ba4085c67152f80a56529ff358a46</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OBRing *</type>
      <name>operator-&gt;</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a9557a79ffa8eabbacc3a30122de63719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBRing &amp;</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1OBMolRingIter.html</anchorfile>
      <anchor>a9b8a5740df429b13336d7a5466c6aa83</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBMoleculeFormat</name>
    <filename>classOpenBabel_1_1OBMoleculeFormat.html</filename>
    <base>OpenBabel::OBFormat</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, unsigned &gt;</type>
      <name>NameIndexType</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>ada7e9e6b9a0767b268cc282a91ff4185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBMoleculeFormat</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a73a3969d77031276422cbeb5901ea05a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadChemObject</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a9acd362b27e30c19a2c870ca71592723</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteChemObject</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a39c2aaf250dde6e85d05ff9357d8b003</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a54e576034bd51c66256aa6a98f81d644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1e309febfaef70cc3c8d98afc1540931</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a663171ec9788e2d1621d374848b3888b</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ab87525f269e7819d8462f450d30d56a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TargetClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1870e0d80a223ef4e1661be80029dbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>SpecificationURL</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1d3a8785a0ad0c85b98fa3406a64d50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetMIMEType</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0e10219d8aedefa78ef16fc7fded85ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>Flags</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a94a94537cc5ba96b1876db1b612b91a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SkipObjects</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1f0ee7ba19cc62b53a7ee06fa4f91509</anchor>
      <arglist>(int, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBFormat *</type>
      <name>MakeNewInstance</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0924b1a442d147fa036bff23a4cf04ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterFormat</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a47a434f63a789f142966304e35aa6952</anchor>
      <arglist>(const char *ID, const char *MIME=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ReadChemObjectImpl</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a2a5208bfd803385534526eea570bf6b0</anchor>
      <arglist>(OBConversion *pConv, OBFormat *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>WriteChemObjectImpl</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a9c04a77825af89227b6f83f19909d01d</anchor>
      <arglist>(OBConversion *pConv, OBFormat *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DoOutputOptions</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a5800be99903abff0efbad8937f492bc4</anchor>
      <arglist>(OBBase *pOb, OBConversion *pConv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ReadNameIndex</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a2881c699e6a370c350ca135f51797839</anchor>
      <arglist>(NameIndexType &amp;index, const std::string &amp;datafilename, OBFormat *pInFormat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromMIME</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>aca0c09ee719aba9da34cb281aa0db6a5</anchor>
      <arglist>(const char *MIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DeferMolOutput</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a486c6525ca5f6e49f4c9a3905805b9a9</anchor>
      <arglist>(OBMol *pmol, OBConversion *pConv, OBFormat *pF)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>OutputDeferredMols</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>aabcab4054392d585a1e3b2d108aead54</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DeleteDeferredMols</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>a0d49a0baf30d9e34b8b32f9d61e3043b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBMol *</type>
      <name>MakeCombinedMolecule</name>
      <anchorfile>classOpenBabel_1_1OBMoleculeFormat.html</anchorfile>
      <anchor>ae40f23c84fd00ee442effa0c543a43c3</anchor>
      <arglist>(OBMol *pFirst, OBMol *pSecond)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBStopwatch</name>
    <filename>classOpenBabel_1_1OBStopwatch.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classOpenBabel_1_1OBStopwatch.html</anchorfile>
      <anchor>a07aaf1227e4d645f15e0a964f54ef291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Lap</name>
      <anchorfile>classOpenBabel_1_1OBStopwatch.html</anchorfile>
      <anchor>a594d12c3e3c5ff7b9903a4bdc24ea1b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Elapsed</name>
      <anchorfile>classOpenBabel_1_1OBStopwatch.html</anchorfile>
      <anchor>a9e01ac3f5e0f092b6dffe54421ce9c33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSqrtTbl</name>
    <filename>classOpenBabel_1_1OBSqrtTbl.html</filename>
    <member kind="function">
      <type></type>
      <name>OBSqrtTbl</name>
      <anchorfile>classOpenBabel_1_1OBSqrtTbl.html</anchorfile>
      <anchor>af238629f406442e9c3e03aab5f92e5db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSqrtTbl</name>
      <anchorfile>classOpenBabel_1_1OBSqrtTbl.html</anchorfile>
      <anchor>a9184aa6879afeed8d2b2e9bdc9331fce</anchor>
      <arglist>(const double max, const double incr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBSqrtTbl</name>
      <anchorfile>classOpenBabel_1_1OBSqrtTbl.html</anchorfile>
      <anchor>ac88c1cb13c0f062f244660ed46baea4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sqrt</name>
      <anchorfile>classOpenBabel_1_1OBSqrtTbl.html</anchorfile>
      <anchor>ae6ef1b74d5b395dc9598d5d86b913a5c</anchor>
      <arglist>(double d2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBSqrtTbl.html</anchorfile>
      <anchor>a01dd1b037ecbe7bd8d23b50689fa6b50</anchor>
      <arglist>(double max, double incr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::triple</name>
    <filename>structOpenBabel_1_1triple.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>first_type</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>a2ff1057d713f47338b9b6c4a60e5ab87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>second_type</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>a75b41637f35c1f6bbf8ec5c0ebb79728</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T3</type>
      <name>third_type</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>a32442a804e500a7dc9ecb4a3feeb143d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triple</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>a87aa95191f543f716183080f7bfcbfd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triple</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>aa519d64ebe02cf77be9fce8401bbfc59</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b, const T3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triple</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>aad33c815591f3f00892a727ee9bec59b</anchor>
      <arglist>(const triple&lt; U, V, W &gt; &amp;t)</arglist>
    </member>
    <member kind="variable">
      <type>T1</type>
      <name>first</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>ae885a6822c40e26649c9dd8b476942f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T2</type>
      <name>second</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>a9a8a97f32d498c09c0f1f82c8a67bd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T3</type>
      <name>third</name>
      <anchorfile>structOpenBabel_1_1triple.html</anchorfile>
      <anchor>ab02b336e2ad870f773affd07b0f68ef8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::quad</name>
    <filename>structOpenBabel_1_1quad.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>T3</templarg>
    <templarg>T4</templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>first_type</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a2ff1057d713f47338b9b6c4a60e5ab87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>second_type</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a75b41637f35c1f6bbf8ec5c0ebb79728</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T3</type>
      <name>third_type</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a32442a804e500a7dc9ecb4a3feeb143d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T4</type>
      <name>fourth_type</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a003e496cf073cdc37c84c12aecee9605</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quad</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a2e71f961e39f3cad1898d5adee3ab328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quad</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>abfcbd8a7eb6b09894cba7994ef1a3eac</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b, const T3 &amp;c, const T4 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quad</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>ab42beb8e4a502204a0e67fc443414c58</anchor>
      <arglist>(const quad&lt; U, V, W, X &gt; &amp;q)</arglist>
    </member>
    <member kind="variable">
      <type>T1</type>
      <name>first</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>ae885a6822c40e26649c9dd8b476942f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T2</type>
      <name>second</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a9a8a97f32d498c09c0f1f82c8a67bd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T3</type>
      <name>third</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>ab02b336e2ad870f773affd07b0f68ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T4</type>
      <name>fourth</name>
      <anchorfile>structOpenBabel_1_1quad.html</anchorfile>
      <anchor>a603db4ed74155df96d6d73e4287baf66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBOp</name>
    <filename>classOpenBabel_1_1OBOp.html</filename>
    <base>OpenBabel::OBPlugin</base>
    <member kind="typedef">
      <type>const std::map&lt; std::string, std::string &gt;</type>
      <name>OpMap</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a4e98002937e35472f2b829eaf98913d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a45dfda1fb13d3c26ab7f8f7631e3351c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Do</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>ad1f068b2923689e4c4c48a76a3e885e4</anchor>
      <arglist>(OBBase *pOb, const char *OptionText=NULL, OpMap *pOptions=NULL, OBConversion *pConv=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>WorksWith</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a841238ff5ff03c1c9341dea0105469c6</anchor>
      <arglist>(OBBase *pOb) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ProcessVec</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>ad3d67611882dee42047de32adf603602</anchor>
      <arglist>(std::vector&lt; OBBase * &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>OpOptions</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a64e598f68f30107a74319b9fc6d26cd0</anchor>
      <arglist>(OBBase *pOb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DoOps</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a139b43c8cee15687f02550c031e558d7</anchor>
      <arglist>(OBBase *pOb, OpMap *pOptions, OBConversion *pConv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OpTransform</name>
    <filename>classOpenBabel_1_1OpTransform.html</filename>
    <base>OpenBabel::OBOp</base>
    <member kind="typedef">
      <type>const std::map&lt; std::string, std::string &gt;</type>
      <name>OpMap</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a4e98002937e35472f2b829eaf98913d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpTransform</name>
      <anchorfile>classOpenBabel_1_1OpTransform.html</anchorfile>
      <anchor>a89c92f4e29130fbff3f9385dc4166368</anchor>
      <arglist>(const char *ID, const char *filename, const char *descr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpTransform</name>
      <anchorfile>classOpenBabel_1_1OpTransform.html</anchorfile>
      <anchor>a9d38cff6f979c8de63755d5171047f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OpTransform.html</anchorfile>
      <anchor>a4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WorksWith</name>
      <anchorfile>classOpenBabel_1_1OpTransform.html</anchorfile>
      <anchor>a1ca500aeb02418c2928d551c55d4efc1</anchor>
      <arglist>(OBBase *pOb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Do</name>
      <anchorfile>classOpenBabel_1_1OpTransform.html</anchorfile>
      <anchor>a6d16b63b2ed4cf1fe9c8038388d3b4db</anchor>
      <arglist>(OBBase *pOb, const char *OptionText=NULL, OpMap *pOptions=NULL, OBConversion *pConv=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OpTransform *</type>
      <name>MakeInstance</name>
      <anchorfile>classOpenBabel_1_1OpTransform.html</anchorfile>
      <anchor>aed21db4d9fb23cb30d0440e844a69f57</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;textlines)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a45dfda1fb13d3c26ab7f8f7631e3351c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ProcessVec</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>ad3d67611882dee42047de32adf603602</anchor>
      <arglist>(std::vector&lt; OBBase * &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>OpOptions</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a64e598f68f30107a74319b9fc6d26cd0</anchor>
      <arglist>(OBBase *pOb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>DoOps</name>
      <anchorfile>classOpenBabel_1_1OBOp.html</anchorfile>
      <anchor>a139b43c8cee15687f02550c031e558d7</anchor>
      <arglist>(OBBase *pOb, OpMap *pOptions, OBConversion *pConv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>OpenBabel::_AtomExpr</name>
    <filename>unionOpenBabel_1_1__AtomExpr.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>unionOpenBabel_1_1__AtomExpr.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_AtomExpr::@2</type>
      <name>leaf</name>
      <anchorfile>unionOpenBabel_1_1__AtomExpr.html</anchorfile>
      <anchor>add9b1387523fd7ca8a99e43de1a6ebd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@2.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>prop</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@2.html</anchorfile>
      <anchor>a4a8f6c91eefb9c6bf448592aac44153d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@2.html</anchorfile>
      <anchor>ac4f474c82e82cbb89ca7c36dd52be0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_AtomExpr::@3</type>
      <name>recur</name>
      <anchorfile>unionOpenBabel_1_1__AtomExpr.html</anchorfile>
      <anchor>a402506eb5f889d2537f62f375225cf96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@3.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>recur</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@3.html</anchorfile>
      <anchor>af94d20e7c35dc6021db672bddc719e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_AtomExpr::@4</type>
      <name>mon</name>
      <anchorfile>unionOpenBabel_1_1__AtomExpr.html</anchorfile>
      <anchor>a59ea3d363e8bd7376d61752e3b8d302d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@4.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union _AtomExpr *</type>
      <name>arg</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@4.html</anchorfile>
      <anchor>afbc749edb3aa435b2dfe658c401dd8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_AtomExpr::@5</type>
      <name>bin</name>
      <anchorfile>unionOpenBabel_1_1__AtomExpr.html</anchorfile>
      <anchor>a0265adfe793b0eec6c950ec832fa6a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@5.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union _AtomExpr *</type>
      <name>lft</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@5.html</anchorfile>
      <anchor>ae14ee7287ec01247b373819da1466f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union _AtomExpr *</type>
      <name>rgt</name>
      <anchorfile>structOpenBabel_1_1__AtomExpr_1_1@5.html</anchorfile>
      <anchor>a3ac29da5e05a062a121b17962c0962a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>OpenBabel::_BondExpr</name>
    <filename>unionOpenBabel_1_1__BondExpr.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>unionOpenBabel_1_1__BondExpr.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_BondExpr::@6</type>
      <name>leaf</name>
      <anchorfile>unionOpenBabel_1_1__BondExpr.html</anchorfile>
      <anchor>a4a0d624c9057273e648793dddb94373e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@6.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>prop</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@6.html</anchorfile>
      <anchor>a4a8f6c91eefb9c6bf448592aac44153d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@6.html</anchorfile>
      <anchor>ac4f474c82e82cbb89ca7c36dd52be0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_BondExpr::@7</type>
      <name>mon</name>
      <anchorfile>unionOpenBabel_1_1__BondExpr.html</anchorfile>
      <anchor>a6357983f075e558206585d863e6cc3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@7.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union _BondExpr *</type>
      <name>arg</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@7.html</anchorfile>
      <anchor>ae83b8626d4f03cc85eb9cd454d01dfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct OpenBabel::_BondExpr::@8</type>
      <name>bin</name>
      <anchorfile>unionOpenBabel_1_1__BondExpr.html</anchorfile>
      <anchor>a43e8776e29b2251326c76a5f42193eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@8.html</anchorfile>
      <anchor>ac765329451135abec74c45e1897abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union _BondExpr *</type>
      <name>lft</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@8.html</anchorfile>
      <anchor>acc869ddf951fb816bc6971baf892a666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union _BondExpr *</type>
      <name>rgt</name>
      <anchorfile>structOpenBabel_1_1__BondExpr_1_1@8.html</anchorfile>
      <anchor>a92d143f4a18107be5ba1889660041341</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::BondSpec</name>
    <filename>structOpenBabel_1_1BondSpec.html</filename>
    <member kind="variable">
      <type>BondExpr *</type>
      <name>expr</name>
      <anchorfile>structOpenBabel_1_1BondSpec.html</anchorfile>
      <anchor>a88bcbd740c73c2bdcce39f48af6405b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>src</name>
      <anchorfile>structOpenBabel_1_1BondSpec.html</anchorfile>
      <anchor>aaa998788ffdfc338ed9bc652ca3d2534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dst</name>
      <anchorfile>structOpenBabel_1_1BondSpec.html</anchorfile>
      <anchor>a1c31c228bdc2da4fdf4e90501973e655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>visit</name>
      <anchorfile>structOpenBabel_1_1BondSpec.html</anchorfile>
      <anchor>a8ef53b5e857e12c63baf40bbf78595c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>grow</name>
      <anchorfile>structOpenBabel_1_1BondSpec.html</anchorfile>
      <anchor>a4406f5d19bad5748e3eb1c5e4a1cddb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::AtomSpec</name>
    <filename>structOpenBabel_1_1AtomSpec.html</filename>
    <member kind="variable">
      <type>AtomExpr *</type>
      <name>expr</name>
      <anchorfile>structOpenBabel_1_1AtomSpec.html</anchorfile>
      <anchor>a1269526f9f29728992306e8e649b3540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>visit</name>
      <anchorfile>structOpenBabel_1_1AtomSpec.html</anchorfile>
      <anchor>a8ef53b5e857e12c63baf40bbf78595c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>part</name>
      <anchorfile>structOpenBabel_1_1AtomSpec.html</anchorfile>
      <anchor>a54e2f07c0624c79d98700aff96030e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>chiral_flag</name>
      <anchorfile>structOpenBabel_1_1AtomSpec.html</anchorfile>
      <anchor>ac33192e42f79427d5d5dd48f3ae51327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vb</name>
      <anchorfile>structOpenBabel_1_1AtomSpec.html</anchorfile>
      <anchor>a8354c3fd354f51bceee89a4772d3d520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::Pattern</name>
    <filename>structOpenBabel_1_1Pattern.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>aalloc</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a8905bb289399346c5c8783c3a05dc592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>acount</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a960ddd1f182adce68ce96b532be2119e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>balloc</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a85cfe1e763033574aac6384d410c28d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bcount</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a1279b4e5cdc209e79aeac8393187d8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ischiral</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a489239383a443901c5ddf88d1965c43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AtomSpec *</type>
      <name>atom</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>acc47701840e9e597e8743f9d2f7f9666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BondSpec *</type>
      <name>bond</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a180e82138b439cdbc63565ce0c63f0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parts</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a4b389e40c7e1fda0f658c3e5af589a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasExplicitH</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>ab4578762eca2fb48d53d796b02d30f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>bond_parse_order</name>
      <anchorfile>structOpenBabel_1_1Pattern.html</anchorfile>
      <anchor>a7f6c4112de673fbbd1dcdbac6db888cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::ParseState</name>
    <filename>structOpenBabel_1_1ParseState.html</filename>
    <member kind="variable">
      <type>BondExpr *</type>
      <name>closord</name>
      <anchorfile>structOpenBabel_1_1ParseState.html</anchorfile>
      <anchor>ace96fe929ba644e4fb2810678d8eef05</anchor>
      <arglist>[100]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>closure</name>
      <anchorfile>structOpenBabel_1_1ParseState.html</anchorfile>
      <anchor>ad37c2265134e72b14d91f6195997a472</anchor>
      <arglist>[100]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>closindex</name>
      <anchorfile>structOpenBabel_1_1ParseState.html</anchorfile>
      <anchor>a9a402df040c755233a98f8903883cc9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSmartsPattern</name>
    <filename>classOpenBabel_1_1OBSmartsPattern.html</filename>
    <member kind="enumeration">
      <name>MatchType</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a747637046be33d7273262104aad8069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Single</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllUnique</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a747637046be33d7273262104aad8069daca4bfb16b2e7dc497ce44753a75a3a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSmartsPattern</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>aa930ba6620356e94683a1d5d4a4a25e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBSmartsPattern</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a45c009ff3b4002e84b8f6cc4adbc1a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSmartsPattern</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ada1c40a99620ab595049ba01934b7ca6</anchor>
      <arglist>(const OBSmartsPattern &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>OBSmartsPattern &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a644ca84fee80513682392b90a2841ec6</anchor>
      <arglist>(const OBSmartsPattern &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteMapList</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a6891bcec2059a979cff31cd7970a76a3</anchor>
      <arglist>(std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ab90ce667d180e55f26e7054ed1c6c8b1</anchor>
      <arglist>(const char *pattern)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a2e8f0a4d3222451efe27f83bbdb4ff10</anchor>
      <arglist>(const std::string &amp;pattern)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetSMARTS</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a52d9a732c39944ff60d06aeacb96617c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>GetSMARTS</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a1f769a4a64988a131b80fdda554eda1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a6fcfd4a80bfd7dc324f815cd351bfbdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>afa8720abaf6972d6dac22a8cd1a67225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumAtoms</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a0c317a10161689c407f29a6fcacdb852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumBonds</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a115132ab8bd21607d00d61bc1ba5cc16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a6b86ace2bf7866c375372ff338fe0889</anchor>
      <arglist>(int &amp;src, int &amp;dst, int &amp;ord, int idx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAtomicNum</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ac924c0155e56518eeca1d013126eb51a</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCharge</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>af2676c751682747829be9ccc966bda59</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetVectorBinding</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>abb64da8f114045c4b41dec13919bed9f</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Match</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>adda681cbeb3f22e43d35105ad4608b91</anchor>
      <arglist>(OBMol &amp;mol, bool single=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Match</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a11be59e45293ecb49945b0a3b6f6a84b</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, MatchType mtype=All) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasMatch</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>afaa1fd8e8e32a6dfda6fb2d0ecd4e6f5</anchor>
      <arglist>(OBMol &amp;mol) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RestrictedMatch</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>aafeef4d5a61d7d6b3c5b6120267359a0</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;pairs, bool single=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RestrictedMatch</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a1626ba77086e16c8ddcdee647937d905</anchor>
      <arglist>(OBMol &amp;mol, OBBitVec &amp;bv, bool single=false)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumMatches</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a299d4f22a95890bf259cb12b4664a0ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
      <name>GetMapList</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a5633f1fa229ec0ff8fd3991e09d791c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;::iterator</type>
      <name>BeginMList</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a548b220ea8c00d0297e81ebc7b31c6d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;::iterator</type>
      <name>EndMList</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a7db4777fec63048db41fb890ac0a22ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
      <name>GetUMapList</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ade3dbfa0989e51224e19b38932b05c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>ParseSMARTSPattern</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ae13bae2e9cf131660d957622c18280b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>ParseSMARTSPart</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a4b00a4b53fa768081ef929d86a26992b</anchor>
      <arglist>(Pattern *, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>SMARTSError</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a41f4684ab61bddd674bda41fff7bac07</anchor>
      <arglist>(Pattern *pat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>ParseSMARTSError</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>aa944f62d90a19082249f5231412c6bb6</anchor>
      <arglist>(Pattern *pat, BondExpr *expr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AtomExpr *</type>
      <name>ParseSimpleAtomPrimitive</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a47075ee8f542860bdbe57689bf785a4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AtomExpr *</type>
      <name>ParseComplexAtomPrimitive</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a37c206172f1bf481c71af0985189e3fb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AtomExpr *</type>
      <name>ParseAtomExpr</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a231ab7f84bd99606983b4edee4523324</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BondExpr *</type>
      <name>ParseBondPrimitive</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ad911e5f6baeec860288054e600b0d8e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BondExpr *</type>
      <name>ParseBondExpr</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a6f7fd25ffc9470ac5e86db033562b63c</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>ParseSMARTSString</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>acc0ac2e8af85a3076ef6fa56d353badc</anchor>
      <arglist>(char *ptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>ParseSMARTSRecord</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>aca59a47f4b9cd97f80be10a10239448d</anchor>
      <arglist>(char *ptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>GetVectorBinding</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ac072cb8c2da0204b966173eecb83acfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pattern *</type>
      <name>SMARTSParser</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ac5ed3fa8cd8081a98063409742f5326e</anchor>
      <arglist>(Pattern *pat, ParseState *stat, int prev, int part)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBSmartsPrivate *</type>
      <name>_d</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a36fb3feb1132393275cf6164d3ccf2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>_growbond</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a9aa91437a607c7d33353f38857add180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>_mlist</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ab4d28e672d513c538ae9ff92e409bece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pattern *</type>
      <name>_pat</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>ad43f81cd2cc637e810b38c7686d9917d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_str</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a433559ab344e4266e3d109bce29ee417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>_buffer</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>af076ed3307ccc419f46ed857bb321a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>LexPtr</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a24f5f7e6d2d4aeccecabdbbf89719bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>MainPtr</name>
      <anchorfile>classOpenBabel_1_1OBSmartsPattern.html</anchorfile>
      <anchor>a2860b525fbfe4f29b416c37f8b13f561</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSmartsMatcher</name>
    <filename>classOpenBabel_1_1OBSmartsMatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>OBSmartsMatcher</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>ab2a36f09ba1abd6cb748e74d433423ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBSmartsMatcher</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a464e4dc777a586ec969199dc4aaba764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a1d4c0074445aa349628c1d417794581b</anchor>
      <arglist>(OBMol &amp;mol, const Pattern *pat, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, bool single=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>EvalAtomExpr</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>ad17bc9b49b2504cb30ba9f6e6650e891</anchor>
      <arglist>(AtomExpr *expr, OBAtom *atom)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>EvalBondExpr</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a6fa6bba6b6ce0fe1eb4a52a3116eca1f</anchor>
      <arglist>(BondExpr *expr, OBBond *bond)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetupAtomMatchTable</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a2530846ca78e83a8050a28ccbbc76059</anchor>
      <arglist>(std::vector&lt; std::vector&lt; bool &gt; &gt; &amp;ttab, const Pattern *pat, OBMol &amp;mol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>FastSingleMatch</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a7f1d7465125c206ca70c21ab5db30560</anchor>
      <arglist>(OBMol &amp;mol, const Pattern *pat, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; const Pattern *, std::vector&lt; bool &gt; &gt; &gt;</type>
      <name>RSCACHE</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a0941360bb72df02227939bd307707c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const Pattern * &gt;</type>
      <name>Fragments</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a6dbd99a64fdb16a6ac0c48cb200449ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>OBSSMatch</name>
      <anchorfile>classOpenBabel_1_1OBSmartsMatcher.html</anchorfile>
      <anchor>a129a7087cc88b19562f6840d91f2990f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSSMatch</name>
    <filename>classOpenBabel_1_1OBSSMatch.html</filename>
    <member kind="function">
      <type></type>
      <name>OBSSMatch</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>ad5689e6c79e3e599e863a2e8020fc58c</anchor>
      <arglist>(OBMol &amp;, const Pattern *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBSSMatch</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>a0a81c81869d49ab68bdeacb7f16d7fb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Match</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>a7de092daf1f354fd36f727346169a136</anchor>
      <arglist>(std::vector&lt; std::vector&lt; int &gt; &gt; &amp;v, int bidx=-1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>_uatoms</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>ade85500cee2cdd5840c1637f558a8407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBMol *</type>
      <name>_mol</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>a49fc50c0d3567160b94f7a15aba18da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Pattern *</type>
      <name>_pat</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>a9ee3a52af1af26de9547b080e0b950c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>_map</name>
      <anchorfile>classOpenBabel_1_1OBSSMatch.html</anchorfile>
      <anchor>a46054c62ce67984c978b60b2b9059593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::patty</name>
    <filename>classOpenBabel_1_1patty.html</filename>
    <member kind="function">
      <type></type>
      <name>patty</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>aaaee844f53e42a1ee6223ddb8beb89a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>patty</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>a102e2b842e9f4ba368beb179887a9372</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>patty</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>ac13d841afa2efae018835cc11f8cdb3a</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~patty</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>a1a77bb5fc8ac4b4bf97ebdd3515dc4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_on</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>a6a15f87df6da0fd11ee2dac41405607a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_off</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>a313a1354a1326f8be596ee56189314e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_rules</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>ad52e9084efab7e27fbe7fe394612ca57</anchor>
      <arglist>(const std::string &amp;infile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_rules</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>a55dcef5a39d6765d545e79cff377d332</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;rules)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_types</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>aef2ec72bd2c0b6c3846d20c1ba1fce3f</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; std::string &gt; &amp;atm_typ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_types</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>ab5551b97ffd3df22214ae06ec05e3441</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; int &gt; &amp;atm_typ)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type_to_int</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>af574984ee6ea81537b5af994f7f590df</anchor>
      <arglist>(const std::string &amp;type, bool failOnUndefined=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Istype</name>
      <anchorfile>classOpenBabel_1_1patty.html</anchorfile>
      <anchor>ac168d612af3854ad41c27c16252e2592</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBChemTsfm</name>
    <filename>classOpenBabel_1_1OBChemTsfm.html</filename>
    <member kind="function">
      <type></type>
      <name>OBChemTsfm</name>
      <anchorfile>classOpenBabel_1_1OBChemTsfm.html</anchorfile>
      <anchor>ab934cf70bc4829c0ce0691620a472306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBChemTsfm</name>
      <anchorfile>classOpenBabel_1_1OBChemTsfm.html</anchorfile>
      <anchor>aaa824092d9dc953474727b7a328d68ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBChemTsfm.html</anchorfile>
      <anchor>ad228583a68586be0e885bfe6f6a1e972</anchor>
      <arglist>(std::string &amp;start, std::string &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Apply</name>
      <anchorfile>classOpenBabel_1_1OBChemTsfm.html</anchorfile>
      <anchor>a1df01dc22c67cc084e1c82b8f9333cab</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAcid</name>
      <anchorfile>classOpenBabel_1_1OBChemTsfm.html</anchorfile>
      <anchor>a91bcdd8f2e25382979a3e10924b13d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBase</name>
      <anchorfile>classOpenBabel_1_1OBChemTsfm.html</anchorfile>
      <anchor>a11e1794b991b9ed105f2ab7dd46dbfac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBPhModel</name>
    <filename>classOpenBabel_1_1OBPhModel.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBPhModel</name>
      <anchorfile>classOpenBabel_1_1OBPhModel.html</anchorfile>
      <anchor>a0b969ad98be0038193043058c63de853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBPhModel</name>
      <anchorfile>classOpenBabel_1_1OBPhModel.html</anchorfile>
      <anchor>a58bf2dee3af116b6cfa69ec7ba9e11e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBPhModel.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBPhModel.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignSeedPartialCharge</name>
      <anchorfile>classOpenBabel_1_1OBPhModel.html</anchorfile>
      <anchor>ae078817f50ab066f54fe58eb3d0dfd63</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CorrectForPH</name>
      <anchorfile>classOpenBabel_1_1OBPhModel.html</anchorfile>
      <anchor>aae3bb8e98c90f3eb77b8654341eef135</anchor>
      <arglist>(OBMol &amp;, double pH=7.4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::CharPtrLess</name>
    <filename>structOpenBabel_1_1CharPtrLess.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structOpenBabel_1_1CharPtrLess.html</anchorfile>
      <anchor>ac2505b03ab30bfd419b570e0324743ab</anchor>
      <arglist>(const char *p1, const char *p2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBPlugin</name>
    <filename>classOpenBabel_1_1OBPlugin.html</filename>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga2f6f0f4ddec879439f78de686c459fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga4a6b8d1611d5d963fc29982cc1ebcbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TypeID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga45dfda1fb13d3c26ab7f8f7631e3351c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBPointGroup</name>
    <filename>classOpenBabel_1_1OBPointGroup.html</filename>
    <member kind="enumeration">
      <name>Symbol</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C1</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ae54c31a855b907f263d49edcdbe677bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cs</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ab77ccfa4551eb6071172500e86374346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ci</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aabdad77271b2d1412618d823c540e3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C2</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a5e602f1d68586231698bda7be6af7d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C3</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ada966660d95922946f59862d9ce54b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C4</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a24727389909cb6406ed9483df7810c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C5</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a26c0a10a3dc0a69747539541f4a82172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C6</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ae138d2e0243a8b4dcca22738eebc2197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C7</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a4f858b829392e960b43c57a9731c98ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C8</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a6a72e133ec9df7aadaeef87557e5cbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D2</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a86c69dc8849d17673b52b9a8d94d8b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D3</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ade8ef7573c5fa770f07ac7616cbf5d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D4</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a12761dd9f3b74590b720d87d6ca9fbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D5</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a9bfc9615ce2836fe43fe37e0eda2a68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D6</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ab6e74cb404ad3a7370b6cbb05f004fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D7</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a0701f86c777d8dde5be3a916a510cdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D8</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aea0726597b1f1d4e1fbe5bc51978a5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C2v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a65acddc2c054a99af3a1c61abdee4d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C3v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54af8ab267770abebddd8400d58197c2aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C4v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a35e8ea2dbca6d4923bedd51ce2a969fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C5v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a26583da8b2a2d19cc7c873ba5c08f4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C6v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ac2ba716d956e1dc0153e850beb87d365</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C7v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a615bd71236084ff4e86fd35c4015e538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C8v</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a79dda7ee1cd541e2835a29b189bee34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C2h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a1ceeb226b7a1932e701c97d844454d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C3h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a980c40aa013b1de11797a321deb2bc2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C4h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ac8fbc2737f84e45ee15e7ad69819693b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C5h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aead6f2af42917785eb5a6db7054a859f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C6h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a3ae9d9dc3298503efcd1c357b720be29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C7h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ac88ed8492c5e9fa38f396e6e224cd64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C8h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a326c0ed02245c1a77b1da8d9b8c756e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D2d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a8a28a4b4940322ef8312b9cbcd4534e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D3d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a673410fadc7fe96515bfda2a97fa2209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D4d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aedcfdf53bbbabf3199d2875ee261f5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D5d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a41ac4bd862fd10f443971b589c00dfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D6d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a0cbb656a87c292dafe26c6842bc24fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D7d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aa0679ac3524a4518154eecebe332ecd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D8d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a49c567295cd376bc09ff5674f5db98c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D2h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a21c5c6814813d795a9949df6e0384737</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D3h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aa541d25593ff195fbe4740b3d5ca51af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D4h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a5a9fd47dcc5ddd68c8ef7dd88fd943ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D5h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54af82970a064915a65bba5c16dbeed9663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D6h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ab4032a3d3ec6149a7033950f0398e942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D7h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ac2eef4a7f67693d4464cd0b2c73defd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D8h</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a992c960c89de9baeb71fa2d8e8e21a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>S4</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ab4869c2c9c6ff1f0d0e8902828206040</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>S6</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a89a17b71211e63287ae5d4d451f30048</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>S8</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aedd7601d016e856ea074399ab8136fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a21f40778b7db9343a6ca75ec2c41ccce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Th</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a7d1de83fb7de5a6c2f70a514ba23e387</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Td</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a4131d5ada99c4af71ff44b2fbf1a7404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>O</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54af4b8b7698dfedf5562a7db2bdb07010a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Oh</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54aa4e2f2aa620338dd331551ba214a6f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cinfv</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a50409c69488bef03d11e148a62aa9e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dinfh</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ab444aa9439407495b53540db8c11a93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54ad091b8e376f7cf432dc367e1eda65e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ih</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a72be71d8f7e4f58964d659a26c68d05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>K</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a660a38111995acbeb2820648e82f0d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Kh</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a11dc3f6a420daf43965e4c9550caf912</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a7feef761cd73fac6e25b8bb80d2c4e54a4e81c184ac3ad48a389cd4454c4a05bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBPointGroup</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a07beead343dca854e2d605fc3b661e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBPointGroup</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a4783760375d82ff64913e146a23b7338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a1937f7e0578fb48f62a8ffea39db33a0</anchor>
      <arglist>(OBMol *)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>IdentifyPointGroup</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a5bf61322e76c1b4790efc5c76b47e3a3</anchor>
      <arglist>(double tolerance=0.01)</arglist>
    </member>
    <member kind="function">
      <type>Symbol</type>
      <name>IdentifyPointGroupSymbol</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>a6d4d89f10a50a39daa30ba55c2ceb82e</anchor>
      <arglist>(double tolerance=0.01)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Symmetrize</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>adfa92d36cdbb24952729e1446cf3975c</anchor>
      <arglist>(OBMol *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PointGroupPrivate *</type>
      <name>d</name>
      <anchorfile>classOpenBabel_1_1OBPointGroup.html</anchorfile>
      <anchor>af1e9243e35e1080e772591c76c3a42ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBQueryAtom</name>
    <filename>classOpenBabel_1_1OBQueryAtom.html</filename>
    <member kind="function">
      <type></type>
      <name>OBQueryAtom</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a4ff7885e0bcfde8a0425e1b3cb268315</anchor>
      <arglist>(int atomicNum=6, bool isInRing=false, bool isAromatic=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBQueryAtom</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a746e110133c6f0d223712f87e296e393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetIndex</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>ae6b8fa1646a64b9fbe745af4719920ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; OBQueryBond * &gt; &amp;</type>
      <name>GetBonds</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a422202b23ab4f29733dd013d75441b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; OBQueryAtom * &gt; &amp;</type>
      <name>GetNbrs</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>ad3cd7b20213755fa081eb31c694a6133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Matches</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a4cc21e93fd84c4713b24d965cb90a28c</anchor>
      <arglist>(const OBAtom *atom) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_index</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a43dd632e5e23d3651e69d392a7b7ad2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_atomicNum</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>aabf8c5be0361cbc654926947ff751b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isInRing</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a13ba39cc1c750de23ff95d2821c3eb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isAromatic</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a383a7fb69b30b0cd185b47faf9d71aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBQueryBond * &gt;</type>
      <name>m_bonds</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>aedc99f93df4bc475dec73bc04192eedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBQueryAtom * &gt;</type>
      <name>m_nbrs</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>ad1463519f9e71c25f35806e5b7b99f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>OBQuery</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a43f34dd89fd2288fbb30f4eb7ca23382</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>OBQueryBond</name>
      <anchorfile>classOpenBabel_1_1OBQueryAtom.html</anchorfile>
      <anchor>a2d242d8bcab90501c6c9f49787d9a4b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBQueryBond</name>
    <filename>classOpenBabel_1_1OBQueryBond.html</filename>
    <member kind="function">
      <type></type>
      <name>OBQueryBond</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a4ab1d8659dc4c0cb13e71c7893fa771e</anchor>
      <arglist>(OBQueryAtom *begin, OBQueryAtom *end, int order=1, bool aromatic=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBQueryBond</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a5a2d354e5be52d235fb73bdd32922b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetIndex</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>ae6b8fa1646a64b9fbe745af4719920ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBQueryAtom *</type>
      <name>GetBeginAtom</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>ac39e1b7ae2486afcc01623629b0d87c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBQueryAtom *</type>
      <name>GetEndAtom</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a4b5d4f2eeb7779e739bddfb0534dc52c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Matches</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>aeae2e5cc4cded6921003fb5f3d7962d8</anchor>
      <arglist>(const OBBond *bond) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_index</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a43dd632e5e23d3651e69d392a7b7ad2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBQueryAtom *</type>
      <name>m_begin</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a2ceee13db2d98db539af43a906a1291d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBQueryAtom *</type>
      <name>m_end</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a7ef35338625112ce0bcafa992abadb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_order</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a0795f26a2aa019683b9dfaeebbe6839b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_aromatic</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>ac997bb8d3752aace187f46102f32c353</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>OBQuery</name>
      <anchorfile>classOpenBabel_1_1OBQueryBond.html</anchorfile>
      <anchor>a43f34dd89fd2288fbb30f4eb7ca23382</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBQuery</name>
    <filename>classOpenBabel_1_1OBQuery.html</filename>
    <member kind="function">
      <type></type>
      <name>~OBQuery</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a389be5417270db13420cb84e47e0ee18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumAtoms</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a0c317a10161689c407f29a6fcacdb852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumBonds</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a115132ab8bd21607d00d61bc1ba5cc16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; OBQueryAtom * &gt; &amp;</type>
      <name>GetAtoms</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a5d698ccdc080cdf6237ce1d88fb6f1b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; OBQueryBond * &gt; &amp;</type>
      <name>GetBonds</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a422202b23ab4f29733dd013d75441b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBQueryBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a120a2b47d1f72cbf4e445ac63d8abfdf</anchor>
      <arglist>(OBQueryAtom *begin, OBQueryAtom *end) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtom</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>a3b2e350f82ce51a8ba52af162907529e</anchor>
      <arglist>(OBQueryAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBond</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>ac617b0afd430d9674c41faa179ee375c</anchor>
      <arglist>(OBQueryBond *bond)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBQueryAtom * &gt;</type>
      <name>m_atoms</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>ad60d0800edfffd66821572b5ffcb5448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBQueryBond * &gt;</type>
      <name>m_bonds</name>
      <anchorfile>classOpenBabel_1_1OBQuery.html</anchorfile>
      <anchor>aedc99f93df4bc475dec73bc04192eedc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::DoubleType</name>
    <filename>structOpenBabel_1_1DoubleType.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>hi</name>
      <anchorfile>structOpenBabel_1_1DoubleType.html</anchorfile>
      <anchor>a8b464957786ffe5a3406a4060f0da97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>lo</name>
      <anchorfile>structOpenBabel_1_1DoubleType.html</anchorfile>
      <anchor>af0c1fc19ce0b4c36f5b6a41b90012403</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRandom</name>
    <filename>classOpenBabel_1_1OBRandom.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRandom</name>
      <anchorfile>classOpenBabel_1_1OBRandom.html</anchorfile>
      <anchor>aad105f775b284c16fdd4c649e227335f</anchor>
      <arglist>(bool useSys=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Seed</name>
      <anchorfile>classOpenBabel_1_1OBRandom.html</anchorfile>
      <anchor>a381897e3c19642c65d3784c94f3572d8</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeSeed</name>
      <anchorfile>classOpenBabel_1_1OBRandom.html</anchorfile>
      <anchor>a74c6a2f3418f559a3c829177885c3b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NextInt</name>
      <anchorfile>classOpenBabel_1_1OBRandom.html</anchorfile>
      <anchor>a0fffdba613d757a821b059d7d4a26b74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NextFloat</name>
      <anchorfile>classOpenBabel_1_1OBRandom.html</anchorfile>
      <anchor>ae07ab97904e47280d8dfa4164ffe6bc3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBReaction</name>
    <filename>classOpenBabel_1_1OBReaction.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="function">
      <type></type>
      <name>OBReaction</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>ad4146c04740bf08485bdea0a457015b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumReactants</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a98af182824f0924e7582c98a7252b89f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumProducts</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>ade31c5d085eac99f304d8f93c0f8a68a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddReactant</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a4171118b3e4bf11e9b2d13d93eae3e8b</anchor>
      <arglist>(const shared_ptr&lt; OBMol &gt; sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddProduct</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>acbd47ab999f149265823af35f27ad787</anchor>
      <arglist>(const shared_ptr&lt; OBMol &gt; sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransitionState</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a2186438986f347ffe3c9746d075781c4</anchor>
      <arglist>(const shared_ptr&lt; OBMol &gt; sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAgent</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a19792b954ce336496b82309eb6c0746f</anchor>
      <arglist>(const shared_ptr&lt; OBMol &gt; sp)</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr&lt; OBMol &gt;</type>
      <name>GetReactant</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>acb36f72353ba8b8c1ebe6ac8001708f1</anchor>
      <arglist>(const unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr&lt; OBMol &gt;</type>
      <name>GetProduct</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>aee9da7b864a095ddc7b6d94b10aaf447</anchor>
      <arglist>(const unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr&lt; OBMol &gt;</type>
      <name>GetTransitionState</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a365dfe016a68767a312d77519abae9c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr&lt; OBMol &gt;</type>
      <name>GetAgent</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a5e0a1d7c68077cd8ed5b5a41132459e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a85cb18896dd69857181b9f0fee289f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetComment</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a756028b52b8e0945201426d53a80b47a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a54294c70e5c7d4e8edacbdde65a07ab3</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComment</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a172c10e306c608ed9687a06d065dcf7d</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsReversible</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>affd0e8a81e6376c7af13d9265170bb93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReversible</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>ab8592aab9b061be89f1d86e642d748b4</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBReaction.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBResidue</name>
    <filename>classOpenBabel_1_1OBResidue.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="function">
      <type></type>
      <name>OBResidue</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a209fe98baf20de8f3a9fa0e18ab1a397</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBResidue</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ab1c75d4e3f23b57af05e7da7ff2a81f1</anchor>
      <arglist>(const OBResidue &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBResidue</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>aef348075604c0cede393f255546b1a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OBResidue &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a19156f703dd34221b38ad4a787648771</anchor>
      <arglist>(const OBResidue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ad08955a5355b302e5054fb10239d4d40</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>adcb2b5249a58b4d8f546c3216b86651c</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>af56cd8bd9860e5f011d802d88dc571c7</anchor>
      <arglist>(OBAtom *atom)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetName</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a7cf274421c8b6705d6470aa7e57b41ab</anchor>
      <arglist>(const std::string &amp;resname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a85b5552b9b6d699aed667f4587b9e94b</anchor>
      <arglist>(const unsigned int resnum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a1d578b82c73df3d3add2d854473e6350</anchor>
      <arglist>(const std::string resnum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChain</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a035ecf9b12c0d62081d0a3e5a9d3c98c</anchor>
      <arglist>(const char chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChainNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ac1cd4d44ddc8e40dad300a43d6288c53</anchor>
      <arglist>(const unsigned int chainnum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIdx</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a1a0264682b159979a57ee478b19111c8</anchor>
      <arglist>(const unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtomID</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ad4945233e0066b2b6fbfbe0ed73ae7bc</anchor>
      <arglist>(OBAtom *atom, const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHetAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a52f53369a63eabccdc3ecf5f02b9d211</anchor>
      <arglist>(OBAtom *atom, bool hetatm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSerialNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a18a42bad6c8fa5ee0a23cbd292cfe034</anchor>
      <arglist>(OBAtom *atom, unsigned int sernum)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetName</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a2e96306d57a0b29618a90fd2f1eb5f31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a817edbdbe14e2d1a2df56766fbf1e86e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetNumString</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a71456aeaa4af6240da0bc162ef15a7be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetNumAtoms</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a8fe8033a10515ce4583973e1ae8dfd6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>GetChain</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a79a18754e910a57089b83c0e4598bc99</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetChainNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a4d44b719e43894381c15f02c7b07c801</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetIdx</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a2d5d0b2164b4af01e12ae914ebe49c5e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetResKey</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>abf8f05944ae2bf94463ef557fb2f6e97</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBAtom * &gt;</type>
      <name>GetAtoms</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>af55938feea9c6a504609111583dfdd2a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBBond * &gt;</type>
      <name>GetBonds</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a55b3d11326ee365438d9c1cf97d0c51c</anchor>
      <arglist>(bool exterior=true) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetAtomID</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ad22f4f066b751f8d6c55f155d380f2bd</anchor>
      <arglist>(OBAtom *atom) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>GetSerialNum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>aa3450ea312e3177645be2aff9a63a4cc</anchor>
      <arglist>(OBAtom *atom) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetAminoAcidProperty</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a1bee4700366f0455cc64c8f8fe4986eb</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetAtomProperty</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a5af8c25998c59898195719eb90dcb226</anchor>
      <arglist>(OBAtom *a, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetResidueProperty</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a0bf504badd0f3f11d537ee9374e37098</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsHetAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>acbf3d5f13bc263f0957a70dedca072c8</anchor>
      <arglist>(OBAtom *atom) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsResidueType</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>afdd9827904836a3365af1af852fbe0f7</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>OBAtomIterator</type>
      <name>BeginAtoms</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ae3b07b388e733d5a0e9ee9654a4411a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtomIterator</type>
      <name>EndAtoms</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a81afb84c73fe3e57e8edd5a472e175f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>BeginAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a075ad65cbdba2504245591ad25df77ee</anchor>
      <arglist>(std::vector&lt; OBAtom * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBAtom *</type>
      <name>NextAtom</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>af5eea31cca0592139ea68162f211d6b2</anchor>
      <arglist>(std::vector&lt; OBAtom * &gt;::iterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_idx</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a1219a011a5e0ec59c67a5a873d81986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>_chain</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>abdc35302d8b2ddbbd0cb48de079527eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_aakey</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ad719c79a18fbf14911233bb6e6119370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_reskey</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>aa09358b69ef09f768b7316011e53af22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_resnum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ad8397c5248306c4a2ea1aa0b79539cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_resname</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>ae5b2a83968919b021e1189020fe3492a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>_hetatm</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>af48bc2090137ce8be5ab8b86125734b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_atomid</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a520b293262a31a65c78c69b6177f871c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBAtom * &gt;</type>
      <name>_atoms</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>abfa0f02c4ad4146e7250fb38a89b9387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>_sernum</name>
      <anchorfile>classOpenBabel_1_1OBResidue.html</anchorfile>
      <anchor>a51fea0daea9bfeed01133d1a7376523a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRing</name>
    <filename>classOpenBabel_1_1OBRing.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>Size</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>ab3bace7b51e6e7d78048999bc2189e27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>PathSize</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>ab6d388ff8c4e4d4d4c37db31a36c01f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAromatic</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a1c74fed3a281f591495387ec5fb0a050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a945b912388c54c9e48c36f11b270b2ce</anchor>
      <arglist>(char *type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>aef1d0a90f7d5dd118380188a882a2480</anchor>
      <arglist>(std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a7f02f5442f2ed3aa2045587d3319ab7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetRootAtom</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a5f3dc6510cef07a2247e495d928afb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMember</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a30bcd8070ca5df7d8f9c665e22666d2e</anchor>
      <arglist>(OBAtom *a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMember</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>acf3841f44863af6030c02f54a10ba635</anchor>
      <arglist>(OBBond *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInRing</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a87c9cc8c92936bd191dca74f78fb84cb</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParent</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a82ba3a4d5db75e9f11d3ea8dd5ef32b8</anchor>
      <arglist>(OBMol *m)</arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetParent</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>ad8480b61159bc6cb861b17341dc2b29a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCenterAndNormal</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a2e91c040e3659233748563f119aa77da</anchor>
      <arglist>(vector3 &amp;center, vector3 &amp;norm1, vector3 &amp;norm2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRing</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>aca37bf71481749f6555e916555d9e7a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRing</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>ace01bbda7e867381b5b0416b3666a8e3</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;path, int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRing</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a2abeced3e6e318f88abe9249833b6d25</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;path, OBBitVec set)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBRing</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a23338e172a6e54349b089741494a4562</anchor>
      <arglist>(const OBRing &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>OBRing &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a651c293bb5cfd688a358cf47d596c9c7</anchor>
      <arglist>(const OBRing &amp;src)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ring_id</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>ab121c8e013115dd3efb26601ad1975d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>_path</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>a86d1b14f3c439c5be01e0f6c9dc60a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBitVec</type>
      <name>_pathset</name>
      <anchorfile>classOpenBabel_1_1OBRing.html</anchorfile>
      <anchor>ababc3e7a7e660eba9b2dfa3b2bc28782</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRingSearch</name>
    <filename>classOpenBabel_1_1OBRingSearch.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRingSearch</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>af1211b4680e59ac34a16593ddcdb2761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRingSearch</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>a822227d05e90c205e5f2a2a75b313c62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortRings</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>acd7836d1e4e1ab6fbd3faa49403e5503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRedundant</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>a5e60e6aac8c448ba3216236693e6f28a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRingFromClosure</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>aa1396dc4c11207285a8711b28a1292e0</anchor>
      <arglist>(OBMol &amp;, OBBond *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SaveUniqueRing</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>aba61821d4c16605d56801906db2d0661</anchor>
      <arglist>(std::deque&lt; int &gt; &amp;, std::deque&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteRings</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>a3a5de536030e126350d4b93651f3e07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt;::iterator</type>
      <name>BeginRings</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>aa1a05257821a8156625beabb7dd58e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBRing * &gt;::iterator</type>
      <name>EndRings</name>
      <anchorfile>classOpenBabel_1_1OBRingSearch.html</anchorfile>
      <anchor>a07ad405727c652a6a280d821b9d1ac47</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRTree</name>
    <filename>classOpenBabel_1_1OBRTree.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRTree</name>
      <anchorfile>classOpenBabel_1_1OBRTree.html</anchorfile>
      <anchor>a86bcbc41c9aaa9af6242cb34d12f9e41</anchor>
      <arglist>(OBAtom *, OBRTree *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRTree</name>
      <anchorfile>classOpenBabel_1_1OBRTree.html</anchorfile>
      <anchor>a552ea16c4bb845b80b7cd56c2bd5c87d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetAtomIdx</name>
      <anchorfile>classOpenBabel_1_1OBRTree.html</anchorfile>
      <anchor>a90ece8ae13e0c49b7c2c0b0bef2df3a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PathToRoot</name>
      <anchorfile>classOpenBabel_1_1OBRTree.html</anchorfile>
      <anchor>a153b0710c31f93917acf164b57cea0f3</anchor>
      <arglist>(std::vector&lt; OBAtom * &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotamerList</name>
    <filename>classOpenBabel_1_1OBRotamerList.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBRotamerList</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>aa1cef5a8affd0b0f75891495f1674805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a5361d45ced4133323de80d61ae5ecf05</anchor>
      <arglist>(OBBase *parent) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRotamerList</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a193afbb27085bc1183ea8f415c99b989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>afd34dcbc8bd8c0fba2433b39f1e1d61b</anchor>
      <arglist>(OBMol &amp;, OBRotorList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a7ecbed112a3ccc6252b88d4432b94c6e</anchor>
      <arglist>(OBMol &amp;mol, unsigned char *ref, int nrotors)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumRotors</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>abccb611f60719e4ec9acf271a5aa934d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumRotamers</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a747209e491f2149ac86230cf6c3bd146</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRotamer</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a731bb8e81cfd2699e1bfeb0c24fc7d2b</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRotamer</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a1abcce8335b5b98eb2ef691138e864eb</anchor>
      <arglist>(int *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRotamer</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>ab12cefb04ee9382126d785c965b99454</anchor>
      <arglist>(std::vector&lt; int &gt; key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRotamer</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a2244fa5b56d6a839a32de2fd11156472</anchor>
      <arglist>(unsigned char *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRotamers</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a6f752b5a14fe102c0c274166e40f8eb4</anchor>
      <arglist>(unsigned char *arr, int nconf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetReferenceArray</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a2412585a6d0aeec3e6d7905226d89bcd</anchor>
      <arglist>(unsigned char *) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double * &gt;</type>
      <name>CreateConformerList</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a3f0fbaf701b38d36aaa0a225de04841d</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExpandConformerList</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a47d8b31fb5ca455ff3586b86e44acdfc</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; double * &gt; &amp;confs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCurrentCoordinates</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>af0ec970ded1e0a8721469b45c58e4451</anchor>
      <arglist>(OBMol &amp;mol, std::vector&lt; int &gt; arr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBaseCoordinateSets</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a91c3efe37db1542a2f553440143915f9</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBaseCoordinateSets</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>aa06b0ac4b05d9a708e38da81868e9586</anchor>
      <arglist>(std::vector&lt; double * &gt; bc, unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumBaseCoordinateSets</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a11ab9cdfece6567dfc4db629cddd0a93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetBaseCoordinateSet</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>adbaf9eeafb825763acadfc785220412a</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a0c317a10161689c407f29a6fcacdb852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned char * &gt;::iterator</type>
      <name>BeginRotamer</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a2948e1a74f2c22c575d6ddc6643f6ef1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned char * &gt;::iterator</type>
      <name>EndRotamer</name>
      <anchorfile>classOpenBabel_1_1OBRotamerList.html</anchorfile>
      <anchor>a589d2df01c6f3e1cb1bf95b25e804409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotorRule</name>
    <filename>classOpenBabel_1_1OBRotorRule.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRotorRule</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>ac65f277d7001f0b88bfeb47c25490995</anchor>
      <arglist>(char *buffer, int ref[4], std::vector&lt; double &gt; &amp;vals, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRotorRule</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a236044823d65dffe4868c831e45a157b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a9dcb9b43a3d0fa9003d4c1c9d921f6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetReferenceAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a6583697916569d12c1a113b4ad4dbcc2</anchor>
      <arglist>(int ref[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDelta</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a800aee2a9873012ac7e2a1bcedd5c6ba</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetDelta</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>abaa1b786f36fb9bc98b5c46e74425056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>GetTorsionVals</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a111e26305dbd8f7c211cc259dff440e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>GetSmartsString</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a84366a387431ba9c8ed2f3813e60badd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBSmartsPattern *</type>
      <name>GetSmartsPattern</name>
      <anchorfile>classOpenBabel_1_1OBRotorRule.html</anchorfile>
      <anchor>a1b97208b08b2495efa0a4484b4d61938</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotorRules</name>
    <filename>classOpenBabel_1_1OBRotorRules.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBRotorRules</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>a1ebbe90c85b0e7b9b09f3e29719ee447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRotorRules</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>af304ead8beb29ed38f8c15491031f122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilename</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>adeb3abe4bd6c3443362068379a6b665e</anchor>
      <arglist>(std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRotorIncrements</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>ab7527366ed1bf39da7123e3ad65d96ad</anchor>
      <arglist>(OBMol &amp;mol, OBBond *bond, int refs[4], std::vector&lt; double &gt; &amp;vals, double &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Quiet</name>
      <anchorfile>classOpenBabel_1_1OBRotorRules.html</anchorfile>
      <anchor>a3bf46031273468cc23720df1c59d3e85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotor</name>
    <filename>classOpenBabel_1_1OBRotor.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRotor</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a5b2c2642b2a9bc339c2bd5fdd7112c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRotor</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a6a1a300dca75a2089732a7a66f7e1234</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveSymTorsionValues</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a9e776c30d29ce2b4832a9ae3dace64ea</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBond</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a75c73979e73fb44e48424150fa0208c7</anchor>
      <arglist>(OBBond *bond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIdx</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ab994a975e39f5c62288f4f972b6f90c9</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDihedralAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a49bb9b1c86b312984e9e9f28caffe7f7</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDihedralAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>acac104fcce61a5bf289473b60f9826f8</anchor>
      <arglist>(int ref[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a04af4e63bd23ee0d160afc55107d1e32</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;atoms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorsionValues</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a0d37d5e994df8c97fe401ee821a3cbe7</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;angles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedBonds</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ab263260a251aaa20610c7ca9dba31491</anchor>
      <arglist>(OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToAngle</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a00e2cf7f72570502a2e543e85499b1cc</anchor>
      <arglist>(double *coordinates, double setang)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotor</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ae1e4ad40e6514cc72c9587245989c9bc</anchor>
      <arglist>(double *coordinates, int next, int prev=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>affffe6e68eecc96bb8189c8b0f8ffc4a</anchor>
      <arglist>(double *coordinates, double sine, double cosine, double translation, double invmag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Precompute</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a8aa59b64a8b8b3a54ec081af5986f8e3</anchor>
      <arglist>(double *coordinates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a74f31787078ef1b25dfe9b7da2d10c8f</anchor>
      <arglist>(double *coordinates, int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Precalc</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a619485e3dec9a4a3e3dced49344ede90</anchor>
      <arglist>(std::vector&lt; double * &gt; &amp;conformers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a1ade9c212155ac04f25ddf32731657ea</anchor>
      <arglist>(double *coordinates, int conformer, int idx)</arglist>
    </member>
    <member kind="function">
      <type>OBBond *</type>
      <name>GetBond</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a1b723190c734e234d87398f8eb245a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Size</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a7b470b21b5807f0a9162bef72aebfef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetIdx</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ac8451eabbc164153f5030ae9723cf48b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDihedralAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a44db679688b64e9032ea9bf6def76315</anchor>
      <arglist>(int ref[4])</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>GetDihedralAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a75d6cacf7c1783272f74546387716902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>GetRotAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a7092cc4675cd2c384be6c8d4cf6b75ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>GetTorsionValues</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a21e54e7c2d59ecbf4dfd8787a9d204e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>GetFixedBonds</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ade5378a288a25258f4e3cc28a954bc2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcTorsion</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>abe6d75394c35f0cc1722eefd849cfbd4</anchor>
      <arglist>(double *coordinates)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CalcBondLength</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a1f707fec840e4ec5dc6d3901e680fe5c</anchor>
      <arglist>(double *coordinates)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;::iterator</type>
      <name>BeginTorIncrement</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a06d5fdac08688bdff198a92c78bdeb69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;::iterator</type>
      <name>EndTorIncrement</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ac5857c1e09978240624038b2c6352dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDelta</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a800aee2a9873012ac7e2a1bcedd5c6ba</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetDelta</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>abaa1b786f36fb9bc98b5c46e74425056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>GetFixedAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a937745b1178a21d8b223992d16d7d50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a530a0fd1a1e312d489b367ac73e56bb7</anchor>
      <arglist>(OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>OBBitVec &amp;</type>
      <name>GetEvalAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>ab690ce98b2f06352f9079eeae94da3c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEvalAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a33bdb71641015f05a632ffaf76e7672a</anchor>
      <arglist>(OBBitVec &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetRotAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>aa68d318d4f18049ca83fbbe8d1c5fa90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>GetResolution</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a8feebfa38afe9888e7a50e421b8f5243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNumCoords</name>
      <anchorfile>classOpenBabel_1_1OBRotor.html</anchorfile>
      <anchor>a4e82f80e2cd8faf3bce17c464ab1672c</anchor>
      <arglist>(int nc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotorList</name>
    <filename>classOpenBabel_1_1OBRotorList.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRotorList</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>abb796c2d6e0cc373ea686939fa8802bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRotorList</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a57a6b6e1458a1eb39826419c0544ce41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Size</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a7b470b21b5807f0a9162bef72aebfef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedBond</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>abf7ff40c898c129bba2020623f7394b3</anchor>
      <arglist>(OBBond *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasFixedBonds</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>aa0258fc5190b093eb234530b7e09f60f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveSymVals</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a22bfb3d2f1e0787b0c1aabd0f0255226</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Setup</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a85e63dfcf5b43e5ae867815f0398c87e</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedBonds</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>ade6c00d93af1e19168894486ad6cbdba</anchor>
      <arglist>(OBBitVec &amp;fix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>addb143a5ae2f64420fa692a14489288b</anchor>
      <arglist>(std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuiet</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a15266fb4e5ef334d0de47b203d420f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetRotAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>ac08d1221790bd6f14418e3f77e6e725a</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindRotors</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>aca77a345e848bcedd33f56b03844d014</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetEvalAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a76745541fde561757dce0bc58d60354e</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AssignTorVals</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a1d06cdda315ea9b96d14aeb10d352e61</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBRotor *</type>
      <name>BeginRotor</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a0911c08e37e43925167a51149d143e3a</anchor>
      <arglist>(OBRotorIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBRotor *</type>
      <name>NextRotor</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a610d31fe22e09be685d1bc3e90584e56</anchor>
      <arglist>(OBRotorIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>OBRotorIterator</type>
      <name>BeginRotors</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>a9168b57d7fd7c6ac082ab7349e6c82df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBRotorIterator</type>
      <name>EndRotors</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>aac6c765496e1602cdf8a2160251cce9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IdentifyEvalAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>af5b2891615e85e4fb9ff52d2931c6170</anchor>
      <arglist>(OBMol &amp;mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>aaabb93aa1f24c335405418bfa3ead95b</anchor>
      <arglist>(OBBitVec &amp;fix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasFixedAtoms</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>acb5c0375aa5f28091792762a5f66f23e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IgnoreSymmetryRemoval</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>adbf9e2936af60825abb7f7812ba8fae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotAtomsByFix</name>
      <anchorfile>classOpenBabel_1_1OBRotorList.html</anchorfile>
      <anchor>af216aef19cf7a82fb1e57504b39f9329</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRotorKeys</name>
    <filename>classOpenBabel_1_1OBRotorKeys.html</filename>
    <member kind="function">
      <type></type>
      <name>OBRotorKeys</name>
      <anchorfile>classOpenBabel_1_1OBRotorKeys.html</anchorfile>
      <anchor>a1df6b471196fede2ca7816bdb48a55c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBRotorKeys.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumKeys</name>
      <anchorfile>classOpenBabel_1_1OBRotorKeys.html</anchorfile>
      <anchor>a5e2ff872d231d1a136588edf2f214812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRotor</name>
      <anchorfile>classOpenBabel_1_1OBRotorKeys.html</anchorfile>
      <anchor>a978846687be54138173a299d169bce37</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Next</name>
      <anchorfile>classOpenBabel_1_1OBRotorKeys.html</anchorfile>
      <anchor>a3947d19ac087ef2cd68c2409920339c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>GetKey</name>
      <anchorfile>classOpenBabel_1_1OBRotorKeys.html</anchorfile>
      <anchor>a0ea664b7db8e291318eda525a542aa7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSpectrophore</name>
    <filename>classOpenBabel_1_1OBSpectrophore.html</filename>
    <member kind="enumeration">
      <name>AccuracyOption</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize1</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170a60745eb50c8512b8d08257119dcba274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize2</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170ae8e7e82d3f1e9a6b3e3a93139536af79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize5</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170a216559a9b8e0a70e53518a7074442e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize10</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170ad126f9cfef85fcad55c987ac835f6497</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize15</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170a4174877c72526beae1f3769758035c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize20</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170ae77ff75bf38a24082da26d63174e241d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize30</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170a6a1686e92145a7ac8ee27690b891796e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize36</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170a065172e3e353045b0088235add38a948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize45</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170abdcbc2496d61296e1e473535f2ed9e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngStepSize60</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a28a3c98ca450aecff9c355cdbce06170aeb79d38203dd7d6b9395f698e1f7bb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NormalizationOption</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ad9c1e7eefe89ff43132aa6b91db020e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoNormalization</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ad9c1e7eefe89ff43132aa6b91db020e1ae37dd5adc75b50bc02e9b39b636d1508</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalizationTowardsZeroMean</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ad9c1e7eefe89ff43132aa6b91db020e1ab305061930877b89678f77d475f1a7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalizationTowardsUnitStd</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ad9c1e7eefe89ff43132aa6b91db020e1a103d10ad601d0d7bebf3460cb25494ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalizationTowardsZeroMeanAndUnitStd</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ad9c1e7eefe89ff43132aa6b91db020e1aa4cf06bf72d33156066fc2c260f7b5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StereoOption</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a013281b33f013bacf84b2f27813cc913</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoStereoSpecificProbes</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a013281b33f013bacf84b2f27813cc913af78e6a5d32a0518ad69d0b3639b831cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UniqueStereoSpecificProbes</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a013281b33f013bacf84b2f27813cc913af33e0d401f3fb25ee23d9532a6fc1a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MirrorStereoSpecificProbes</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a013281b33f013bacf84b2f27813cc913ae659b08728caa43d011f6f60216e2bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AllStereoSpecificProbes</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a013281b33f013bacf84b2f27813cc913a8dde8c9353d4d8ca73378a47c55aa488</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSpectrophore</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>abd9ca37895f990194a80f3a905e6d0ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBSpectrophore</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>aba7f57a4c873cab3ff303725915b38de</anchor>
      <arglist>(const OBSpectrophore &amp;sphore)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBSpectrophore</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a880c2f28f24ea8a7ad9c2ff36e9d1585</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OBSpectrophore &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a8747e24226635b337e2aa3db315e2041</anchor>
      <arglist>(const OBSpectrophore &amp;sphore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetResolution</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>acb311de888c85afb04705d4014b535f2</anchor>
      <arglist>(const double r=3.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccuracy</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a9acdc9b92db043df451152443eb0a4cb</anchor>
      <arglist>(const AccuracyOption a=AngStepSize20)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStereo</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a6dfe61963e72e6a11639dfd05784bcad</anchor>
      <arglist>(const StereoOption s=NoStereoSpecificProbes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalization</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>aeb057393723fb0a0643a17172340c4a6</anchor>
      <arglist>(const NormalizationOption n=NoNormalization)</arglist>
    </member>
    <member kind="function">
      <type>AccuracyOption</type>
      <name>GetAccuracy</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>af91d8e29662e5e17d97e52c3eef5bd4f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetResolution</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>abeee52b93f5cd95825e8d01c48e05810</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>StereoOption</type>
      <name>GetStereo</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a3c5680dc5d120bacb613a858292b7e2a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>NormalizationOption</type>
      <name>GetNormalization</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ab7d546cf34a3f1218f92c6e5efe79cf5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>GetSpectrophore</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a868f68596367d3b45f99bbcc06785394</anchor>
      <arglist>(OpenBabel::OBMol *mol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_getMoleculeData</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a7403ce04c20351989b9234f0b9f6aa74</anchor>
      <arglist>(OpenBabel::OBMol *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_orient</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a92a665879a5bdd3b5beb394dcf514276</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_getBox</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>abf4077ef3dc45dc13a5820dbf1134b9e</anchor>
      <arglist>(double **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_setBox</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>aae49cbbdf24ef8dd1a3fbe9c4fd600d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_getEnergies</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>af3cb9303ef59df4beaaaf8f00edd025b</anchor>
      <arglist>(double **, double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_initiateSpectrophore</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>adb30f478e336307377d2ecde515c3d10</anchor>
      <arglist>(double *, double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_rotateX</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a0161eba5abcbd0e8218f9fb68a450525</anchor>
      <arglist>(double **, double **, const double, const double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_rotateY</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a21c9d09b4a93f96e415baa79b0eb5b04</anchor>
      <arglist>(double **, double **, const double, const double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_rotateZ</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a8433d840ab69c2b71403a9cbd3158ece</anchor>
      <arglist>(double **, double **, const double, const double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_updateSpectrophore</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a5a63888ea3e8d563ef34b6769fd3907b</anchor>
      <arglist>(double *, double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_calculateProperties</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a590797350ad640eba153aaf3b043407d</anchor>
      <arglist>(OpenBabel::OBMol *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_solveMatrix</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a7cc53318f6b640ffeffa4770c49d4c5e</anchor>
      <arglist>(double **, double *, unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_luDecompose</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a40222dcd3279681bde395d7f661779db</anchor>
      <arglist>(double **, std::vector&lt; int &gt; &amp;, unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_luSolve</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a9f1928df5b017587bb6c76d10693ff60</anchor>
      <arglist>(double **, std::vector&lt; int &gt; &amp;, double *, unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_swapRows</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a341106e1a4905850d65a13d37252b0b1</anchor>
      <arglist>(double *, unsigned int, unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_swapRows</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a88de97a8b5f1b416f8f16e316b474fb5</anchor>
      <arglist>(double **, unsigned int, unsigned int, unsigned int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_resolution</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a01f1a3d2ca887fbd8faf4dcebe85b07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccuracyOption</type>
      <name>_accuracy</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a0ede48fd8a86570defe153679a613fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StereoOption</type>
      <name>_stereoFlag</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>aeade45ed1eb343ac1088b1659179b76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NormalizationOption</type>
      <name>_normalization</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>abbbcccc8727c937713e1059e4403fb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>_rotationStepList</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a118d84107081d0de65ae0d067546e849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_nAtoms</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a8578c572fe09a8a64ea25f1a55c03b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>_property</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>ac5864d04009783986b19864d5b1a06c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_radii</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a5ed0aa70f1b3fbd45c2d035b1d6d7659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>_oricoor</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a5d1db457cd180ebf42b81c2e14ba6f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>_coor</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a70b9b34ddee25fa85f170a53ad191412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_beginProbe</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a8ddce3e54b41565295c0c598fe5cbcab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_endProbe</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a074d6d2acb6953ca8cb162e9496078ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_numberOfProbes</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a20dbaa0e96f2241c92e627142c27e723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_spectro</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a93528a44adc727a6f4e81b7612d6fc7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct OpenBabel::OBSpectrophore::@13</type>
      <name>_probe</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a8ad13506e19ecf726ffac6693fa00f5b</anchor>
      <arglist>[48]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>structOpenBabel_1_1OBSpectrophore_1_1@13.html</anchorfile>
      <anchor>a2631901a008eacea5a8464dfb1c5faf7</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct OpenBabel::OBSpectrophore::@14</type>
      <name>_boxPoint</name>
      <anchorfile>classOpenBabel_1_1OBSpectrophore.html</anchorfile>
      <anchor>a62ddf6825047ce926af291ba22dbbd61</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structOpenBabel_1_1OBSpectrophore_1_1@14.html</anchorfile>
      <anchor>af88b946fb90d5f08b5fb740c70e98c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structOpenBabel_1_1OBSpectrophore_1_1@14.html</anchorfile>
      <anchor>ab927965981178aa1fba979a37168db2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>structOpenBabel_1_1OBSpectrophore_1_1@14.html</anchorfile>
      <anchor>ab3e6ed577a7c669c19de1f9c1b46c872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>v</name>
      <anchorfile>structOpenBabel_1_1OBSpectrophore_1_1@14.html</anchorfile>
      <anchor>a0f3dbf2f81636d56737490977a67f3b2</anchor>
      <arglist>[N_PROPERTIES]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBText</name>
    <filename>classOpenBabel_1_1OBText.html</filename>
    <base>OpenBabel::OBBase</base>
    <member kind="function">
      <type></type>
      <name>OBText</name>
      <anchorfile>classOpenBabel_1_1OBText.html</anchorfile>
      <anchor>a97a5fa01d30a0d991fea41e2478acc54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBText</name>
      <anchorfile>classOpenBabel_1_1OBText.html</anchorfile>
      <anchor>a9d3a901e509f984a752f7d978214e437</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetText</name>
      <anchorfile>classOpenBabel_1_1OBText.html</anchorfile>
      <anchor>a1af3f7fd8b95cc66e7599caca454f8ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetText</name>
      <anchorfile>classOpenBabel_1_1OBText.html</anchorfile>
      <anchor>ab143590b7787d3410e15294b771bf37e</anchor>
      <arglist>(std::string::size_type &amp;pos, bool ToInsertOnly=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetText</name>
      <anchorfile>classOpenBabel_1_1OBText.html</anchorfile>
      <anchor>a8008c108280948ebd79830f222068455</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Clear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ad12fd937da5f4b0c4562888252fe214b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBBase *</type>
      <name>DoTransformations</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>abdc8ffeb0749b563e1108a9ceaa0b394</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; *, OBConversion *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>CastAndClear</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a305f9b75226a0e4d51c769e3a7dd6f13</anchor>
      <arglist>(bool clear=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6726eb1601555e8e7d712c43416e6af7</anchor>
      <arglist>(bool replaceNewlines=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetTitle</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a366c8a142b8c16554597e82320dfd0e0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a86dd58fc1da5652d70e823fa77cc1637</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a01b429ffcaf47cf265acd439ed2faca0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6cb103f12f49d86132ece200000da830</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a797e5b4d20b6233062d2fdba78a08e06</anchor>
      <arglist>(unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>ab586df65e3f115b69510820b34098ce9</anchor>
      <arglist>(OBGenericData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aaf61a3ecb8f2926aaf117299388d43c2</anchor>
      <arglist>(std::vector&lt; OBGenericData * &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DeleteData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa068a2a7b64d2ee73aedb8c6e3cf0c4c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>adb6b0ec89bfea783825b3b466e4dbc00</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloneData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa6f692332837387535e337413d0100de</anchor>
      <arglist>(OBGenericData *d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>DataSize</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a69c3286ed127949ba747afcc5b9a514a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aee672d91b694547fb072fdaa8e03cfe9</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a22f0eade8b5924eec28ad50f0ce2031f</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a483b277678a8ca48998742c80985fd0b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt; &amp;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a90a551ff0a0ed3fa58745dff0ecacdaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>aa959146c3f7b458009dc04f61b5a2e7f</anchor>
      <arglist>(DataOrigin source)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>GetAllData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>afb56decc1b824c9fad980fc22e1d778c</anchor>
      <arglist>(const unsigned int type)</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>BeginData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a15b47c65393d46fde62d1f0a19bcf9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBDataIterator</type>
      <name>EndData</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a117c836710dd3aaa8748509262a5c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>a6bb6ed5c064e3957d8dd03aba51e61f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OBGenericData * &gt;</type>
      <name>_vdata</name>
      <anchorfile>classOpenBabel_1_1OBBase.html</anchorfile>
      <anchor>af7811cf8aadbf3b3477c560b0ef2f797</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::DeleteObject</name>
    <filename>structOpenBabel_1_1DeleteObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structOpenBabel_1_1DeleteObject.html</anchorfile>
      <anchor>ab1ff9797d8c38fdc101f56aad356c996</anchor>
      <arglist>(const T *ptr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAtomTyper</name>
    <filename>classOpenBabel_1_1OBAtomTyper.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBAtomTyper</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>a61b00ef5e57c1e79aa59eb0b484f6ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBAtomTyper</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>a3f3266f8b50fe9624c1ae700ba3bd632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignHyb</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>ae773554c61c3b4f4c855ead5bec93ee6</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignTypes</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>ad7c6f09e6720f6041c81097b407d0961</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignImplicitValence</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>a86b4345447c96d52bd0f44557729d285</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CorrectAromaticNitrogens</name>
      <anchorfile>classOpenBabel_1_1OBAtomTyper.html</anchorfile>
      <anchor>a0d8f018cbaaa9d313b45e468f77afea2</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAromaticTyper</name>
    <filename>classOpenBabel_1_1OBAromaticTyper.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBAromaticTyper</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>aea2f134780d085773f633cd27f1a0916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBAromaticTyper</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>a120c7e77d9c2de69099a705700277b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignAromaticFlags</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>a5efe4ccada855f2e0c4b0f57614f8607</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PropagatePotentialAromatic</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>aad45f9f1cd93fdef9c658091f034cce5</anchor>
      <arglist>(OBAtom *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SelectRootAtoms</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>a0c70c9a0eec26db77fb26931fafab63b</anchor>
      <arglist>(OBMol &amp;, bool avoidInnerRingAtoms=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExcludeSmallRing</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>a5230bf1636e0f8f7f3113bb335123558</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckAromaticity</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>a52c124d41a6d5324d9ec6eb2c6faab87</anchor>
      <arglist>(OBAtom *root, int searchDepth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TraverseCycle</name>
      <anchorfile>classOpenBabel_1_1OBAromaticTyper.html</anchorfile>
      <anchor>a68ba77b0a1443e9e7276e3e97e16893c</anchor>
      <arglist>(OBAtom *root, OBAtom *atom, OBBond *prev, std::pair&lt; int, int &gt; &amp;er, int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBRingTyper</name>
    <filename>classOpenBabel_1_1OBRingTyper.html</filename>
    <base>OpenBabel::OBGlobalDataBase</base>
    <member kind="function">
      <type></type>
      <name>OBRingTyper</name>
      <anchorfile>classOpenBabel_1_1OBRingTyper.html</anchorfile>
      <anchor>aabd9abe982bb898f565cc1435583da93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBRingTyper</name>
      <anchorfile>classOpenBabel_1_1OBRingTyper.html</anchorfile>
      <anchor>a438b5dde00ad78eda5f23166c6b2eb33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseLine</name>
      <anchorfile>classOpenBabel_1_1OBRingTyper.html</anchorfile>
      <anchor>ae59fef8af62e52629bf2576e34a26801</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetSize</name>
      <anchorfile>classOpenBabel_1_1OBRingTyper.html</anchorfile>
      <anchor>aab7c531e5ffc5174e57a85e853931534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssignTypes</name>
      <anchorfile>classOpenBabel_1_1OBRingTyper.html</anchorfile>
      <anchor>ad7c6f09e6720f6041c81097b407d0961</anchor>
      <arglist>(OBMol &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a1e3b6d38df0786ccf7f938d60e386aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetReadDirectory</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a49002f92ad6a1c71d7f9148271770b7a</anchor>
      <arglist>(char *dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnvironmentVariable</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2bd0630d27e20f38de4c753ca68e2282</anchor>
      <arglist>(char *var)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_init</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a40756214f69d1c40ad70b64ae9fdc08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_dataptr</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a45a08560f2b4885250c586c550f2d7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_filename</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a895aefe990ffe9af66bb5cd4e37d3579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_dir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a2c2f62a9907553e5feb1ecef65c6c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_subdir</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a5d93159b6eee0cb302451621106f61c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_envvar</name>
      <anchorfile>classOpenBabel_1_1OBGlobalDataBase.html</anchorfile>
      <anchor>a87d06c3aed77fb9e118b337bed557928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::XMLConversion</name>
    <filename>classOpenBabel_1_1XMLConversion.html</filename>
    <base>OpenBabel::OBConversion</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, XMLBaseFormat * &gt;</type>
      <name>NsMapType</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a6fbcab1e9ed906780aa61cba35c3744a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XMLConversion</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a88492ed87e2bb55fa507a811230aa843</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XMLConversion</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>aac1b603c1695a1a41ebbeaa3fd398e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetupReader</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a59c32b70bb5bf6ee27b0611920d5afde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetupWriter</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>af91d68d5aff24430ababf0a5d847b9cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadXML</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>ad107b052021a4cd6976288dc3d9d797b</anchor>
      <arglist>(XMLBaseFormat *pFormat, OBBase *pOb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SkipXML</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>ae5615879f0acad951ce4c86dca89d328</anchor>
      <arglist>(const char *ctag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLast</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a0cc38e7988805424c15d68f5444a2a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetOutputIndex</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a162677bee472136c7078735ac5a3142b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlTextReaderPtr</type>
      <name>GetReader</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a6aae68e56f624f6e485930b8c9532c21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>xmlTextWriterPtr</type>
      <name>GetWriter</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a8caa6e4b2d72f14392c800bdb6fa28cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputToStream</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a4964d8defcb0f638a51963d436188f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LookForNamespace</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a82425091d5dc3a7becda24e6cd3d13db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>ad465787fba2c11cf2574fb3d142460b5</anchor>
      <arglist>(const char *attrname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetContent</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a81f0e81929276d8fa2d28af1bc47960c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetContentInt</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a5717310e3e50ca47144910f9968d2011</anchor>
      <arglist>(int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetContentDouble</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a7b14e97eab5859b8a02cd97abfc7e860</anchor>
      <arglist>(double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyOptions</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6af42ed37c470cee546f3aa160a363d4</anchor>
      <arglist>(OBConversion *pSourceConv, Option_type typ=ALL)</arglist>
    </member>
    <member kind="function">
      <type>std::istream *</type>
      <name>GetInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a5905ca0af771ee5a83ebd496f02e8ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>GetOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a751641ec702413ddf9fb86e24fe6da80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>abe2cafdff8bf62ae36fbbfca3eb836bf</anchor>
      <arglist>(std::istream *pIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7520c6b17b3cf9c506738794baab99b1</anchor>
      <arglist>(std::ostream *pOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInAndOutFormats</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4c751472f8bdb864b85cce430d42cc55</anchor>
      <arglist>(const char *inID, const char *outID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInAndOutFormats</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acfab2829e6d00f79be0de3124fbbb157</anchor>
      <arglist>(OBFormat *pIn, OBFormat *pOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a58e81dd6fcba14828db82a9782e5cff9</anchor>
      <arglist>(const char *inID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a507df3dbfec4b9201387e70ef71fe8de</anchor>
      <arglist>(OBFormat *pIn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a83e966b4442ea826a28b2cd55206e195</anchor>
      <arglist>(const char *outID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ae5b218e7427f7806d69356986e296160</anchor>
      <arglist>(OBFormat *pOut)</arglist>
    </member>
    <member kind="function">
      <type>OBFormat *</type>
      <name>GetInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aed42a5004f6ba5522bb59ce13467a951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBFormat *</type>
      <name>GetOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>afd4dc6481ea2d1d95e2cd04b1643fb8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetInFilename</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7f988979d62a5d63e85a294d826e1c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::streampos</type>
      <name>GetInPos</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab54ab5100f5418bc0ba174da74b72d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>GetInLen</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acc7cbe1da68663d0d507de6da778d3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetTitle</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6bb30b86d787d86839e457c1ce1f569b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBConversion *</type>
      <name>GetAuxConv</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a8e3fd39dd67cdd120890d37f0f196bda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAuxConv</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a53a1041e7803e63b9bca06ad18bea4fe</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetSupportedInputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a137c540357b45e73f65e602e1196eed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetSupportedOutputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a353b3a6a53808b22361c9f44713978e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Convert</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acc3cc99e2ff0113c9ca6a64f3de71300</anchor>
      <arglist>(std::istream *is, std::ostream *os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Convert</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a95c512f009bf277d9d6299d9f5d0c13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FullConvert</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9d12b0f7f38951d2d1065fc7ddae4229</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;FileList, std::string &amp;OutputFileName, std::vector&lt; std::string &gt; &amp;OutputFileList)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AddChemObject</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a342df96ba3cd8751e19758939dbef2f5</anchor>
      <arglist>(OBBase *pOb)</arglist>
    </member>
    <member kind="function">
      <type>OBBase *</type>
      <name>GetChemObject</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a17bfbe7570517993bcfcb1916bd437d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFirstInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>af5f16d80b577c580920f0c5b8abd5973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFirstInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab94b09151245e8c6accfc418a866d329</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetOutputIndex</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ad44eaf0b472408acb158334c8725d339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOutputIndex</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7037cb9de4584f498b0099b7584bdc97</anchor>
      <arglist>(int indx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMoreFilesToCome</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a38d59749ba2add8597210717e804e4db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOneObjectOnly</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4dacf92f4f0cbf7a1f269143659ceb88</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLast</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a19dedcd05ee3ab11ed85c29ff1fef810</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLastFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac157f0eb86dba757b3ebae08ffffb8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCount</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aea550de4e59eeb0d4ccf450608a3c915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NsMapType &amp;</type>
      <name>Namespaces</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>ab188d28fc6fab286f1b4ff18c0a81ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterXMLFormat</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a09777c99e10d28476c0c920dd784a235</anchor>
      <arglist>(XMLBaseFormat *pFormat, bool IsDefault=false, const char *uri=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XMLConversion *</type>
      <name>GetDerived</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a482fc8135a5ecf62b88f7e5348e62fbf</anchor>
      <arglist>(OBConversion *pConv, bool ForReading=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XMLBaseFormat *</type>
      <name>GetDefaultXMLClass</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a2edcc253b10dd0b9f5e1b600a1dc24e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ReadStream</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a499db0113e7e419a0488316e2c51ca05</anchor>
      <arglist>(void *context, char *buffer, int len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WriteStream</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>a2dcb149cda158829b4bd51979532798a</anchor>
      <arglist>(void *context, const char *buffer, int len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>RegisterFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a20a0d20f46d3b003d99d1f5822c2037d</anchor>
      <arglist>(const char *ID, OBFormat *pFormat, const char *MIME=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FindFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a8b0f5849719757fa2e79289e4dc486b5</anchor>
      <arglist>(const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FindFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a44ef357c6e36a5e510feb0b0ce20f5f0</anchor>
      <arglist>(const std::string ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromExt</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3f85a8c30f5c913e08225f85c6bc020b</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromExt</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1e4d4ce20eb43effa105dc25b95050ef</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromMIME</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aca0c09ee719aba9da34cb281aa0db6a5</anchor>
      <arglist>(const char *MIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>GetNextFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>af0bee894a9ed7ca61637452dc2e264f2</anchor>
      <arglist>(Formatpos &amp;itr, const char *&amp;str, OBFormat *&amp;pFormat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a26b5cfc6a9011d19d78dae56d31296eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_SkipNextRead</name>
      <anchorfile>classOpenBabel_1_1XMLConversion.html</anchorfile>
      <anchor>afecc511417086050a7506ca632546cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>OPAMapType</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9df37d33062bde3400dd034ee7feaa92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FilteringInputStreambuf&lt; LineEndingExtractor &gt;</type>
      <name>LErdbuf</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9afd81920e33981863bf186f78a222d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SetStartAndEnd</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a631730a938bc2219b90c027932db3443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>OpenAndSetFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a23aaa3e3be1f55323cd956b53f6b0417</anchor>
      <arglist>(bool SetFormat, std::ifstream *is, std::stringstream *ss=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OPAMapType &amp;</type>
      <name>OptionParamArray</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3b2ad8335b0a9b18bc22bc534b7ffb28</anchor>
      <arglist>(Option_type typ)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>LoadFormatFiles</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acb5fa3f38f036bd82ba49a44d6b7a998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>InFilename</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a20354c0458b4e08dc62db4a4e8717c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::istream *</type>
      <name>pInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab965c6baeb6893dd15a2fefefce795df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>pOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aefeab37b3ca85a70cef740bb1636b353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBFormat *</type>
      <name>pInFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a70c004d49155986bcc163bac07df0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBFormat *</type>
      <name>pOutFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4d630735f21540de237cdcc32916bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>OptionsArray</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3d9e064f9e26ed2e52b140b7cc34a8d6</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a075e1e3c9dd399cef584d7338cc37938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>StartNumber</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac52d6fdbe254370662cccd43af0248f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>EndNumber</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>adb31d46cbf6e64e86bae6d24d90c9702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Count</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aad462966ed963f892117056de1eba502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsFirstInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ae14ad56a72461f3c598cb4dbd151cdc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_IsLast</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6025251d18641dab4058222b69d1a98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>MoreFilesToCome</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab4ec386870233b42d353a4d66d7b0cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>OneObjectOnly</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7002deaca76f3fc235c76be1fcc38dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReadyToInput</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a9bdd5c815677e240cec9c2e4a71d73f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>CheckedForGzip</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ae0c8e3d58dc0c0d9713ca7a7d27b8c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>NeedToFreeInStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a778a4d8f719010ac4adf6af2363af0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>NeedToFreeOutStream</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a96fc7fb023ad66073434a206829c23bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LErdbuf *</type>
      <name>pLineEndBuf</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab3b665dec523e9a63f1dc954900211ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBBase *</type>
      <name>pOb1</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a20a1d62cb932144d66e52d7c823fb0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::streampos</type>
      <name>wInpos</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab77068f3bb4cb88694a6be653c00f04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::streampos</type>
      <name>rInpos</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a545a1341008a23c2dd0721c164a9ad89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>wInlen</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>afee7e5bffccd262faaff0417e5ae9af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>rInlen</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1a897c3f35235e4ca7da37ca245db065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBConversion *</type>
      <name>pAuxConv</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3846aa2ce719d5820b66e302c6aeaa8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>SupportedInputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a2322eb2aa14e8d954573abbda9c50e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>SupportedOutputFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a50233a5c7c63d03056923f13c7acbb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static OBFormat *</type>
      <name>pDefaultFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a2daf6d1435032c73c65000af61a4a5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>FormatFilesLoaded</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a501b1ec0c0e4fe9e78398e3837a759ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Option_type</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INOPTIONS</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116a291d3d898fa3e1258eef693d56d600d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTOPTIONS</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENOPTIONS</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116acfa24b0443c8420ac7fdf5eb009352b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aa5c5a0aac29d9e705d9b7b7b8aeb8116ab1d5eac4b1dca480c8056eaea7663b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>IsOption</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ab3d2674da23d09868ffedf551abbce0c</anchor>
      <arglist>(const char *opt, Option_type opttyp=OUTOPTIONS)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::string &gt; *</type>
      <name>GetOptions</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7da66ef30fd0af867e9d3bd0df15f4a2</anchor>
      <arglist>(Option_type opttyp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddOption</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a8ad01448cb4d5237ed5f3d8eeaf39804</anchor>
      <arglist>(const char *opt, Option_type opttyp=OUTOPTIONS, const char *txt=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RemoveOption</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a82f1d6a21880f898673f8a1b45d15eee</anchor>
      <arglist>(const char *opt, Option_type optype)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOptions</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ac07772684eade5d0d11b8979f0772cf5</anchor>
      <arglist>(const char *options, Option_type opttyp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RegisterOptionParam</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a6a45eddab233711eb4e432ed5657358f</anchor>
      <arglist>(std::string name, OBFormat *pFormat, int numberParams=0, Option_type typ=OUTOPTIONS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetOptionParams</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1042e860531f4961b3b0245e9a92f4a7</anchor>
      <arglist>(std::string name, Option_type typ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Write</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3d46d682999a7772db31a835fa4a8091</anchor>
      <arglist>(OBBase *pOb, std::ostream *pout=NULL)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>WriteString</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a18ce8681792d689dab8172a511c5a996</anchor>
      <arglist>(OBBase *pOb, bool trimWhitespace=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>ad17f0a96643dec6840eda76c07a54698</anchor>
      <arglist>(OBBase *pOb, std::string filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CloseOutFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>acbe5bd25f0afb1c8cd622e41e61ebc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Read</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1204f9b613067a04ebfe881a58775918</anchor>
      <arglist>(OBBase *pOb, std::istream *pin=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadString</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a93558e9c89cda2e1a4f9fb2cadc5c8d1</anchor>
      <arglist>(OBBase *pOb, std::string input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadFile</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a76d7d1bf8e0c05c19d5b5e991fd0ba2f</anchor>
      <arglist>(OBBase *pOb, std::string filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OpenInAndOutFiles</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a7424c6fe9292f59087d23e7748ac237e</anchor>
      <arglist>(std::string infilepath, std::string outfilepath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReportNumberConverted</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a1717ba1ed3f8131d7a0f3b0d6031f5af</anchor>
      <arglist>(int count, OBFormat *pFormat=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumInputObjects</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>aea0a1d956ad2f87302924423930c793b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>GetDefaultFormat</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a442b17995d84d654e33ede11a63d7f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>BatchFileName</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a4eb6eac5855fb3289c5a438d4084a052</anchor>
      <arglist>(std::string &amp;BaseName, std::string &amp;InFile)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>IncrementedFileName</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a44fbee02afc6de6a9f98bbbb6a2e12bf</anchor>
      <arglist>(std::string &amp;BaseName, const int Count)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>CheckForUnintendedBatch</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a39b6cebdf53672368cfa3edd8bc7740d</anchor>
      <arglist>(const std::string &amp;infile, const std::string &amp;outfile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InstallStreamFilter</name>
      <anchorfile>classOpenBabel_1_1OBConversion.html</anchorfile>
      <anchor>a3222302075fbfcfe842ebd0b984a4406</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::XMLBaseFormat</name>
    <filename>classOpenBabel_1_1XMLBaseFormat.html</filename>
    <base>OpenBabel::OBFormat</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XMLBaseFormat</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a429ba96990b23caaca913a23345f3793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>NamespaceURI</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ab3d80dde715e0505ef1818a621ecd888</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DoElement</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a6b007f43192f527944eef5136e4b2703</anchor>
      <arglist>(const std::string &amp;ElName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>EndElement</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a0e59feda5d3eb85765b53cf4b42f77ef</anchor>
      <arglist>(const std::string &amp;ElName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>EndTag</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ad2f75af8aac19e5c3c48dc26c1fa319c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1e309febfaef70cc3c8d98afc1540931</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadChemObject</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a6044ced825a2a83b7cfe7c45eea63c99</anchor>
      <arglist>(OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a663171ec9788e2d1621d374848b3888b</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteChemObject</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a5ea5d9623cd9594549a52e116caecaa2</anchor>
      <arglist>(OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ab87525f269e7819d8462f450d30d56a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TargetClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1870e0d80a223ef4e1661be80029dbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::type_info &amp;</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a73f632a573cbbfecf9e00f04c5ce73e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>SpecificationURL</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1d3a8785a0ad0c85b98fa3406a64d50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetMIMEType</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0e10219d8aedefa78ef16fc7fded85ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>Flags</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a94a94537cc5ba96b1876db1b612b91a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBFormat *</type>
      <name>MakeNewInstance</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0924b1a442d147fa036bff23a4cf04ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterFormat</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a47a434f63a789f142966304e35aa6952</anchor>
      <arglist>(const char *ID, const char *MIME=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromMIME</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>aca0c09ee719aba9da34cb281aa0db6a5</anchor>
      <arglist>(const char *MIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>xmlTextReaderPtr</type>
      <name>reader</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a9d9e2a08b0659f0bc93d3eb7eaf8f05d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>xmlTextWriterPtr</type>
      <name>writer</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a9569f81d2916200422a7927572913336</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OutputToStream</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a4964d8defcb0f638a51963d436188f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>SkipObjects</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>adfcd8e84805c262d8cbca79a83f9d4cc</anchor>
      <arglist>(int n, OBConversion *pConv)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XMLConversion *</type>
      <name>_pxmlConv</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ab50420582d1794a71702ae17e176dc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_prefix</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a5fd9fbe1a6ecd9798543ec2a55c472a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>baseindent</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a5e2c3ec36cd04bac7ecad43b9f5501a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ind</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a4b00721003b8d35559a55c9098ff36c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nsdecl</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a8000c477c493f1dc954e8a538ae6fda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_embedlevel</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ac0224265e7d214b7ed98e091fe559c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::XMLMoleculeFormat</name>
    <filename>classOpenBabel_1_1XMLMoleculeFormat.html</filename>
    <base>OpenBabel::XMLBaseFormat</base>
    <member kind="typedef">
      <type>std::map&lt; const char *, OBPlugin *, CharPtrLess &gt;</type>
      <name>PluginMapType</name>
      <anchorfile>classOpenBabel_1_1OBPlugin.html</anchorfile>
      <anchor>a0fd3c807ed3341c33070c93b14739bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PluginMapType::const_iterator</type>
      <name>PluginIterator</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga8fac85f5497f873a2dd8734b47f0bdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XMLMoleculeFormat</name>
      <anchorfile>classOpenBabel_1_1XMLMoleculeFormat.html</anchorfile>
      <anchor>ad794fc5cf08a2a6b1e877168bb784e0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadChemObject</name>
      <anchorfile>classOpenBabel_1_1XMLMoleculeFormat.html</anchorfile>
      <anchor>a9acd362b27e30c19a2c870ca71592723</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteChemObject</name>
      <anchorfile>classOpenBabel_1_1XMLMoleculeFormat.html</anchorfile>
      <anchor>a39c2aaf250dde6e85d05ff9357d8b003</anchor>
      <arglist>(OBConversion *pConv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ReadMolecule</name>
      <anchorfile>classOpenBabel_1_1XMLMoleculeFormat.html</anchorfile>
      <anchor>a5a3cd5ffc0d21fe9b95d804c44e7d146</anchor>
      <arglist>(OBBase *pOb, OBConversion *pConv)</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1XMLMoleculeFormat.html</anchorfile>
      <anchor>a54e576034bd51c66256aa6a98f81d644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>NamespaceURI</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ab3d80dde715e0505ef1818a621ecd888</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DoElement</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a6b007f43192f527944eef5136e4b2703</anchor>
      <arglist>(const std::string &amp;ElName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>EndElement</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a0e59feda5d3eb85765b53cf4b42f77ef</anchor>
      <arglist>(const std::string &amp;ElName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>EndTag</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ad2f75af8aac19e5c3c48dc26c1fa319c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>TypeID</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a45db88b29eb37e9dd105bf4032e421d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>WriteMolecule</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a663171ec9788e2d1621d374848b3888b</anchor>
      <arglist>(OBBase *, OBConversion *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Description</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ab87525f269e7819d8462f450d30d56a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>TargetClassDescription</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1870e0d80a223ef4e1661be80029dbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>SpecificationURL</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a1d3a8785a0ad0c85b98fa3406a64d50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>GetMIMEType</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0e10219d8aedefa78ef16fc7fded85ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>Flags</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a94a94537cc5ba96b1876db1b612b91a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBFormat *</type>
      <name>MakeNewInstance</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a0924b1a442d147fa036bff23a4cf04ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RegisterFormat</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>a47a434f63a789f142966304e35aa6952</anchor>
      <arglist>(const char *ID, const char *MIME=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Display</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>ae0859fdbf134af95a8231eb32c73b7db</anchor>
      <arglist>(std::string &amp;txt, const char *param, const char *ID=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBPlugin *</type>
      <name>MakeInstance</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9399e9568ab809d714385f1b237a9335</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Init</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga3e0b39e1326de703012f81ac2be7feba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetID</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga753a34173c6750388d33e5294556790f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PluginMapType &amp;</type>
      <name>GetMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaabc1385cbe63145ffec6edf1f2c3be98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBFormat *</type>
      <name>FormatFromMIME</name>
      <anchorfile>classOpenBabel_1_1OBFormat.html</anchorfile>
      <anchor>aca0c09ee719aba9da34cb281aa0db6a5</anchor>
      <arglist>(const char *MIME)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OBPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga295dc7f1b94da710821c562bff3e7c97</anchor>
      <arglist>(const char *Type, const char *ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ListAsVector</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaf95953a5793333ba51e978c4a0a00103</anchor>
      <arglist>(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9fabfd2513038ae6ac475ac0ff2c73cd</anchor>
      <arglist>(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>ListAsString</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gaba22c5352d36c7f058299af7ddffb03e</anchor>
      <arglist>(const char *PluginID, const char *param=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>FirstLine</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga84fc973fdf4bba5a6b0e2d402077991c</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>Begin</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1d4d73999ab0518ee471c635bd0a7e87</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginIterator</type>
      <name>End</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga9a330280c1cd2e7119dac87a6fd0b762</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>xmlTextReaderPtr</type>
      <name>reader</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a9d9e2a08b0659f0bc93d3eb7eaf8f05d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>xmlTextWriterPtr</type>
      <name>writer</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a9569f81d2916200422a7927572913336</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>OutputToStream</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a4964d8defcb0f638a51963d436188f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>SkipObjects</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>adfcd8e84805c262d8cbca79a83f9d4cc</anchor>
      <arglist>(int n, OBConversion *pConv)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>PluginMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gac40457336d7b12bb632b4ac4e8955a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PluginMapType &amp;</type>
      <name>GetTypeMap</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>gadfcf9fda27cfbc4301fc94517a4250ef</anchor>
      <arglist>(const char *PluginID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OBPlugin *</type>
      <name>BaseFindType</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1e58b1811ec8c1b88254ee46ccef0b78</anchor>
      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OBMol *</type>
      <name>_pmol</name>
      <anchorfile>classOpenBabel_1_1XMLMoleculeFormat.html</anchorfile>
      <anchor>ae286ac3ecc365473ace5c0da2c656ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XMLConversion *</type>
      <name>_pxmlConv</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ab50420582d1794a71702ae17e176dc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_prefix</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a5fd9fbe1a6ecd9798543ec2a55c472a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>baseindent</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a5e2c3ec36cd04bac7ecad43b9f5501a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ind</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a4b00721003b8d35559a55c9098ff36c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>nsdecl</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>a8000c477c493f1dc954e8a538ae6fda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_embedlevel</name>
      <anchorfile>classOpenBabel_1_1XMLBaseFormat.html</anchorfile>
      <anchor>ac0224265e7d214b7ed98e091fe559c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_id</name>
      <anchorfile>group__plugins.html</anchorfile>
      <anchor>ga1f8d25dafb0bc13814ca451035f67955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBAlign</name>
    <filename>classOpenBabel_1_1OBAlign.html</filename>
    <member kind="function">
      <type></type>
      <name>OBAlign</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a2bc7af7892ce336cbeb8a6295823a150</anchor>
      <arglist>(bool includeH=false, bool symmetry=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAlign</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a50daf56049eaa97c3159bceca10d5886</anchor>
      <arglist>(const OBMol &amp;refmol, const OBMol &amp;targetmol, bool includeH=false, bool symmetry=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBAlign</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>afe0c5f1d18b1dd06c009eb59213412d7</anchor>
      <arglist>(const vector&lt; vector3 &gt; &amp;ref, const vector&lt; vector3 &gt; &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRef</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a7909c3a4140da2417bd5e35d02afa272</anchor>
      <arglist>(const vector&lt; vector3 &gt; &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a44c3cb229020cd0d2270cb63b6251650</anchor>
      <arglist>(const vector&lt; vector3 &gt; &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRefMol</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>ac56e2c2ffd9fdf7448b3bda78cdc9549</anchor>
      <arglist>(const OBMol &amp;refmol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTargetMol</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a2a325b0a2af5bbc3511c6f536e686e21</anchor>
      <arglist>(const OBMol &amp;targetmol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Align</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a946a73d3de978fd930793711f23e00b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRMSD</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a060c746a125272a535ec8f6b59f5338a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>GetRotMatrix</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a53e6707da019dfa88df1e8c1aeeb6f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; vector3 &gt;</type>
      <name>GetAlignment</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a6a9ca08185bebf3307c4a1acd31e58c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpdateCoords</name>
      <anchorfile>classOpenBabel_1_1OBAlign.html</anchorfile>
      <anchor>a3748ab33ffd81acda5060963bdae971a</anchor>
      <arglist>(OBMol *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::matrix3x3</name>
    <filename>classOpenBabel_1_1matrix3x3.html</filename>
    <member kind="function">
      <type></type>
      <name>matrix3x3</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a02fbfa24687cc574a29a8d1c0ff0a2db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matrix3x3</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ac0461afe3f76b83a10fe99fac330f702</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matrix3x3</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a4736c0c51dc08725c39e02a84c2390ec</anchor>
      <arglist>(vector3 row1, vector3 row2, vector3 row3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matrix3x3</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a0a0be9b2cd186a15d56efdaaefa9a994</anchor>
      <arglist>(double d[3][3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~matrix3x3</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a6d3758cd834f7dd0f5c0816231349cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetArray</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a3f648014bbd17f8090159d2d93cbe30c</anchor>
      <arglist>(double *m)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aa6e296b71371e9b9b334dca8c7f3314a</anchor>
      <arglist>(int row, int column) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a59c4092616c1d0ffc2c3e022350ee02d</anchor>
      <arglist>(int row, int column)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>inverse</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a8ef05a892601489ef84e46c0a00bcc41</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>transpose</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a4c534cebd13efb9ac42d39722d85602c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomRotation</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aff25b8b63c0aec5f2c83d0cb70ae55cb</anchor>
      <arglist>(OBRandom &amp;rnd)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a390024ffecb7973f5de3194dc2f606f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a17ea6953708a00e57d99aaf52495f62a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ae8249851867ad7b2795614ee2b4f0078</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>af6fefdc3ee1db949d064e63eabb5fdaa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitMatrix</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aa95d7e7bec24e89ad8ff73a47607b1f8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a0aba6c9a55fa03689378594bb58f1ff1</anchor>
      <arglist>(int row, int column) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aae7e56afba0365c34add2d93288995ca</anchor>
      <arglist>(int row, int column, double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColumn</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a39efd7a5999c653b840ac4445b9f86c2</anchor>
      <arglist>(int column, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRow</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ab20b033e3e502ab19ae92f55a9ef2fe2</anchor>
      <arglist>(int row, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetColumn</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a3f43f67cedadf2e178bd338b8ec26231</anchor>
      <arglist>(unsigned int col) const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetRow</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a8e10214c207950dbaec09438c4992a46</anchor>
      <arglist>(unsigned int row) const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a4623ee2f3c5b2b7cc4c2efb081273f62</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a56c27ea39208380495f812df6b865289</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetupRotMat</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a99b052f9d6eaea593f20a032679bcc55</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PlaneReflection</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a031b9641f48f7639949cad29a6a99109</anchor>
      <arglist>(const vector3 &amp;norm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotAboutAxisByAngle</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ae2b83cb7b73473405cd57594c88f541c</anchor>
      <arglist>(const vector3 &amp;axis, const double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillOrth</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aeae6ec0ae0d036137c03275be0010878</anchor>
      <arglist>(double alpha, double beta, double gamma, double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>findEigenvectorsIfSymmetric</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a5f09543ae4cdaf031d0adaa0480f2b8c</anchor>
      <arglist>(vector3 &amp;eigenvals) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jacobi</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aeb205a916fa467164e6bdebc62d22e7a</anchor>
      <arglist>(unsigned int n, double *a, double *d, double *v)</arglist>
    </member>
    <member kind="friend">
      <type>friend vector3</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>afa46ab021c49dc30bac7116157793dff</anchor>
      <arglist>(const matrix3x3 &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend matrix3x3</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a35fd56b260acc82508c9bf7e9a710125</anchor>
      <arglist>(const matrix3x3 &amp;, const matrix3x3 &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a0f3e65b4976b2ac7ce2a02b778e5cc71</anchor>
      <arglist>(std::ostream &amp;, const matrix3x3 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::SpaceGroup</name>
    <filename>classOpenBabel_1_1SpaceGroup.html</filename>
    <member kind="function">
      <type></type>
      <name>SpaceGroup</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>aaff95ae977a162888b91b1dd9a385c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpaceGroup</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a6cba611670b2b7c8754242b5f500cdec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHMName</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>aac8bbb3e3c283722a681c012daf6d31d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHMName</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a187cb02cf6cfc7ff146f12940c1ba4a1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHallName</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>ae7455f5d6c96b0ae2e36fc11965c34bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetHallName</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a50e5af834059842019b2383154556856</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetId</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>ac5c8d608f8b5fa8c20b79b2f3780d2ba</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTransform</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>ac6957eacc9ea85e6e67a9d964c6d4ced</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetHMName</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a3e25be88ad9a6307553165a6415bffff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetHallName</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a877504662caba7eeaa68f09cd09cb26d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>GetId</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>add8ee090e8f38e79e0070c0e9628631e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; vector3 &gt;</type>
      <name>Transform</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a80fb04724ecd70b729587ee43c1abcdb</anchor>
      <arglist>(const vector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>transform3d const *</type>
      <name>BeginTransform</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a2184b65fc53b32419db806ed2449b962</anchor>
      <arglist>(transform3dIterator &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>transform3d const *</type>
      <name>NextTransform</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a45ec8285906cb116a67fc53aa9c51d6b</anchor>
      <arglist>(transform3dIterator &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RegisterSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a3053a7c0ada34598119f6768fdad5138</anchor>
      <arglist>(int nb=0,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a6afbc6571b954abe4df4011708dc8aae</anchor>
      <arglist>(const SpaceGroup &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>ac8fd6a9c5f8df50ac3a9665b8b075f1e</anchor>
      <arglist>(const SpaceGroup &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>afa8720abaf6972d6dac22a8cd1a67225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SpaceGroup *</type>
      <name>GetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a2787ce8a302b665bc4f059670f2e68ca</anchor>
      <arglist>(char const *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SpaceGroup *</type>
      <name>GetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a95a213aecae334a88a385c647318361e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SpaceGroup *</type>
      <name>GetSpaceGroup</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>a2c9e8975976f2e714078943728a800c5</anchor>
      <arglist>(unsigned id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SpaceGroup *</type>
      <name>Find</name>
      <anchorfile>classOpenBabel_1_1SpaceGroup.html</anchorfile>
      <anchor>adc5179fa55c4d176d458cadb7ffd2afe</anchor>
      <arglist>(SpaceGroup *group)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::transform3d</name>
    <filename>classOpenBabel_1_1transform3d.html</filename>
    <base protection="private">OpenBabel::matrix3x3</base>
    <base protection="private">OpenBabel::vector3</base>
    <member kind="function">
      <type></type>
      <name>transform3d</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a0a78f8c2d77f9ca68c328cff6d46c610</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transform3d</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a5d5c44a104265517860c9d695f03c3d7</anchor>
      <arglist>(const matrix3x3 &amp;m, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transform3d</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a1ec90e69b3b2684b37773c15907b1fe0</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transform3d</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a272c7ae3e0b8547a31f5c68ec2a43710</anchor>
      <arglist>(vector3 row1, vector3 row2, vector3 row3, vector3 translation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>transform3d</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a4748a71890565072e61ed711ad218a38</anchor>
      <arglist>(double d[3][3], double t[3])</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>ad53972b9afccbbef0c751aa18c7638a6</anchor>
      <arglist>(const vector3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>transform3d</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a927d755c68f6bfa3d8992b03b2eac87a</anchor>
      <arglist>(const transform3d &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DescribeAsString</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>a9bb44f139e6e940c62099ee80a0c378f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>DescribeAsValues</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>acf566ebca6ac366d1a218dce31a67ab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>classOpenBabel_1_1transform3d.html</anchorfile>
      <anchor>af279e0f0ff720ee54d6733674dfda50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetArray</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a3f648014bbd17f8090159d2d93cbe30c</anchor>
      <arglist>(double *m)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aa6e296b71371e9b9b334dca8c7f3314a</anchor>
      <arglist>(int row, int column) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a59c4092616c1d0ffc2c3e022350ee02d</anchor>
      <arglist>(int row, int column)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>inverse</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a8ef05a892601489ef84e46c0a00bcc41</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>transpose</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a4c534cebd13efb9ac42d39722d85602c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomRotation</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aff25b8b63c0aec5f2c83d0cb70ae55cb</anchor>
      <arglist>(OBRandom &amp;rnd)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a390024ffecb7973f5de3194dc2f606f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a17ea6953708a00e57d99aaf52495f62a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ae8249851867ad7b2795614ee2b4f0078</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>af6fefdc3ee1db949d064e63eabb5fdaa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitMatrix</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aa95d7e7bec24e89ad8ff73a47607b1f8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a0aba6c9a55fa03689378594bb58f1ff1</anchor>
      <arglist>(int row, int column) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aae7e56afba0365c34add2d93288995ca</anchor>
      <arglist>(int row, int column, double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColumn</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a39efd7a5999c653b840ac4445b9f86c2</anchor>
      <arglist>(int column, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRow</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ab20b033e3e502ab19ae92f55a9ef2fe2</anchor>
      <arglist>(int row, const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetColumn</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a3f43f67cedadf2e178bd338b8ec26231</anchor>
      <arglist>(unsigned int col) const </arglist>
    </member>
    <member kind="function">
      <type>vector3</type>
      <name>GetRow</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a8e10214c207950dbaec09438c4992a46</anchor>
      <arglist>(unsigned int row) const </arglist>
    </member>
    <member kind="function">
      <type>matrix3x3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a4623ee2f3c5b2b7cc4c2efb081273f62</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a56c27ea39208380495f812df6b865289</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetupRotMat</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a99b052f9d6eaea593f20a032679bcc55</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PlaneReflection</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a031b9641f48f7639949cad29a6a99109</anchor>
      <arglist>(const vector3 &amp;norm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotAboutAxisByAngle</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>ae2b83cb7b73473405cd57594c88f541c</anchor>
      <arglist>(const vector3 &amp;axis, const double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FillOrth</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aeae6ec0ae0d036137c03275be0010878</anchor>
      <arglist>(double alpha, double beta, double gamma, double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>matrix3x3</type>
      <name>findEigenvectorsIfSymmetric</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a5f09543ae4cdaf031d0adaa0480f2b8c</anchor>
      <arglist>(vector3 &amp;eigenvals) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a685349dbc9e2d99a19616763811cbfba</anchor>
      <arglist>(const double inX, const double inY, const double inZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>abfcb3c965a12bd0385f1fe1db3f7d3ac</anchor>
      <arglist>(const double *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetX</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab7cbeb9d9ec3d0d2714733d8bb4596eb</anchor>
      <arglist>(const double inX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetY</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a385f2320a91b6c182ecb45d16ffc6332</anchor>
      <arglist>(const double inY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetZ</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad1ac74f918d5ac48cb47426ca9ba2c09</anchor>
      <arglist>(const double inZ)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetX</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a140fe887c529e7b90eae3de197e8ceb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetY</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a7e0e3acd8a6e4016522b9cdbc8f5aeb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZ</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a885f0eb530803b77acf8ac2055c59ee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a9345053a16ce83e130dc098fddf9af7a</anchor>
      <arglist>(double *c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a4803abb2beda3b528c9db7046fa96141</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>AsArray</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a72b1c0a136ecdb28fdfa1ec382ccdc41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ae0541be714a6305dd3295655eea746d9</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a506884b50b92a33e92029b43f9b75bc9</anchor>
      <arglist>(const double *f)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ac4b4980ccea5aa5184928ce40cf1acee</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a322635480250ba0c08aa47a125eda3dd</anchor>
      <arglist>(const double *f)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a849fa346bb458a37710cdb8a4f5c085f</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab879d8d94111c53fd9b9013fb9345734</anchor>
      <arglist>(const matrix3x3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab5a7b18eeff279e5d850a9075d09f8a5</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomUnitVector</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>af2f4c0b08630beda575c1c8697b8fece</anchor>
      <arglist>(OBRandom *oeRand=NULL)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>normalize</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a8d0a82a515f8373ee3f174a22f775397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanBeNormalized</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a42a186aba6d262b1ce632ee90fb25e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length_2</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a560382b2b84516f70ca2d406aaee8baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad207cb443e371f73f07e874c504f60c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>x</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>abef0821fe31ac502f2d11718aef50ae3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a3b195b867437acf8de45f48c83e81932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>y</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a60e843e6f8ec7cf8709da2954bd2c202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad927d9808ded1fc49c05ae9e1a3ed2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>z</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ac6512d9d5bc60ad02143f34ba62e010a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>z</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a2134ad02d68f29e9c7cd87e4cd4c75b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a49ed80cbaa997a8f5b5e25ac3610db6f</anchor>
      <arglist>(const vector3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a54bc009d3ca567251114c2a86c7753ff</anchor>
      <arglist>(const vector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a4eb9ee503a7d695dfac88a993256add0</anchor>
      <arglist>(const vector3 &amp;other, const double &amp;precision) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distSq</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>af0bb15d3c00f3ab71314513fa41fa548</anchor>
      <arglist>(const vector3 &amp;vv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createOrthoVector</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab7ad19aad80b487369bcafe789fd8c04</anchor>
      <arglist>(vector3 &amp;v) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>jacobi</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>aeb205a916fa467164e6bdebc62d22e7a</anchor>
      <arglist>(unsigned int n, double *a, double *d, double *v)</arglist>
    </member>
    <member kind="friend">
      <type>friend vector3</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>afa46ab021c49dc30bac7116157793dff</anchor>
      <arglist>(const matrix3x3 &amp;, const vector3 &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend matrix3x3</type>
      <name>operator*</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a35fd56b260acc82508c9bf7e9a710125</anchor>
      <arglist>(const matrix3x3 &amp;, const matrix3x3 &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOpenBabel_1_1matrix3x3.html</anchorfile>
      <anchor>a0f3e65b4976b2ac7ce2a02b778e5cc71</anchor>
      <arglist>(std::ostream &amp;, const matrix3x3 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::vector3</name>
    <filename>classOpenBabel_1_1vector3.html</filename>
    <member kind="function">
      <type></type>
      <name>vector3</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a28d983d20c9b3b395da7854fafae20f2</anchor>
      <arglist>(const double inX=0.0, const double inY=0.0, const double inZ=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector3</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a8b2f7f06d9fa0554248321887d4fcfc4</anchor>
      <arglist>(double inV[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector3</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>abe84fe9749e73b1027baddb505fa189a</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~vector3</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a059160a3da371ed0cfd1563a1e8cd2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a685349dbc9e2d99a19616763811cbfba</anchor>
      <arglist>(const double inX, const double inY, const double inZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>abfcb3c965a12bd0385f1fe1db3f7d3ac</anchor>
      <arglist>(const double *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetX</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab7cbeb9d9ec3d0d2714733d8bb4596eb</anchor>
      <arglist>(const double inX)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetY</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a385f2320a91b6c182ecb45d16ffc6332</anchor>
      <arglist>(const double inY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetZ</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad1ac74f918d5ac48cb47426ca9ba2c09</anchor>
      <arglist>(const double inZ)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetX</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a140fe887c529e7b90eae3de197e8ceb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetY</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a7e0e3acd8a6e4016522b9cdbc8f5aeb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZ</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a885f0eb530803b77acf8ac2055c59ee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a9345053a16ce83e130dc098fddf9af7a</anchor>
      <arglist>(double *c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a4803abb2beda3b528c9db7046fa96141</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad2eee719d3706b71968f894c1179f4bb</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>AsArray</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a72b1c0a136ecdb28fdfa1ec382ccdc41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ae0541be714a6305dd3295655eea746d9</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ac4b4980ccea5aa5184928ce40cf1acee</anchor>
      <arglist>(const vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a506884b50b92a33e92029b43f9b75bc9</anchor>
      <arglist>(const double *f)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a322635480250ba0c08aa47a125eda3dd</anchor>
      <arglist>(const double *f)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a849fa346bb458a37710cdb8a4f5c085f</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab5a7b18eeff279e5d850a9075d09f8a5</anchor>
      <arglist>(const double &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab879d8d94111c53fd9b9013fb9345734</anchor>
      <arglist>(const matrix3x3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomUnitVector</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>af2f4c0b08630beda575c1c8697b8fece</anchor>
      <arglist>(OBRandom *oeRand=NULL)</arglist>
    </member>
    <member kind="function">
      <type>vector3 &amp;</type>
      <name>normalize</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a8d0a82a515f8373ee3f174a22f775397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CanBeNormalized</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a42a186aba6d262b1ce632ee90fb25e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length_2</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a560382b2b84516f70ca2d406aaee8baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad207cb443e371f73f07e874c504f60c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>x</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>abef0821fe31ac502f2d11718aef50ae3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>y</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a60e843e6f8ec7cf8709da2954bd2c202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>z</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ac6512d9d5bc60ad02143f34ba62e010a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a3b195b867437acf8de45f48c83e81932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ad927d9808ded1fc49c05ae9e1a3ed2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>z</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a2134ad02d68f29e9c7cd87e4cd4c75b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a49ed80cbaa997a8f5b5e25ac3610db6f</anchor>
      <arglist>(const vector3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a54bc009d3ca567251114c2a86c7753ff</anchor>
      <arglist>(const vector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>a4eb9ee503a7d695dfac88a993256add0</anchor>
      <arglist>(const vector3 &amp;other, const double &amp;precision) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distSq</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>af0bb15d3c00f3ab71314513fa41fa548</anchor>
      <arglist>(const vector3 &amp;vv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createOrthoVector</name>
      <anchorfile>classOpenBabel_1_1vector3.html</anchorfile>
      <anchor>ab7ad19aad80b487369bcafe789fd8c04</anchor>
      <arglist>(vector3 &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBCisTransStereo</name>
    <filename>classOpenBabel_1_1OBCisTransStereo.html</filename>
    <base>OpenBabel::OBTetraPlanarStereo</base>
    <class kind="struct">OpenBabel::OBCisTransStereo::Config</class>
    <member kind="function">
      <type></type>
      <name>OBCisTransStereo</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a9656f13082272afbce48d412f17ec3c5</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBCisTransStereo</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a7936fc6365e956026f2d544d9a2e46c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a74dbdaf4c0f5f8532781027653d3de2b</anchor>
      <arglist>(OBBase *mol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBStereo::Type</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a25d3547525ae04f2769c976552a55b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>afa8720abaf6972d6dac22a8cd1a67225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConfig</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>ad3a3a7b99c061bc1e1523aef57c8cf35</anchor>
      <arglist>(const Config &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>Config</type>
      <name>GetConfig</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a7fdbb2f323900cb0fdeb1d1cbcb0a3fe</anchor>
      <arglist>(OBStereo::Shape shape=OBStereo::ShapeU) const </arglist>
    </member>
    <member kind="function">
      <type>Config</type>
      <name>GetConfig</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a09aa07aa424e8bd97a7f82f4a4febbe4</anchor>
      <arglist>(unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a4407203127f1b699f87c449ddeff3ab3</anchor>
      <arglist>(const OBCisTransStereo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>ac2d04819b59f3a4ec2c1505344dcd62c</anchor>
      <arglist>(const OBCisTransStereo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOnSameAtom</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>aa960b81facaa37baf0f4504d001c9549</anchor>
      <arglist>(unsigned long id1, unsigned long id2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTrans</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>ab22bff18bdd19866c40258e1c6956186</anchor>
      <arglist>(unsigned long id1, unsigned long id2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCis</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>ae7a5da51c72f6c85ed7d32de403ee11e</anchor>
      <arglist>(unsigned long id1, unsigned long id2) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetTransRef</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a092a8f4dfd75b55616825922f4bdc2ad</anchor>
      <arglist>(unsigned long id) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetCisRef</name>
      <anchorfile>classOpenBabel_1_1OBCisTransStereo.html</anchorfile>
      <anchor>a407cfffec2530eb5bae418830e8e5f6c</anchor>
      <arglist>(unsigned long id) const </arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetMolecule</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>acd313cc12ec2b66926e4d0102042732a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>aa03f9b7e07be400ad77ba2306a2f1619</anchor>
      <arglist>(bool specified)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a1a34764224cb3e3c4f1f84a4a3366617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigType</type>
      <name>ToConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetraPlanarStereo.html</anchorfile>
      <anchor>ab0e6b73b95ab7ad4a4d5e9fcbd598a4d</anchor>
      <arglist>(const ConfigType &amp;cfg, unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::OBCisTransStereo::Config</name>
    <filename>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</filename>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>a539a941e29cde8d13e413c515d9801cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>acf25320b7c10321198305519ad78680c</anchor>
      <arglist>(unsigned long _begin, unsigned long _end, const OBStereo::Refs &amp;_refs, OBStereo::Shape _shape=OBStereo::ShapeU)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>a929278c4f025d8340ab65d86696386e4</anchor>
      <arglist>(const Config &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>a3f058aa3902997deaaefc72fe0355477</anchor>
      <arglist>(const Config &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>begin</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>a43ec7ce807e545cea2247cd68bc7b7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>end</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>ac31c5196f50f192d5db1d85180b05aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Refs</type>
      <name>refs</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>a3e3f2a8fefc9f694040bbb8685cb61e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Shape</type>
      <name>shape</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>a77f6538bd30b4203bd2b2bba33c28c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>specified</name>
      <anchorfile>structOpenBabel_1_1OBCisTransStereo_1_1Config.html</anchorfile>
      <anchor>ad137707f900f599f5f403d9639e2aec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBSquarePlanarStereo</name>
    <filename>classOpenBabel_1_1OBSquarePlanarStereo.html</filename>
    <base>OpenBabel::OBTetraPlanarStereo</base>
    <class kind="struct">OpenBabel::OBSquarePlanarStereo::Config</class>
    <member kind="function">
      <type></type>
      <name>OBSquarePlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>af4b70a85fab1f7bf645e897c8bcb2532</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBSquarePlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>aeb6c711521f7a16d819df0d4b6da1999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a74dbdaf4c0f5f8532781027653d3de2b</anchor>
      <arglist>(OBBase *mol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBStereo::Type</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a25d3547525ae04f2769c976552a55b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>afa8720abaf6972d6dac22a8cd1a67225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConfig</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>ad3a3a7b99c061bc1e1523aef57c8cf35</anchor>
      <arglist>(const Config &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>Config</type>
      <name>GetConfig</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a7fdbb2f323900cb0fdeb1d1cbcb0a3fe</anchor>
      <arglist>(OBStereo::Shape shape=OBStereo::ShapeU) const </arglist>
    </member>
    <member kind="function">
      <type>Config</type>
      <name>GetConfig</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a09aa07aa424e8bd97a7f82f4a4febbe4</anchor>
      <arglist>(unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a0264ff990b026468309041810d7c43cc</anchor>
      <arglist>(const OBSquarePlanarStereo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>ac0773f2ca467c400db0a32bf809dbd9f</anchor>
      <arglist>(const OBSquarePlanarStereo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTrans</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>ab22bff18bdd19866c40258e1c6956186</anchor>
      <arglist>(unsigned long id1, unsigned long id2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsCis</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>ae7a5da51c72f6c85ed7d32de403ee11e</anchor>
      <arglist>(unsigned long id1, unsigned long id2) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>GetTransRef</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a092a8f4dfd75b55616825922f4bdc2ad</anchor>
      <arglist>(unsigned long id) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned long &gt;</type>
      <name>GetCisRefs</name>
      <anchorfile>classOpenBabel_1_1OBSquarePlanarStereo.html</anchorfile>
      <anchor>a8ce8344301c0f105778522147c26c675</anchor>
      <arglist>(unsigned long id) const </arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetMolecule</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>acd313cc12ec2b66926e4d0102042732a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>aa03f9b7e07be400ad77ba2306a2f1619</anchor>
      <arglist>(bool specified)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a1a34764224cb3e3c4f1f84a4a3366617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigType</type>
      <name>ToConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetraPlanarStereo.html</anchorfile>
      <anchor>ab0e6b73b95ab7ad4a4d5e9fcbd598a4d</anchor>
      <arglist>(const ConfigType &amp;cfg, unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::OBSquarePlanarStereo::Config</name>
    <filename>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</filename>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a539a941e29cde8d13e413c515d9801cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a3932e85a5b2cc866ab349584485a5b1c</anchor>
      <arglist>(unsigned long _center, const OBStereo::Refs &amp;_refs, OBStereo::Shape _shape=OBStereo::ShapeU)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a929278c4f025d8340ab65d86696386e4</anchor>
      <arglist>(const Config &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a3f058aa3902997deaaefc72fe0355477</anchor>
      <arglist>(const Config &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>center</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a822b3ed2ceea391277903da02d1fd0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Refs</type>
      <name>refs</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a3e3f2a8fefc9f694040bbb8685cb61e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Shape</type>
      <name>shape</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>a77f6538bd30b4203bd2b2bba33c28c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>specified</name>
      <anchorfile>structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.html</anchorfile>
      <anchor>ad137707f900f599f5f403d9639e2aec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBStereo</name>
    <filename>structOpenBabel_1_1OBStereo.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CisTrans</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7abf2462b166f389c17adccf7a95941396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExtendedCisTrans</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a3115cb247d1cb271c7157b4db2407932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SquarePlanar</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Tetrahedral</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a398755acaa38c780e5a4dc5db1c205be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExtendedTetrahedral</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a8c2578d01eef213503d0894e8be33ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TrigonalBipyramidal</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a7cadd5a7e8d25d88807992426f62a397</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Octahedral</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7a48563b1c184d9fab3497e3e519ce50af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BondDirection</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a90087c9021331c97c28e9a8329f41e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NotStereo</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a90087c9021331c97c28e9a8329f41e97ad207f41315a26ce638464caf613b60a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpBond</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a90087c9021331c97c28e9a8329f41e97af4cfb1f053e0e8a980850336a1dcdab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DownBond</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a90087c9021331c97c28e9a8329f41e97a6b3b36219bd6afd10e935be8526cb4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownDir</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a90087c9021331c97c28e9a8329f41e97a3d121ce0cfdbe400c4a41e185030d262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Shape</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a55b506070847a13554f8b879c1bfb37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ShapeU</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ShapeZ</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a55b506070847a13554f8b879c1bfb37cacbf3a0dadf9e3e7a8dd4f0a81f8b010d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Shape4</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a55b506070847a13554f8b879c1bfb37cafb39b2d794a5fd22489031455416fa31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>View</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>af1dfb9e747d80437422fdb5fba87c2c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ViewFrom</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ViewTowards</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>af1dfb9e747d80437422fdb5fba87c2c7a82407be1a15d633a8bf5df6eaecad155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Winding</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>ac3e0e8e3a194037cdf6103a95a1c6d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Clockwise</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AntiClockwise</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>ac3e0e8e3a194037cdf6103a95a1c6d31a6bf12c9b9fea555c370c5f75629cd609</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoRef</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>aba01db17f4a2bfbc3db60dc172972a25a7295d9aeb6e0e6f3a5b77aa0ce7ed0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImplicitRef</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Ref</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>aff913cc7d694153b33e2b3ac168a6350</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Ref &gt;</type>
      <name>Refs</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>aa6d4491769cb9af32f3ea22e9f9a66c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Refs::iterator</type>
      <name>RefIter</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a1380cd3ca593dd317be63064b47e14db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Refs::const_iterator</type>
      <name>ConstRefIter</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a6f0021eb4868fb5540a2cedde823ada1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Refs</type>
      <name>MakeRefs</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a677b4acc48f3ee3d31f35e20b62ea534</anchor>
      <arglist>(Ref ref1, Ref ref2, Ref ref3, Ref ref4=NoRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ContainsSameRefs</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>abb14ec41d65b0dc4d49707a713da483f</anchor>
      <arglist>(const Refs &amp;refs1, const Refs &amp;refs2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ContainsRef</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a7dd420f7528abb409341a8a5874143db</anchor>
      <arglist>(const Refs &amp;refs, unsigned long ref)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>NumInversions</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a0ba3b9c408bae435888d6fdc69be280a</anchor>
      <arglist>(const Refs &amp;refs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Permutate</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a91f98766fb3dc116169a4871f8b153cd</anchor>
      <arglist>(Refs &amp;refs, int i, int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Refs</type>
      <name>Permutated</name>
      <anchorfile>structOpenBabel_1_1OBStereo.html</anchorfile>
      <anchor>a208dedfeef4f58d65d01feb2f8a86d31</anchor>
      <arglist>(const Refs &amp;refs, int i, int j)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::OBStereoUnit</name>
    <filename>structOpenBabel_1_1OBStereoUnit.html</filename>
    <member kind="function">
      <type></type>
      <name>OBStereoUnit</name>
      <anchorfile>structOpenBabel_1_1OBStereoUnit.html</anchorfile>
      <anchor>ad200dcf5a41b516d592daf60cab1fd0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBStereoUnit</name>
      <anchorfile>structOpenBabel_1_1OBStereoUnit.html</anchorfile>
      <anchor>a65527f1c8d53729db66c6fdc5e43e46b</anchor>
      <arglist>(OBStereo::Type _type, unsigned long _id, bool _para=false)</arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Type</type>
      <name>type</name>
      <anchorfile>structOpenBabel_1_1OBStereoUnit.html</anchorfile>
      <anchor>aeecb8f40f1a4fa558dbf6383d1b72771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>id</name>
      <anchorfile>structOpenBabel_1_1OBStereoUnit.html</anchorfile>
      <anchor>af17b8bd946e0f93c6550050f9e8aa349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>para</name>
      <anchorfile>structOpenBabel_1_1OBStereoUnit.html</anchorfile>
      <anchor>a85967158ea10743b1e69bfe4edbcb6a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBStereoBase</name>
    <filename>classOpenBabel_1_1OBStereoBase.html</filename>
    <base>OpenBabel::OBGenericData</base>
    <member kind="function">
      <type></type>
      <name>OBStereoBase</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a4e9716db658a2f725a214f4f23b6a68d</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBStereoBase</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>af79f43b5cb6090d98dac9da71e083499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetMolecule</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>acd313cc12ec2b66926e4d0102042732a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBStereo::Type</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a6cf9ac8023da9840e4cb56d138431e45</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>aa03f9b7e07be400ad77ba2306a2f1619</anchor>
      <arglist>(bool specified)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a1a34764224cb3e3c4f1f84a4a3366617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBStereoFacade</name>
    <filename>classOpenBabel_1_1OBStereoFacade.html</filename>
    <member kind="function">
      <type></type>
      <name>OBStereoFacade</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>af8355c7f4c1621336979f3bb83bc48c1</anchor>
      <arglist>(OBMol *mol, bool perceive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a0c7f59bbc41322170d29d4fa6d744538</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>GetStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a60bcaec9dc34eb3b74f66826fd059007</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumTetrahedralStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a7a2be9be4bb0839e02401c7cde2e19a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasTetrahedralStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a58099c41c942e542d4f844f4c3783d24</anchor>
      <arglist>(unsigned long atomId)</arglist>
    </member>
    <member kind="function">
      <type>OBTetrahedralStereo *</type>
      <name>GetTetrahedralStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>aa9a6894e86a6462fe27d217e553f0c97</anchor>
      <arglist>(unsigned long atomId)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumCisTransStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a3c5d1641fad12c08cd286dd191478ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasCisTransStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a3dacc038587ede280561fa2ea65f6359</anchor>
      <arglist>(unsigned long bondId)</arglist>
    </member>
    <member kind="function">
      <type>OBCisTransStereo *</type>
      <name>GetCisTransStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>aeb080da924bdb7468156373489c5a47a</anchor>
      <arglist>(unsigned long bondId)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumSquarePlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a4478906c126d94407d5270e3793b8d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSquarePlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>a1c03aea2acfd0051368391efc5f1c67b</anchor>
      <arglist>(unsigned long atomId)</arglist>
    </member>
    <member kind="function">
      <type>OBSquarePlanarStereo *</type>
      <name>GetSquarePlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBStereoFacade.html</anchorfile>
      <anchor>aa77639fde7616780650444c0e0decc92</anchor>
      <arglist>(unsigned long atomId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBTetrahedralStereo</name>
    <filename>classOpenBabel_1_1OBTetrahedralStereo.html</filename>
    <base>OpenBabel::OBTetraNonPlanarStereo</base>
    <class kind="struct">OpenBabel::OBTetrahedralStereo::Config</class>
    <member kind="function">
      <type></type>
      <name>OBTetrahedralStereo</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>adc86596b86f09b293991640047e59c01</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBTetrahedralStereo</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>a3e48484753b52600e09da59fd9fc5f2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>a74dbdaf4c0f5f8532781027653d3de2b</anchor>
      <arglist>(OBBase *mol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBStereo::Type</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>a25d3547525ae04f2769c976552a55b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValid</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>afa8720abaf6972d6dac22a8cd1a67225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>ad3a3a7b99c061bc1e1523aef57c8cf35</anchor>
      <arglist>(const Config &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>Config</type>
      <name>GetConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>aa9c5418110de0399e89ff914b2cd78dd</anchor>
      <arglist>(OBStereo::Winding winding=OBStereo::Clockwise, OBStereo::View view=OBStereo::ViewFrom) const </arglist>
    </member>
    <member kind="function">
      <type>Config</type>
      <name>GetConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>abcb8195cf86167bbcd2b97dd92b1220b</anchor>
      <arglist>(unsigned long from_or_towards, OBStereo::Winding winding=OBStereo::Clockwise, OBStereo::View view=OBStereo::ViewFrom) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>a56c73897c93731acde2a91f0a6cb2208</anchor>
      <arglist>(const OBTetrahedralStereo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenBabel_1_1OBTetrahedralStereo.html</anchorfile>
      <anchor>af7131dc819715522744c42ab9fb30df8</anchor>
      <arglist>(const OBTetrahedralStereo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetMolecule</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>acd313cc12ec2b66926e4d0102042732a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>aa03f9b7e07be400ad77ba2306a2f1619</anchor>
      <arglist>(bool specified)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a1a34764224cb3e3c4f1f84a4a3366617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigType</type>
      <name>ToConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>aea79b0ea3dac15b24e457cfebcf85d58</anchor>
      <arglist>(const ConfigType &amp;cfg, unsigned long from_or_towards, OBStereo::Winding winding=OBStereo::Clockwise, OBStereo::View view=OBStereo::ViewFrom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ChangeWinding</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>a3d9501939b911a8eb0e371e1ec17e095</anchor>
      <arglist>(ConfigType &amp;cfg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ChangeView</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>aa35036e3ac3dfaefb1c58408ee18fd52</anchor>
      <arglist>(ConfigType &amp;cfg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Invert</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>a307a0d8816c4c4a9265ad794d3df84af</anchor>
      <arglist>(ConfigType &amp;cfg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::OBTetrahedralStereo::Config</name>
    <filename>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</filename>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a539a941e29cde8d13e413c515d9801cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a1410755ad2d5b4c0f3a6b9f0c9f04789</anchor>
      <arglist>(unsigned long _center, unsigned long from_or_towards, const OBStereo::Refs &amp;_refs, OBStereo::Winding _winding=OBStereo::Clockwise, OBStereo::View _view=OBStereo::ViewFrom)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a929278c4f025d8340ab65d86696386e4</anchor>
      <arglist>(const Config &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a3f058aa3902997deaaefc72fe0355477</anchor>
      <arglist>(const Config &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>from</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a3237fb5e8bbcbececce85cb5d85195b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>towards</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>aa88a28c7375e3d579bb0c28ef8a1cb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>center</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a822b3ed2ceea391277903da02d1fd0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union OpenBabel::OBTetrahedralStereo::Config::@16</type>
      <name>@17</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a725d858b5acde11b8bcc4af55d42dbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>from</name>
      <anchorfile>unionOpenBabel_1_1OBTetrahedralStereo_1_1Config_1_1@16.html</anchorfile>
      <anchor>a3237fb5e8bbcbececce85cb5d85195b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>towards</name>
      <anchorfile>unionOpenBabel_1_1OBTetrahedralStereo_1_1Config_1_1@16.html</anchorfile>
      <anchor>aa88a28c7375e3d579bb0c28ef8a1cb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Refs</type>
      <name>refs</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a3e3f2a8fefc9f694040bbb8685cb61e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::Winding</type>
      <name>winding</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a4ea32436f7428861ff7d4543570f4451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBStereo::View</type>
      <name>view</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>a3a41b22504236f1bc6908201a3289184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>specified</name>
      <anchorfile>structOpenBabel_1_1OBTetrahedralStereo_1_1Config.html</anchorfile>
      <anchor>ad137707f900f599f5f403d9639e2aec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBTetraNonPlanarStereo</name>
    <filename>classOpenBabel_1_1OBTetraNonPlanarStereo.html</filename>
    <base>OpenBabel::OBStereoBase</base>
    <member kind="function">
      <type></type>
      <name>OBTetraNonPlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>a76a717b3c27a5227213ad8fc615e7988</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBTetraNonPlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>a852f4efe1f1a0b847ef22bef9203d493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetMolecule</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>acd313cc12ec2b66926e4d0102042732a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBStereo::Type</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a6cf9ac8023da9840e4cb56d138431e45</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>aa03f9b7e07be400ad77ba2306a2f1619</anchor>
      <arglist>(bool specified)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a1a34764224cb3e3c4f1f84a4a3366617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigType</type>
      <name>ToConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>aea79b0ea3dac15b24e457cfebcf85d58</anchor>
      <arglist>(const ConfigType &amp;cfg, unsigned long from_or_towards, OBStereo::Winding winding=OBStereo::Clockwise, OBStereo::View view=OBStereo::ViewFrom)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ChangeWinding</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>a3d9501939b911a8eb0e371e1ec17e095</anchor>
      <arglist>(ConfigType &amp;cfg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ChangeView</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>aa35036e3ac3dfaefb1c58408ee18fd52</anchor>
      <arglist>(ConfigType &amp;cfg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Invert</name>
      <anchorfile>classOpenBabel_1_1OBTetraNonPlanarStereo.html</anchorfile>
      <anchor>a307a0d8816c4c4a9265ad794d3df84af</anchor>
      <arglist>(ConfigType &amp;cfg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classOpenBabel_1_1OBTetraPlanarStereo">Combinations</docanchor>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBTetraPlanarStereo</name>
    <filename>classOpenBabel_1_1OBTetraPlanarStereo.html</filename>
    <base>OpenBabel::OBStereoBase</base>
    <member kind="function">
      <type></type>
      <name>OBTetraPlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBTetraPlanarStereo.html</anchorfile>
      <anchor>a30170ee6fe29526f8d628590ca28b0f3</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBTetraPlanarStereo</name>
      <anchorfile>classOpenBabel_1_1OBTetraPlanarStereo.html</anchorfile>
      <anchor>a4eee655d325d5d07a158e9e27b63e0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBGenericData *</type>
      <name>Clone</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a67bda850335747e7ac5d66629bda0a67</anchor>
      <arglist>(OBBase *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>aae3d15983201a2a115701b2c538fef77</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a45613e34598a9584fb0120ef3fdab9e0</anchor>
      <arglist>(const DataOrigin s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetAttribute</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac72c28db8b5bb8911845ada56220a1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>GetDataType</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac20b99b31895c99422fb1244def6e213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>GetValue</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ac9527475c246fadbbab63a35376fd5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataOrigin</type>
      <name>GetOrigin</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>ad080c58f230c474935ed3e27cb2ba906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBMol *</type>
      <name>GetMolecule</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>acd313cc12ec2b66926e4d0102042732a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBStereo::Type</type>
      <name>GetType</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a6cf9ac8023da9840e4cb56d138431e45</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>aa03f9b7e07be400ad77ba2306a2f1619</anchor>
      <arglist>(bool specified)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpecified</name>
      <anchorfile>classOpenBabel_1_1OBStereoBase.html</anchorfile>
      <anchor>a1a34764224cb3e3c4f1f84a4a3366617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigType</type>
      <name>ToConfig</name>
      <anchorfile>classOpenBabel_1_1OBTetraPlanarStereo.html</anchorfile>
      <anchor>ab0e6b73b95ab7ad4a4d5e9fcbd598a4d</anchor>
      <arglist>(const ConfigType &amp;cfg, unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_attr</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>adceb77134f15418a66cf1124dcef1b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>_type</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a31291823d487a4a47f24aae5870505ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataOrigin</type>
      <name>_source</name>
      <anchorfile>classOpenBabel_1_1OBGenericData.html</anchorfile>
      <anchor>a239606b62a534e4df7626ea0cfdfb856</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classOpenBabel_1_1OBTetraPlanarStereo">Combinations</docanchor>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBDepict</name>
    <filename>classOpenBabel_1_1OBDepict.html</filename>
    <member kind="enumeration">
      <name>AtomLabelType</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2b759aeedfb173af47e600e341e38f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomId</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2b759aeedfb173af47e600e341e38f5ba40178cb147a92e7f4bdc9a0e1d4185b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomIndex</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2b759aeedfb173af47e600e341e38f5ba1f1aca3e9ba04f5c366c62e5ccf62cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomSymmetryClass</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2b759aeedfb173af47e600e341e38f5badad1096a6bc76c726a5904501c739658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomValence</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2b759aeedfb173af47e600e341e38f5ba96a81dcebad13063d8fc6cd09a264ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomTetrahedralStereo</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2b759aeedfb173af47e600e341e38f5ba1417340137276e88770b165e3aad3af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OptionType</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bwAtoms</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6a311325fe7c0de23328615e994a9daa65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>internalColor</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6afa7920642c279ba23ace2a16332b8688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>drawTermC</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6acb80f490295065312b4f7d25c9196e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>drawAllC</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6aefafc9ccbaebe3ad6ea886d16e03460f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>genWedgeHash</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6af8c13b66f2c1428ffb6ed6144ce37ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>asymmetricDoubleBond</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a976bded296a67e09242af85291a639d6aeb81d57ae3cbb569707b9e7e323f713f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBDepict</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>ad023f31f93fba3eec2fc3de52cb219a7</anchor>
      <arglist>(OBPainter *painter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DrawMolecule</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a9ef29e99771a1932b2c28b34533a3e96</anchor>
      <arglist>(OBMol *mol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddAtomLabels</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>ab88f0bdd58be5fe56020b4502bbfb837</anchor>
      <arglist>(AtomLabelType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBondLength</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>aa6b118757495c30c4c9ad1757c4413e3</anchor>
      <arglist>(double length)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBondLength</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>aa9badc9f61a447a2a7676db78839e02e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPenWidth</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a4f26f0001d72f98989950c542b630337</anchor>
      <arglist>(double length)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetPenWidth</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a44f55f6ff7d51a704ce87380b315b3fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBondSpacing</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a91007d92d4e4a179ae013fa9a304c688</anchor>
      <arglist>(double spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBondSpacing</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a8cd173d08046231746ae8501ef0e76c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBondWidth</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>aa88fadeb8a1cc042befb1d7be7c3bbb5</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBondWidth</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a95f7758ecdff8f3979278e92f10d5b1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOption</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>ab07e446347e0c7a11ba20302eba6f07a</anchor>
      <arglist>(unsigned opts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>GetOptions</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2792805f32f53bedcad767c423366d12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearOptions</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a2a991dcdec79a706fed4084e684e23da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFontFamily</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a442caaf44c1f9275908ca8d5088b61bd</anchor>
      <arglist>(const std::string &amp;family)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetFontFamily</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a6415fbc27ed579fdf8bd2e0a0a41035b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFontSize</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>af3502432f59007754b6901fdb89fb84b</anchor>
      <arglist>(int pointSize, bool subscript=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetFontSize</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a87c686a1c46a152b49d255d58c02bd5a</anchor>
      <arglist>(bool subscript=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAliasMode</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a420fdcfad8c09b015351a153165a5575</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBondColor</name>
      <anchorfile>classOpenBabel_1_1OBDepict.html</anchorfile>
      <anchor>a902da300ae4b3f490179af0cb407bd2d</anchor>
      <arglist>(const std::string &amp;scolor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBColor</name>
    <filename>structOpenBabel_1_1OBColor.html</filename>
    <member kind="function">
      <type></type>
      <name>OBColor</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>aa6dd2d15fa40fbe2ec5a7b04b2b34df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBColor</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>aa898886bf9377accf9d9393e873576c1</anchor>
      <arglist>(double _red, double _green, double _blue, double _alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBColor</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>ac5a539dac4aba41fdd4993b9779c1bcf</anchor>
      <arglist>(const std::string &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBColor</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>a596eec9e9251afb9bea51b73c1065cc7</anchor>
      <arglist>(std::vector&lt; double &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>a0ae044600ef7d2fcc73be09906dc6ca3</anchor>
      <arglist>(const OBColor &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>red</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>a8e15743f85d7d7df6996ddfcf089df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>green</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>a577af4a9106aa5ba6b0960ff89dd4d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>blue</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>ada69d079616ef218f4fedb0e38454e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>structOpenBabel_1_1OBColor.html</anchorfile>
      <anchor>a20f4c4490bc8ecbdd1ffcb79acce6035</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBFontMetrics</name>
    <filename>structOpenBabel_1_1OBFontMetrics.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>fontSize</name>
      <anchorfile>structOpenBabel_1_1OBFontMetrics.html</anchorfile>
      <anchor>a78dc3704e7e01da52c9a93a70c5bc45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ascent</name>
      <anchorfile>structOpenBabel_1_1OBFontMetrics.html</anchorfile>
      <anchor>a38af4b74c008ba74204ccbbe38b25a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>descent</name>
      <anchorfile>structOpenBabel_1_1OBFontMetrics.html</anchorfile>
      <anchor>a24b75c7de2a05d7759e991463a0c7723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>width</name>
      <anchorfile>structOpenBabel_1_1OBFontMetrics.html</anchorfile>
      <anchor>a9df23e056f5d1a0388cd8190431c0e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>height</name>
      <anchorfile>structOpenBabel_1_1OBFontMetrics.html</anchorfile>
      <anchor>a89f6abd564014faeff7cd20c340a9c7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenBabel::OBPainter</name>
    <filename>classOpenBabel_1_1OBPainter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBPainter</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a39de5fab752e8e6d2af9e86041ab59e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>NewCanvas</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a135a190c2d8717af6c4b491504a17458</anchor>
      <arglist>(double width, double height)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsGood</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a6b00885efc9bf26c5868f53f13ff3995</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFontFamily</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a7180ada44a877dec7004fe197ac353d9</anchor>
      <arglist>(const std::string &amp;fontFamily)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFontSize</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a39a2ee83c7d868d98fb6d6505448368c</anchor>
      <arglist>(int pointSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFillColor</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a38087c772403c5a64295e847e52d88f8</anchor>
      <arglist>(const OBColor &amp;color)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPenColor</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a10c3142535e0162c928ad36b9c7ad7ff</anchor>
      <arglist>(const OBColor &amp;color)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPenWidth</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a6a49a7a87584f4321e7a9c2d1d1cd4ae</anchor>
      <arglist>(double width)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DrawLine</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a8e28d0754cf8475fc015fd6b82d064eb</anchor>
      <arglist>(double x1, double y1, double x2, double y2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DrawCircle</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a863bcec97ffd4ca82a3669860943ad2c</anchor>
      <arglist>(double x, double y, double r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DrawPolygon</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>a47edaf962916310d2b3eb21aeecace05</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;points)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DrawText</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>abd406d7a4ecb123aaf335a5eed7a559f</anchor>
      <arglist>(double x, double y, const std::string &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBFontMetrics</type>
      <name>GetFontMetrics</name>
      <anchorfile>classOpenBabel_1_1OBPainter.html</anchorfile>
      <anchor>aec3268ffd531e78091929eaaaf99634a</anchor>
      <arglist>(const std::string &amp;text)=0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel::detail</name>
    <filename>namespaceOpenBabel_1_1detail.html</filename>
    <class kind="struct">OpenBabel::detail::max_value</class>
    <class kind="struct">OpenBabel::detail::max_value&lt; T, 0 &gt;</class>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::detail::max_value</name>
    <filename>structOpenBabel_1_1detail_1_1max__value.html</filename>
    <templarg></templarg>
    <templarg>size</templarg>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>result</name>
      <anchorfile>structOpenBabel_1_1detail_1_1max__value.html</anchorfile>
      <anchor>ac7d461ddec7ac180a645b11e023314a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpenBabel::detail::max_value&lt; T, 0 &gt;</name>
    <filename>structOpenBabel_1_1detail_1_1max__value_3_01T_00_010_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>result</name>
      <anchorfile>structOpenBabel_1_1detail_1_1max__value_3_01T_00_010_01_4.html</anchorfile>
      <anchor>ac7d461ddec7ac180a645b11e023314a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel::OBAminoAcidProperty</name>
    <filename>namespaceOpenBabel_1_1OBAminoAcidProperty.html</filename>
    <member kind="enumvalue">
      <name>ACIDIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a045438be0be67b01c340bd1f994bbfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACYCLIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a3533460e8020bee4abc333477d0e7f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALIPHATIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57ad1df9ce0f3d960bb2e16fe134985fab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AROMATIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a15dd7ce1ada8f3f0998d9b945f340d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a13c45196813cb44e6e81e9c48a5ec1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BURIED</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a435f418ed46a1d0999290dcdcb3e25d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARGED</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57abe2f55540ce4c31da37839f49cbfac00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYCLIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a41ec9818e6db8b3150502ce92f911478</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HYDROPHOBIC</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a6f7f04043d462824a62e3c1e78757554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LARGE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a716db5c72140446e5badac4683610310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEDIUM</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a5340ec7ecef6cc3886684a3bd3450d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEGATIVE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a62d66a51fa7574c652597716f7709865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEUTRAL</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57af46d14eb9d5d71afc9f6e747689fcb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POLAR</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57aa54fd87899b2d83f2a08232393e732fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIVE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57a03d440bbbfb042afc85347f994b44fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALL</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57aea5e596a553757a677cb4da4c8a1f935</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SURFACE</name>
      <anchorfile>namespaceOpenBabel_1_1OBAminoAcidProperty.html</anchorfile>
      <anchor>ab04a0655cd1e3bcac5e8f48c18df1a57aec3093f5673be2548cc7091279b429e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel::OBGenericDataType</name>
    <filename>namespaceOpenBabel_1_1OBGenericDataType.html</filename>
    <member kind="enumvalue">
      <name>UndefinedData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baaed11c625f3ba337a0468e31990a832e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PairData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf37b8c94a903cbf5fc45475c815c541a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EnergyData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baed27589416d0d35119923437b476c33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CommentData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad015d8b14f8fa9e2c8107ec0b6d637a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConformerData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa8504383b864769bce6f9962ff55711c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExternalBondData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55babbdeac68debaebaea148a0f2271c8128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RotamerList</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba6792a664f1614a75f33128e139392ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VirtualBondData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba71d63bc919dfc9800e9e274301882557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RingData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba614fe63c6aaa519336589c0b3dcbcdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TorsionData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba9cf293f0b1ed83d3b1b804ca947ddcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AngleData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba99b8d17f7ee6c09b008ab6bf5b5bf0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SerialNums</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4804a06df36aa971eb112ada03885b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitCell</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba26d8504c2596c9ef59dab47c01a4dd1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpinData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab44db07941815c91fbc8e01f66252208</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ChargeData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bae1fbcef5ed6d30c670148af84890d0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SymmetryData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba2ed92f76270c3218036e96ad1044301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ChiralData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baab3b5ad7023167aa297c4c555c10acdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OccupationData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baac4fd2f8c1bedfe2d09c303e9c1b8e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DensityData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba5b0d37c5cdfbcc15ee852b769c25d1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElectronicData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba88ee5a5e80dd4e9523761d17ba9b81f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VibrationData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab69829f7efb675ca0f6a4d8f245ceaf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RotationData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab7c011beb81d9ba86035c1c0b7609899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NuclearData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55badd3a99a5a7d554d150d7241368f2ba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SetData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GridData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba851ab4fe739bc6b4cc7b968ab9c4e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VectorData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba46bb764382af04b5c32d3370e6b677f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MatrixData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba8239a3bb53f99dfa7da4734d77733abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StereoData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3f9974bdbccde7c26064d7ec21d570ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOSData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baad6691689525c8623b3c0d08d49c424a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElectronicTransitionData</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baeb82edb7e1b51246c53e0dd7248365a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData0</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad4a188d7201f00f99ec649edead73c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData1</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba7bd8533c833569ccbd4a701378ccffb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData2</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba7be53c3112d0111bbbee98cefbac4850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData3</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba012e8681e30646e38989b9a0f6ace98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData4</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba342cb4110346a130dc73e4e3491533de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData5</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baf20627567e8d1835670ff531d5cb9d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData6</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4c2040d0daf33eff43588933be9150a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData7</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba40d766aa8e0726ef56b99986ec4d275d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData8</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab32f4336d6de7ee7fdf6557bcd9b01c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData9</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba4a0f2b355a4e2d24d617f2824c165a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData10</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba240964387d336b8321d240044762c8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData11</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba806a44c47ce81d45527562fca2917d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData12</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3b6e862da975578f9b8f2a5cef18935c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData13</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bafe6b84e76821b52a2eb5f3a761dc8c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData14</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3cbbbad42fbfe9766b0892ccc88b47c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CustomData15</name>
      <anchorfile>namespaceOpenBabel_1_1OBGenericDataType.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba8051d4056f7d8a89233dfa0ebc949bc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel::OBResidueAtomProperty</name>
    <filename>namespaceOpenBabel_1_1OBResidueAtomProperty.html</filename>
    <member kind="enumvalue">
      <name>ALPHA_CARBON</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388af1519f8b65e8ac7cabeff04fab6feb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AMINO_BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a92449404d5407a5fcba9b08eba9b6286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a3edc1b372333c6e852a7755d55428efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYSTEINE_SULPHUR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a506edfc16921cd59e8ad817b4181a9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIGAND</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a7169e1889cc3ff355aeac7d83121531b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUCLEIC_BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a2505e9d847c6234e636e78bee5021e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHAPELY_BACKBONE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388ad415a6edd238b178db4423b0e5173fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHAPELY_SPECIAL</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388adb37da8dc34f7af4130ea41feacbfbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIDECHAIN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a2c8fa426da706f246136cb9a6bf85327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUGAR_PHOSPHATE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueAtomProperty.html</anchorfile>
      <anchor>a385c44f6fb256e5716a2302a5b940388a8fe602c74d1a6111677d39fe163cb90b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel::OBResidueIndex</name>
    <filename>namespaceOpenBabel_1_1OBResidueIndex.html</filename>
    <member kind="enumvalue">
      <name>ALA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da95cd078b64d9f9d6f3c20404d8f66c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLY</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da94d7ff13bcdd51eea2c1da5c264ca4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daad47ce001ed8754f397999b58d3b50cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SER</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dac5a5cfdbc76418f74f2a427c51d1c774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAL</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da990a2861a2fe6b95a4008a9ec07ab519</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad481a610bd2db6b97d40ddcd9abbd04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LYS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daeb525f323eeaf7903e901db58a9aae1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da3a997c98204251b1b9c571abd95a2de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabac1d11107315b23b4548e52617d22e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da24f096b0a2f1d9ca16f1c4415fab1ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da44b0f0665a037c7e6dda002f070714d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da7d60bffdf68936b5011970a02c818b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa08ab92d27d76b8b77a5f4d551ced4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da370d7d793d7cadf5c4ea4e7489585782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa64a718f3dd04ec08cd9eececba8e6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da3b209f766341ee7459956538bc5da1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da0ca996226a243b3b9721eee1690da354</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CYS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da11ae67f062b9f1661a0af31240f3d231</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MET</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dae06932408cafd29884daf8533ba507fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da43621631ca67d05d566cc33fa005845f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASX</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da06964cf1ec93e904888af9e55f733df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLX</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da2ffaba14518e15947f81c385b742df6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PCA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad22aa98eb439fd84fbce7e3f7a892ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HYP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da300bdd72e3fad3a13bab36e28bbcac8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da42a4ade1acd55a49164099104990e09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>C</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da739ce3f516592d245d16fd8a3893472c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>G</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da2fe993340f6abb2234e543cd427df70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dac461e84f27bbb236874e1011cd66031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUS</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daf8182d551cf57debc5fead16a93ec46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad091b8e376f7cf432dc367e1eda65e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_1MA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da87cce1545888017ea8ccdb90cbefef3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_5MC</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dafdb7077f9cff515c183bbec809bb9cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OMC</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da1010792fba00c85ec7ec5d1d753abb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_1MG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da19f6a068dd917f11ccc878a973505ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_2MG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da98b694ee150582643498f5ee6cd0f9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M2G</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da42bf50879c502811d9759db270ae9991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_7MG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da45243b7ef01549aeb1d2659913017cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OMG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dadc587d0e935dcd0411626b7da376cec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YG</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da3ad448987ac281048d4558c4a6d4459a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>H2U</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da9aec1ef1e85d8476079d841b5c3d12e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_5MU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabe2be73b8c2c65fc720b8e54e484c7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PSU</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da7e518bbcbf5874dd82df44794b0b50e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNK</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da822987746a55a3436f5a30502f32d7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da7c6322d06ffff6c8d3bf3c0b3ea3210e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOR</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa809654855caa62449850d9122fd77a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOH</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da34e3c6a2fb8e37a28f02728c48e38801</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOD</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dabe1fb75d33b890e4d2b985e7601afabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SO4</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035daa6a22622ddba92ae4172f8e5dd056370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PO4</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da8be984115f521339b04bf60340651664</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAD</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da713023b44f020a4922d6ed25c196eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COA</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dad722f47ae7e525e2d9680a55800995a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035dac8aeed951dea0c630a06a9c1cba5fe87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NDP</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueIndex.html</anchorfile>
      <anchor>abc5c98fcc1211af2b80116dd6e0a035da909002bfb278911ff711c2ab422309c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OpenBabel::OBResidueProperty</name>
    <filename>namespaceOpenBabel_1_1OBResidueProperty.html</filename>
    <member kind="enumvalue">
      <name>AMINO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a92735ceb34f797e8b31e95818697542a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AMINO_NUCLEO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8ae8cb4d69045ca2704dfff6c28eb579a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COENZYME</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a365f90d646c6babcf18884439364d0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ION</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8ae875d295370fe613c6b422d0ed5a3a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUCLEO</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a9ed11fa43eaab3cb44b9a9f0146c5042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROTEIN</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a8b89fd9e5a9e8c681b15b27479408bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PURINE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8aad86ad6c6ee78f9148631741ee62988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PYRIMIDINE</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a56d4eb6af97d0baa17e24d4d56cd02c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVENT</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a9d6b5b185a7e651e4835d64e0cc35d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WATER</name>
      <anchorfile>namespaceOpenBabel_1_1OBResidueProperty.html</anchorfile>
      <anchor>ac36f475ca5b446f4fde4c9b90bec77c8a9ac7d5e5851d7a2bc186a1c3341589f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="class">std::allocator</class>
    <class kind="class">std::auto_ptr</class>
    <class kind="class">std::ios_base</class>
    <class kind="class">std::basic_ios</class>
    <class kind="class">std::basic_istream</class>
    <class kind="class">std::basic_ostream</class>
    <class kind="class">std::basic_iostream</class>
    <class kind="class">std::basic_ifstream</class>
    <class kind="class">std::basic_ofstream</class>
    <class kind="class">std::basic_fstream</class>
    <class kind="class">std::basic_istringstream</class>
    <class kind="class">std::basic_ostringstream</class>
    <class kind="class">std::basic_stringstream</class>
    <class kind="class">std::ios</class>
    <class kind="class">std::wios</class>
    <class kind="class">std::istream</class>
    <class kind="class">std::wistream</class>
    <class kind="class">std::ostream</class>
    <class kind="class">std::wostream</class>
    <class kind="class">std::ifstream</class>
    <class kind="class">std::wifstream</class>
    <class kind="class">std::ofstream</class>
    <class kind="class">std::wofstream</class>
    <class kind="class">std::fstream</class>
    <class kind="class">std::wfstream</class>
    <class kind="class">std::istringstream</class>
    <class kind="class">std::wistringstream</class>
    <class kind="class">std::ostringstream</class>
    <class kind="class">std::wostringstream</class>
    <class kind="class">std::stringstream</class>
    <class kind="class">std::wstringstream</class>
    <class kind="class">std::basic_string</class>
    <class kind="class">std::string</class>
    <class kind="class">std::wstring</class>
    <class kind="class">std::complex</class>
    <class kind="class">std::bitset</class>
    <class kind="class">std::deque</class>
    <class kind="class">std::list</class>
    <class kind="class">std::map</class>
    <class kind="class">std::multimap</class>
    <class kind="class">std::set</class>
    <class kind="class">std::multiset</class>
    <class kind="class">std::vector</class>
    <class kind="class">std::queue</class>
    <class kind="class">std::priority_queue</class>
    <class kind="class">std::stack</class>
    <class kind="class">std::valarray</class>
    <class kind="class">std::exception</class>
    <class kind="class">std::bad_alloc</class>
    <class kind="class">std::bad_cast</class>
    <class kind="class">std::bad_typeid</class>
    <class kind="class">std::logic_error</class>
    <class kind="class">std::runtime_error</class>
    <class kind="class">std::bad_exception</class>
    <class kind="class">std::domain_error</class>
    <class kind="class">std::invalid_argument</class>
    <class kind="class">std::length_error</class>
    <class kind="class">std::out_of_range</class>
    <class kind="class">std::range_error</class>
    <class kind="class">std::overflow_error</class>
    <class kind="class">std::underflow_error</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gadf8c733643a40f5135c2e0d8a32764c4</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBCisTransStereo &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaa6a386afa954e168b8c1c5b15c2d6f27</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBCisTransStereo::Config &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga9a6442f8a6cda1d0eb673a0199c9226d</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBSquarePlanarStereo &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaca674872623ccf5104d49756ed4f8c22</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBSquarePlanarStereo::Config &amp;cfg)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>ga30c6cc4c63f918bad5ed504e0e53edc6</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBTetrahedralStereo &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stereo.html</anchorfile>
      <anchor>gaa6dbf885c726a181852e742bb0b9a65d</anchor>
      <arglist>(ostream &amp;out, const OpenBabel::OBTetrahedralStereo::Config &amp;cfg)</arglist>
    </member>
  </compound>
</tagfile>
