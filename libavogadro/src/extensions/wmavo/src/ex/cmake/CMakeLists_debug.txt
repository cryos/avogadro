
set( PLUGIN_NAME wmextension )

# wmextension plugin source files.
set( wmavoconst_include_dir ../ ) # .h (constants & revision)
set( wmtool_include_dir ../tool/src ) # .h (wmtool plugin)
set( undocommand_include_dir src/undo_command ) # .h (undocommand)
set( tools_include_dir src/tools ) # .h (wiwo, contextmenu, action_modified ...)

set( wiiuse_dir "${CMAKE_CURRENT_SOURCE_DIR}/../../extra/wiiuse_wiiusecpp" ) # root directory of wiiuse/wiiusecpp files.
set( wiiuse_include_dir "${wiiuse_dir}/wiiuse/src" ) # .h
set( wiiusecpp_include_dir "${wiiuse_dir}/wiiusecpp/src" ) # .h
set( wiiuse_lib_name wiiuse )
set( wiiusecpp_lib_name wiiusecpp )
  
if( WIN32 )
# Windows.

  # wiiuse/wiiusecpp libraries.
  set( wiiuse_lib_dir "${wiiuse_dir}/lib_win32" ) # ".lib" for wiise/wiiusecpp (release mode)
  set( wiiuse_libd_dir "${wiiuse_dir}/lib_win32/debug" ) # ".lib" for wiise/wiiusecpp (debug mode)

else() 
# Unix ...
  #set( wiiusecpp_include_dir /home/myck/install/linux/wiiusecpp/src ) # .h
  #set( wiiusecpp_lib_dir /usr/lib ) # ".lib"
  #set( wiiusecpp_lib_name wiiusecpp )
  
  # wiiuse/wiiusecpp libraries.
  set( wiiuse_lib_dir "${wiiuse_dir}/lib_nix64" ) # ".lib" for wiise/wiiusecpp (release mode)
  
  set( OpenBabel2_include_DIR "/usr/include/openbabel-2.0/" )

endif()


if( "${LINK_LIBS}" STREQUAL "avogadro" )
# In the Avogadro compilation process.
# A lot of attribut are initiated for openGL, openBabel ... 
# It is necessary that you (if it is does't already) :
# - add the project in : [avogadro_path]/libavogadro/src/extensions/[here_wmavo_directory]
# - add "add_subdirectory( wmavo/src/ex )" in : [avogadro_path]/libavogadro/src/extensions/CMakeLists.txt

  # The Meta-Object Compiler, moc, is the program that handles Qt's C++ extensions.
  set( in_MOC_SRC src/wmextension.cpp src/wmavo_thread.cpp src/wmavo_rumble.cpp src/undo_command/undocommand.cpp src/tools/context_menu.cpp src/tools/action_modified.cpp)
  set( in_MOC_SRC ${in_MOC_SRC} src/wmavo.cpp ) # Add file to include in project, but it does not need moc file ...
  set( in_UIS_H "" )
  set( in_RC_SCRS "" )
  
  # Write the Avogadro revision in revision.h.
  configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/revision.h.in ${CMAKE_CURRENT_SOURCE_DIR}/revision.h )

  
  ## Set up the build environment (to know where are .h, ".dll" and some files)

  # Let to use .h directly : 
  # ex. : #include <wmavo_const.h> instead of <../../wmavo_const.h>
  include_directories( ${wmavoconst_include_dir} )
  include_directories( ${wmtool_include_dir} )
  include_directories( ${wiiuse_include_dir} )
  include_directories( ${wiiusecpp_include_dir} )
  include_directories( ${undocommand_include_dir} )
  include_directories( ${tools_include_dir} )

  # ".dll"  
  link_directories( ${wiiuse_lib_dir} )
  link_directories( ${wiiusecpp_lib_dir} )

  # Generate moc, specify install directories ...
  avogadro_plugin( ${PLUGIN_NAME} "${in_MOC_SRC}" )

  # Link the LIBRARY ! Not *.h !
  target_link_libraries( ${PLUGIN_NAME} ${wiiuse_lib_name} )
  target_link_libraries( ${PLUGIN_NAME} ${wiiusecpp_lib_name} )
  
  # To install wiiuse/wiiusecpp libraries (& other things)in the Avogadro bin.
  file( GLOB wiiuse_files ${wiiuse_libd_dir}/*wiiuse* )
  if( WIN32 ) 
    install( FILES ${wiiuse_files} DESTINATION ${BIN_INSTALL_DIR} )
   
    #file( GLOB_RECURSE frag_files img/fragments/* )
    #install( FILES ${frag_files} DESTINATION ${BIN_INSTALL_DIR}/../share/avogadro/fragments_resume )
  else()
    install( FILES ${wiiuse_files} DESTINATION "/usr/lib" )
  endif()

else()
# In a stand alone compilation process.
# Nothing is initiated ...

  project( ${PLUGIN_NAME} )
  cmake_minimum_required(VERSION 2.6)

  # Avogadro needs.
 
  if( NOT EXISTS "${Avogadro_DIR}" )
    if( WIN32 ) 
      #set( Avogadro_DIR "C:/src/avogadro-1.1.0/build" )
      #set( Avogadro_DIR "C:/Program Files (x86)/Avogadro/bin/avogadro" )
      set( Avogadro_DIR "C:/Program Files (x86)/Avogadro-1.0.3_debug/bin/avogadro" )
      #message( STATUS "Avogadro_DIR is by default : " ${Avogadro_DIR} )
    endif()
  else()
    #message( STATUS "Avogadro_DIR is : " ${Avogadro_DIR} )
  endif()
  
  #message( STATUS "Avogadro directories is searching ..." )
  find_package( Avogadro 1.0.0 REQUIRED )
  message( STATUS "Avogadro directory: ${Avogadro_DIR}" )
  
  # OpenGL needs (Useless, "included" in Avogadro)
  #find_package(OpenGL REQUIRED) # find and setup OpenGL.
  #message( STATUS "OpenGL found : " ${OPENGL_LIBRARIES})

  # glut libraries and source files ("Replaced by" OpenGL needs)
  #set( glut_INCLUDE_DIR "C:/src/freeglut-2.6.0/include" ) # .h
  #set( glut_LIB_DIR "C:/src/freeglut-2.6.0/Release" ) # .lib
  #set( glut_lib_name freeglut ) # Name of the library to link.

  # Eigen needs.
  if( NOT EXISTS "${EIGEN2_INCLUDE_DIR}" )
    if( WIN32 ) 
      set( EIGEN2_INCLUDE_DIR "C:/src/eigen-2.0.15" ) # .h
      message( STATUS "EIGEN2_INCLUDE_DIR is by default : " ${EIGEN2_INCLUDE_DIR} )
    endif()
  else()
    message( STATUS "EIGEN2_INCLUDE_DIR is : " ${EIGEN2_INCLUDE_DIR} )
  endif()
  
  # OpenBabel needs.
  #set( OpenBabel2_include_DIR "C:/src/openbabel-2.3.0/include" ) # .h
  #set( OpenBabel22_include_DIR "C:/src/openbabel-2.3.0/windows-vc2008/build/include" ) # .h
  if( NOT EXISTS "${OPENBABEL2_INCLUDE_DIR}" )
    if( WIN32 )
      set( OPENBABEL2_INCLUDE_DIR "C:/src/openbabeld-2.3.0/windows-vc2008/install/include/openbabel-2.0" ) # .h
    else()
      set( OPENBABEL2_INCLUDE_DIR "/usr/include/openbabel-2.0/" )
      
      if( NOT EXISTS "${OPENBABEL2_INCLUDE_DIR}" )
        set( OPENBABEL2_INCLUDE_DIR "/usr/local/include/openbabel-2.0/" )
      endif()
    endif()
  else()
    #message( STATUS "OPENBABEL2_INCLUDE_DIR is : " ${OPENBABEL2_INCLUDE_DIR} )
  endif()
  
  if( EXISTS "${OPENBABEL2_INCLUDE_DIR}" )
    message( STATUS "OPENBABEL2_INCLUDE_DIR is : " ${OPENBABEL2_INCLUDE_DIR} )
  else()
    message( STATUS "OPENBABEL2_INCLUDE_DIR NOT found : " ${OPENBABEL2_INCLUDE_DIR} )
  endif()
  
  # 
  set( LINK_LIBS avogadro )
  set( PLUGIN_LABEL extensions )
  set( PLUGIN_TARGET extensions )
  set( PLUGIN_TYPE extension )
  
    
  # The Meta-Object Compiler, moc, is the program that handles Qt's C++ extensions.
  set( in_MOC_H src/wmextension.h src/wmavo_thread.h src/wmavo_rumble.h src/undo_command/undocommand.h src/tools/context_menu.h src/tools/action_modified.h )
  set( in_UIS_H "" )
  set( in_RC_SCRS "" )
  
  # All source file (recursif search) (wmavo, fifo ...).
  # Add the forgotten files for the moc generation.
  file( GLOB_RECURSE source_files	src/* )
  
  # Write the Avogadro revision in revision.h.
  configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/revision.h.in ${CMAKE_CURRENT_SOURCE_DIR}/revision.h )

  # Add flags for Windows.
  if( WIN32 )
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall") # Add a flag in a CMake attribut.
    
    if( MSVC ) # For Visual Studio.
      add_definitions( -DUSING_OBDLL -DUSING_DYNAMIC_LIBS )
    endif()
  endif()

  
  ## Set up the build environment (to know where are .h, ".dll" and some files)

  # Let to use .h directly : 
  # ex. : #include <wmavo_const.h> instead of <../../wmavo_const.h>
  include_directories( ${wmavoconst_include_dir} )
  include_directories( ${wmtool_include_dir} )
  include_directories( ${wiiuse_include_dir} )
  include_directories( ${wiiusecpp_include_dir} )
  include_directories( ${undocommand_include_dir} )
  include_directories( ${tools_include_dir} )
  include_directories( ${OPENBABEL2_INCLUDE_DIR} )

  # ".dll"
  link_directories( ${wiiuse_libd_dir} )

  # Other files.
  include(${Avogadro_USE_FILE})

  ## BELOW, NO CHANGE ! 
  # (Except to add a target_link_libraries.)

  ## Génération des fichiers nécessaire pour la compilation 
  ## et éditions de liens avec Qt, Avogadro & Co.
  QT4_WRAP_CPP(out_MOC_H ${in_MOC_H})
  qt4_wrap_ui(out_UIS_H ${in_UIS_H})
  qt4_add_resources(out_RC_SRCS ${in_RC_SCRS})

  add_library( ${PLUGIN_NAME} MODULE ${source_files} ${out_UIS_H} ${out_MOC_H} ${out_RC_SRCS} )
  
  # Link the LIBRARY ! Not *.h !
  target_link_libraries( ${PLUGIN_NAME} ${wiiuse_lib_name} ) 
  target_link_libraries( ${PLUGIN_NAME} ${wiiusecpp_lib_name} )
  target_link_libraries( ${PLUGIN_NAME} avogadro )
  target_link_libraries( ${PLUGIN_NAME} ${OPENGL_LIBRARIES} )
  
  # Copy some files in the Avogadro directory.
  file( GLOB_RECURSE frag_files img/fragments/* )
  message( STATUS "fragments_resume directory:" "${BIN_INSTALL_DIR}/../share/avogadro/fragments_resume" )
  message( STATUS "fragments_resume files:" ${frag_files} )
  #install( FILES ${frag_files} DESTINATION "${BIN_INSTALL_DIR}/../share/avogadro/fragments/resume" )

endif()

