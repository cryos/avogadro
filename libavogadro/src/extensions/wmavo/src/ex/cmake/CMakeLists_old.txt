
project(WmExtension)
cmake_minimum_required(VERSION 2.6)

# Define the "identity" of the project.
set( plugin_type extension )
set( plugin_name wmextension )

# Let to use .h directly : 
# ex. : #include <wmavo_const.h> instead of <../../wmavo_const.h>
set( wmavoconst_include_dir ../ ) # .h (constants & revision)
set( wmtool_include_dir ../tool/src ) # .h

set( undocommand_include_dir src/undo_command ) # .h
set( wiwo_include_dir src/tools ) # .h
set( contextmenu_include_dir src/tools ) # .h
set( action_modified_include_dir src/tools ) # .h

# The Meta-Object Compiler, moc, is the program that handles Qt's C++ extensions.
set( in_MOC_H src/wmextension.h src/wmavo_thread.h src/wmavo_rumble.h src/undo_command/undocommand.h src/tools/context_menu.h src/tools/action_modified.h)
set( in_UIS_H "" )
set( in_RC_SCRS "" )

if( WIN32 ) # Windows.
# Need Windows path for a lot of elements.
  set( Avogadro_DIR "C:/src/avogadro-1.1.0/build" ) # .h
  set( EIGEN2_INCLUDE_DIR "C:/src/eigen-2.0.15" ) # .h
  
  set( OpenBabel2_include_DIR "C:/src/openbabel-2.3.0/include" ) # .h
  set( OpenBabel22_include_DIR "C:/src/openbabel-2.3.0/windows-vc2008/build/include" ) # .h
  
  set( glut_INCLUDE_DIR "C:/src/freeglut-2.6.0/include" ) # .h
  set( glut_LIB_DIR "C:/src/freeglut-2.6.0/Release" ) # .lib
  set( glut_lib_name freeglut ) # Name of the library to link.
  
  set( wiiuse_include_dir "${CMAKE_CURRENT_SOURCE_DIR}/../../extra/wiiuse/src" ) # .h
  set( wiiuse_lib_dir "${CMAKE_CURRENT_SOURCE_DIR}/../../extra/lib" ) # ".lib"
  set( wiiuse_lib_name wiiuse )
  set( wiiusecpp_include_dir "${CMAKE_CURRENT_SOURCE_DIR}/../../extra/wiiusecpp/src" ) # .h
  set( wiiusecpp_lib_dir "${CMAKE_CURRENT_SOURCE_DIR}/../../extra/lib" ) # ".lib"
  set( wiiusecpp_lib_name wiiusecpp )
  
  # Add a flag in CMake attribut.
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
 
else( WIN32 ) # Unix.
# Need a little element for Unix.
  set( wiiusecpp_include_dir /home/myck/install/linux/wiiusecpp/src ) # .h
  set( wiiusecpp_lib_dir /usr/lib ) # ".lib"
  set( wiiusecpp_lib_name wiiusecpp )
  
  set( OpenBabel2_include_DIR "/usr/include/openbabel-2.0/" )
  
  # Add a flag in CMake attribut.
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -lglut")
  
endif( WIN32 )

find_package( Avogadro 1.0.0 REQUIRED )
file( GLOB_RECURSE source_files	src/* ) # All source file (recursif search) (wmavo, fifo ...).

# Write the Avogadro revision in revision.h.
configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/revision.h.in ${CMAKE_CURRENT_SOURCE_DIR}/revision.h )


## Set up the build environment (to know where are .h, ".dll" and some files)

# .h
include_directories( ${wmavoconst_include_dir} )
include_directories( ${wmtool_include_dir} )
include_directories( ${OpenBabel2_include_DIR} )
include_directories( ${wiiusecpp_include_dir} )
include_directories( ${undocommand_include_dir} )
include_directories( ${wiwo_include_dir} )
include_directories( ${contextmenu_include_dir} )
include_directories( ${action_modified_include_dir} )

# ".dll"
link_directories( ${wiiuse_lib_dir} )
link_directories( ${wiiusecpp_lib_dir} )

# Other files.
include(${Avogadro_USE_FILE})

if( WIN32 ) # Windows

  include_directories( ${wiiuse_include_dir} )
  include_directories( ${OpenBabel22_include_DIR} )

  include_directories( ${glut_INCLUDE_DIR} )
  link_directories( ${glut_LIB_DIR} )
  
  # Add macro for thr preprocessor.
  add_definitions( -DUSING_OBDLL -DUSING_DYNAMIC_LIBS)
  
endif( WIN32 )


### BELOW, NO CHANGE ! 
# (Except to add a target_link_libraries.)

## Génération des fichiers nécessaire pour la compilation 
## et éditions de liens avec Qt, Avogadro & Co.
QT4_WRAP_CPP(out_MOC_H ${in_MOC_H})
qt4_wrap_ui(out_UIS_H ${in_UIS_H})
qt4_add_resources(out_RC_SRCS ${in_RC_SCRS})

add_library( ${plugin_name} MODULE ${source_files} ${out_UIS_H} ${out_MOC_H} ${out_RC_SRCS} )
target_link_libraries( ${plugin_name} avogadro )
target_link_libraries( ${plugin_name} ${wiiusecpp_lib_name} ) # Link the LIBRARY ! Not *.h !
target_link_libraries( ${plugin_name} ${wiiuse_lib_name} )

# ?
#install(TARGETS ${plugin_name} DESTINATION "${Avogadro_PLUGIN_DIR}/${plugin_type}")
#set_target_properties(${plugin_name} PROPERTIES OUTPUT_NAME ${plugin_name} PREFIX "")

